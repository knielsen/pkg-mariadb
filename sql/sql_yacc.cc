
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 189 of yacc.c  */
#line 792 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKPOINT_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     COALESCE = 324,
     CODE_SYM = 325,
     COLLATE_SYM = 326,
     COLLATION_SYM = 327,
     COLUMNS = 328,
     COLUMN_ADD_SYM = 329,
     COLUMN_CREATE_SYM = 330,
     COLUMN_DELETE_SYM = 331,
     COLUMN_EXISTS_SYM = 332,
     COLUMN_GET_SYM = 333,
     COLUMN_LIST_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURSOR_SYM = 363,
     CURSOR_NAME_SYM = 364,
     CURTIME = 365,
     DATABASE = 366,
     DATABASES = 367,
     DATAFILE_SYM = 368,
     DATA_SYM = 369,
     DATETIME = 370,
     DATE_ADD_INTERVAL = 371,
     DATE_SUB_INTERVAL = 372,
     DATE_SYM = 373,
     DAY_HOUR_SYM = 374,
     DAY_MICROSECOND_SYM = 375,
     DAY_MINUTE_SYM = 376,
     DAY_SECOND_SYM = 377,
     DAY_SYM = 378,
     DEALLOCATE_SYM = 379,
     DECIMAL_NUM = 380,
     DECIMAL_SYM = 381,
     DECLARE_SYM = 382,
     DEFAULT = 383,
     DEFINER_SYM = 384,
     DELAYED_SYM = 385,
     DELAY_KEY_WRITE_SYM = 386,
     DELETE_SYM = 387,
     DESC = 388,
     DESCRIBE = 389,
     DES_KEY_FILE = 390,
     DETERMINISTIC_SYM = 391,
     DIRECTORY_SYM = 392,
     DISABLE_SYM = 393,
     DISCARD = 394,
     DISK_SYM = 395,
     DISTINCT = 396,
     DIV_SYM = 397,
     DOUBLE_SYM = 398,
     DO_SYM = 399,
     DROP = 400,
     DUAL_SYM = 401,
     DUMPFILE = 402,
     DUPLICATE_SYM = 403,
     DYNAMIC_SYM = 404,
     EACH_SYM = 405,
     ELSE = 406,
     ELSEIF_SYM = 407,
     ENABLE_SYM = 408,
     ENCLOSED = 409,
     END = 410,
     ENDS_SYM = 411,
     END_OF_INPUT = 412,
     ENGINES_SYM = 413,
     ENGINE_SYM = 414,
     ENUM = 415,
     EQ = 416,
     EQUAL_SYM = 417,
     ERROR_SYM = 418,
     ERRORS = 419,
     ESCAPED = 420,
     ESCAPE_SYM = 421,
     EVENTS_SYM = 422,
     EVENT_SYM = 423,
     EVERY_SYM = 424,
     EXAMINED_SYM = 425,
     EXECUTE_SYM = 426,
     EXISTS = 427,
     EXIT_SYM = 428,
     EXPANSION_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FOUND_SYM = 446,
     FROM = 447,
     FULL = 448,
     FULLTEXT_SYM = 449,
     FUNCTION_SYM = 450,
     GE = 451,
     GENERAL = 452,
     GENERATED_SYM = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GLOBAL_SYM = 457,
     GRANT = 458,
     GRANTS = 459,
     GROUP_SYM = 460,
     GROUP_CONCAT_SYM = 461,
     GT_SYM = 462,
     HANDLER_SYM = 463,
     HARD_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HIGH_PRIORITY = 469,
     HOST_SYM = 470,
     HOSTS_SYM = 471,
     HOUR_MICROSECOND_SYM = 472,
     HOUR_MINUTE_SYM = 473,
     HOUR_SECOND_SYM = 474,
     HOUR_SYM = 475,
     IDENT = 476,
     IDENTIFIED_SYM = 477,
     IDENT_QUOTED = 478,
     IF = 479,
     IGNORE_SYM = 480,
     IGNORE_SERVER_IDS_SYM = 481,
     IMPORT = 482,
     INDEXES = 483,
     INDEX_SYM = 484,
     INDEX_STATS_SYM = 485,
     INFILE = 486,
     INITIAL_SIZE_SYM = 487,
     INNER_SYM = 488,
     INOUT_SYM = 489,
     INSENSITIVE_SYM = 490,
     INSERT = 491,
     INSERT_METHOD = 492,
     INSTALL_SYM = 493,
     INTERVAL_SYM = 494,
     INTO = 495,
     INT_SYM = 496,
     INVOKER_SYM = 497,
     IN_SYM = 498,
     IO_SYM = 499,
     IPC_SYM = 500,
     IS = 501,
     ISOLATION = 502,
     ISSUER_SYM = 503,
     ITERATE_SYM = 504,
     JOIN_SYM = 505,
     KEYS = 506,
     KEY_BLOCK_SIZE = 507,
     KEY_SYM = 508,
     KILL_SYM = 509,
     LANGUAGE_SYM = 510,
     LAST_SYM = 511,
     LAST_VALUE = 512,
     LE = 513,
     LEADING = 514,
     LEAVES = 515,
     LEAVE_SYM = 516,
     LEFT = 517,
     LESS_SYM = 518,
     LEVEL_SYM = 519,
     LEX_HOSTNAME = 520,
     LIKE = 521,
     LIMIT = 522,
     LINEAR_SYM = 523,
     LINES = 524,
     LINESTRING = 525,
     LIST_SYM = 526,
     LOAD = 527,
     LOCAL_SYM = 528,
     LOCATOR_SYM = 529,
     LOCKS_SYM = 530,
     LOCK_SYM = 531,
     LOGFILE_SYM = 532,
     LOGS_SYM = 533,
     LONGBLOB = 534,
     LONGTEXT = 535,
     LONG_NUM = 536,
     LONG_SYM = 537,
     LOOP_SYM = 538,
     LOW_PRIORITY = 539,
     LT = 540,
     MASTER_CONNECT_RETRY_SYM = 541,
     MASTER_HOST_SYM = 542,
     MASTER_LOG_FILE_SYM = 543,
     MASTER_LOG_POS_SYM = 544,
     MASTER_PASSWORD_SYM = 545,
     MASTER_PORT_SYM = 546,
     MASTER_SERVER_ID_SYM = 547,
     MASTER_SSL_CAPATH_SYM = 548,
     MASTER_SSL_CA_SYM = 549,
     MASTER_SSL_CERT_SYM = 550,
     MASTER_SSL_CIPHER_SYM = 551,
     MASTER_SSL_KEY_SYM = 552,
     MASTER_SSL_SYM = 553,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 554,
     MASTER_SYM = 555,
     MASTER_USER_SYM = 556,
     MASTER_HEARTBEAT_PERIOD_SYM = 557,
     MATCH = 558,
     MAX_CONNECTIONS_PER_HOUR = 559,
     MAX_QUERIES_PER_HOUR = 560,
     MAX_ROWS = 561,
     MAX_SIZE_SYM = 562,
     MAX_SYM = 563,
     MAX_UPDATES_PER_HOUR = 564,
     MAX_USER_CONNECTIONS_SYM = 565,
     MAX_VALUE_SYM = 566,
     MEDIUMBLOB = 567,
     MEDIUMINT = 568,
     MEDIUMTEXT = 569,
     MEDIUM_SYM = 570,
     MEMORY_SYM = 571,
     MERGE_SYM = 572,
     MESSAGE_TEXT_SYM = 573,
     MICROSECOND_SYM = 574,
     MIGRATE_SYM = 575,
     MINUTE_MICROSECOND_SYM = 576,
     MINUTE_SECOND_SYM = 577,
     MINUTE_SYM = 578,
     MIN_ROWS = 579,
     MIN_SYM = 580,
     MODE_SYM = 581,
     MODIFIES_SYM = 582,
     MODIFY_SYM = 583,
     MOD_SYM = 584,
     MONTH_SYM = 585,
     MULTILINESTRING = 586,
     MULTIPOINT = 587,
     MULTIPOLYGON = 588,
     MUTEX_SYM = 589,
     MYSQL_ERRNO_SYM = 590,
     NAMES_SYM = 591,
     NAME_SYM = 592,
     NATIONAL_SYM = 593,
     NATURAL = 594,
     NCHAR_STRING = 595,
     NCHAR_SYM = 596,
     NDBCLUSTER_SYM = 597,
     NE = 598,
     NEG = 599,
     NEW_SYM = 600,
     NEXT_SYM = 601,
     NODEGROUP_SYM = 602,
     NONE_SYM = 603,
     NOT2_SYM = 604,
     NOT_SYM = 605,
     NOW_SYM = 606,
     NO_SYM = 607,
     NO_WAIT_SYM = 608,
     NO_WRITE_TO_BINLOG = 609,
     NULL_SYM = 610,
     NUM = 611,
     NUMERIC_SYM = 612,
     NVARCHAR_SYM = 613,
     OFFSET_SYM = 614,
     OLD_PASSWORD = 615,
     ON = 616,
     ONE_SHOT_SYM = 617,
     ONE_SYM = 618,
     ONLINE_SYM = 619,
     OPEN_SYM = 620,
     OPTIMIZE = 621,
     OPTIONS_SYM = 622,
     OPTION = 623,
     OPTIONALLY = 624,
     OR2_SYM = 625,
     ORDER_SYM = 626,
     OR_OR_SYM = 627,
     OR_SYM = 628,
     OUTER = 629,
     OUTFILE = 630,
     OUT_SYM = 631,
     OWNER_SYM = 632,
     PACK_KEYS_SYM = 633,
     PAGE_SYM = 634,
     PAGE_CHECKSUM_SYM = 635,
     PARAM_MARKER = 636,
     PARSER_SYM = 637,
     PARSE_VCOL_EXPR_SYM = 638,
     PARTIAL = 639,
     PARTITIONING_SYM = 640,
     PARTITIONS_SYM = 641,
     PARTITION_SYM = 642,
     PASSWORD = 643,
     PERSISTENT_SYM = 644,
     PHASE_SYM = 645,
     PLUGINS_SYM = 646,
     PLUGIN_SYM = 647,
     POINT_SYM = 648,
     POLYGON = 649,
     PORT_SYM = 650,
     POSITION_SYM = 651,
     PRECISION = 652,
     PREPARE_SYM = 653,
     PRESERVE_SYM = 654,
     PREV_SYM = 655,
     PRIMARY_SYM = 656,
     PRIVILEGES = 657,
     PROCEDURE_SYM = 658,
     PROCESS = 659,
     PROCESSLIST_SYM = 660,
     PROFILE_SYM = 661,
     PROFILES_SYM = 662,
     PROXY_SYM = 663,
     PURGE = 664,
     QUARTER_SYM = 665,
     QUERY_SYM = 666,
     QUICK = 667,
     RANGE_SYM = 668,
     READS_SYM = 669,
     READ_ONLY_SYM = 670,
     READ_SYM = 671,
     READ_WRITE_SYM = 672,
     REAL = 673,
     REBUILD_SYM = 674,
     RECOVER_SYM = 675,
     REDOFILE_SYM = 676,
     REDO_BUFFER_SIZE_SYM = 677,
     REDUNDANT_SYM = 678,
     REFERENCES = 679,
     REGEXP = 680,
     RELAY = 681,
     RELAYLOG_SYM = 682,
     RELAY_LOG_FILE_SYM = 683,
     RELAY_LOG_POS_SYM = 684,
     RELAY_THREAD = 685,
     RELEASE_SYM = 686,
     RELOAD = 687,
     REMOVE_SYM = 688,
     RENAME = 689,
     REORGANIZE_SYM = 690,
     REPAIR = 691,
     REPEATABLE_SYM = 692,
     REPEAT_SYM = 693,
     REPLACE = 694,
     REPLICATION = 695,
     REQUIRE_SYM = 696,
     RESET_SYM = 697,
     RESIGNAL_SYM = 698,
     RESOURCES = 699,
     RESTORE_SYM = 700,
     RESTRICT = 701,
     RESUME_SYM = 702,
     RETURNS_SYM = 703,
     RETURN_SYM = 704,
     REVOKE = 705,
     RIGHT = 706,
     ROLLBACK_SYM = 707,
     ROLLUP_SYM = 708,
     ROUTINE_SYM = 709,
     ROWS_SYM = 710,
     ROW_FORMAT_SYM = 711,
     ROW_SYM = 712,
     RTREE_SYM = 713,
     SAVEPOINT_SYM = 714,
     SCHEDULE_SYM = 715,
     SCHEMA_NAME_SYM = 716,
     SECOND_MICROSECOND_SYM = 717,
     SECOND_SYM = 718,
     SECURITY_SYM = 719,
     SELECT_SYM = 720,
     SENSITIVE_SYM = 721,
     SEPARATOR_SYM = 722,
     SERIALIZABLE_SYM = 723,
     SERIAL_SYM = 724,
     SESSION_SYM = 725,
     SERVER_SYM = 726,
     SERVER_OPTIONS = 727,
     SET = 728,
     SET_VAR = 729,
     SHARE_SYM = 730,
     SHIFT_LEFT = 731,
     SHIFT_RIGHT = 732,
     SHOW = 733,
     SHUTDOWN = 734,
     SIGNAL_SYM = 735,
     SIGNED_SYM = 736,
     SIMPLE_SYM = 737,
     SLAVE = 738,
     SLOW = 739,
     SMALLINT = 740,
     SNAPSHOT_SYM = 741,
     SOCKET_SYM = 742,
     SOFT_SYM = 743,
     SONAME_SYM = 744,
     SOUNDS_SYM = 745,
     SOURCE_SYM = 746,
     SPATIAL_SYM = 747,
     SPECIFIC_SYM = 748,
     SQLEXCEPTION_SYM = 749,
     SQLSTATE_SYM = 750,
     SQLWARNING_SYM = 751,
     SQL_BIG_RESULT = 752,
     SQL_BUFFER_RESULT = 753,
     SQL_CACHE_SYM = 754,
     SQL_CALC_FOUND_ROWS = 755,
     SQL_NO_CACHE_SYM = 756,
     SQL_SMALL_RESULT = 757,
     SQL_SYM = 758,
     SQL_THREAD = 759,
     SSL_SYM = 760,
     STARTING = 761,
     STARTS_SYM = 762,
     START_SYM = 763,
     STATUS_SYM = 764,
     STDDEV_SAMP_SYM = 765,
     STD_SYM = 766,
     STOP_SYM = 767,
     STORAGE_SYM = 768,
     STRAIGHT_JOIN = 769,
     STRING_SYM = 770,
     SUBCLASS_ORIGIN_SYM = 771,
     SUBDATE_SYM = 772,
     SUBJECT_SYM = 773,
     SUBPARTITIONS_SYM = 774,
     SUBPARTITION_SYM = 775,
     SUBSTRING = 776,
     SUM_SYM = 777,
     SUPER_SYM = 778,
     SUSPEND_SYM = 779,
     SWAPS_SYM = 780,
     SWITCHES_SYM = 781,
     SYSDATE = 782,
     TABLES = 783,
     TABLESPACE = 784,
     TABLE_REF_PRIORITY = 785,
     TABLE_STATS_SYM = 786,
     TABLE_SYM = 787,
     TABLE_CHECKSUM_SYM = 788,
     TABLE_NAME_SYM = 789,
     TEMPORARY = 790,
     TEMPTABLE_SYM = 791,
     TERMINATED = 792,
     TEXT_STRING = 793,
     TEXT_SYM = 794,
     THAN_SYM = 795,
     THEN_SYM = 796,
     TIMESTAMP = 797,
     TIMESTAMP_ADD = 798,
     TIMESTAMP_DIFF = 799,
     TIME_SYM = 800,
     TINYBLOB = 801,
     TINYINT = 802,
     TINYTEXT = 803,
     TO_SYM = 804,
     TRAILING = 805,
     TRANSACTION_SYM = 806,
     TRANSACTIONAL_SYM = 807,
     TRIGGERS_SYM = 808,
     TRIGGER_SYM = 809,
     TRIM = 810,
     TRUE_SYM = 811,
     TRUNCATE_SYM = 812,
     TYPES_SYM = 813,
     TYPE_SYM = 814,
     UDF_RETURNS_SYM = 815,
     ULONGLONG_NUM = 816,
     UNCOMMITTED_SYM = 817,
     UNDEFINED_SYM = 818,
     UNDERSCORE_CHARSET = 819,
     UNDOFILE_SYM = 820,
     UNDO_BUFFER_SIZE_SYM = 821,
     UNDO_SYM = 822,
     UNICODE_SYM = 823,
     UNINSTALL_SYM = 824,
     UNION_SYM = 825,
     UNIQUE_SYM = 826,
     UNKNOWN_SYM = 827,
     UNLOCK_SYM = 828,
     UNSIGNED = 829,
     UNTIL_SYM = 830,
     UPDATE_SYM = 831,
     UPGRADE_SYM = 832,
     USAGE = 833,
     USER = 834,
     USER_STATS_SYM = 835,
     USE_FRM = 836,
     USE_SYM = 837,
     USING = 838,
     UTC_DATE_SYM = 839,
     UTC_TIMESTAMP_SYM = 840,
     UTC_TIME_SYM = 841,
     VALUES = 842,
     VALUE_SYM = 843,
     VARBINARY = 844,
     VARCHAR = 845,
     VARIABLES = 846,
     VARIANCE_SYM = 847,
     VARYING = 848,
     VAR_SAMP_SYM = 849,
     VIA_SYM = 850,
     VIEW_SYM = 851,
     VIRTUAL_SYM = 852,
     WAIT_SYM = 853,
     WARNINGS = 854,
     WEEK_SYM = 855,
     WHEN_SYM = 856,
     WHERE = 857,
     WHILE_SYM = 858,
     WITH = 859,
     WITH_CUBE_SYM = 860,
     WITH_ROLLUP_SYM = 861,
     WORK_SYM = 862,
     WRAPPER_SYM = 863,
     WRITE_SYM = 864,
     X509_SYM = 865,
     XA_SYM = 866,
     XML_SYM = 867,
     XOR = 868,
     YEAR_MONTH_SYM = 869,
     YEAR_SYM = 870,
     ZEROFILL = 871,
     IMPOSSIBLE_ACTION = 872
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKPOINT_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define COALESCE 324
#define CODE_SYM 325
#define COLLATE_SYM 326
#define COLLATION_SYM 327
#define COLUMNS 328
#define COLUMN_ADD_SYM 329
#define COLUMN_CREATE_SYM 330
#define COLUMN_DELETE_SYM 331
#define COLUMN_EXISTS_SYM 332
#define COLUMN_GET_SYM 333
#define COLUMN_LIST_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURSOR_SYM 363
#define CURSOR_NAME_SYM 364
#define CURTIME 365
#define DATABASE 366
#define DATABASES 367
#define DATAFILE_SYM 368
#define DATA_SYM 369
#define DATETIME 370
#define DATE_ADD_INTERVAL 371
#define DATE_SUB_INTERVAL 372
#define DATE_SYM 373
#define DAY_HOUR_SYM 374
#define DAY_MICROSECOND_SYM 375
#define DAY_MINUTE_SYM 376
#define DAY_SECOND_SYM 377
#define DAY_SYM 378
#define DEALLOCATE_SYM 379
#define DECIMAL_NUM 380
#define DECIMAL_SYM 381
#define DECLARE_SYM 382
#define DEFAULT 383
#define DEFINER_SYM 384
#define DELAYED_SYM 385
#define DELAY_KEY_WRITE_SYM 386
#define DELETE_SYM 387
#define DESC 388
#define DESCRIBE 389
#define DES_KEY_FILE 390
#define DETERMINISTIC_SYM 391
#define DIRECTORY_SYM 392
#define DISABLE_SYM 393
#define DISCARD 394
#define DISK_SYM 395
#define DISTINCT 396
#define DIV_SYM 397
#define DOUBLE_SYM 398
#define DO_SYM 399
#define DROP 400
#define DUAL_SYM 401
#define DUMPFILE 402
#define DUPLICATE_SYM 403
#define DYNAMIC_SYM 404
#define EACH_SYM 405
#define ELSE 406
#define ELSEIF_SYM 407
#define ENABLE_SYM 408
#define ENCLOSED 409
#define END 410
#define ENDS_SYM 411
#define END_OF_INPUT 412
#define ENGINES_SYM 413
#define ENGINE_SYM 414
#define ENUM 415
#define EQ 416
#define EQUAL_SYM 417
#define ERROR_SYM 418
#define ERRORS 419
#define ESCAPED 420
#define ESCAPE_SYM 421
#define EVENTS_SYM 422
#define EVENT_SYM 423
#define EVERY_SYM 424
#define EXAMINED_SYM 425
#define EXECUTE_SYM 426
#define EXISTS 427
#define EXIT_SYM 428
#define EXPANSION_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FOUND_SYM 446
#define FROM 447
#define FULL 448
#define FULLTEXT_SYM 449
#define FUNCTION_SYM 450
#define GE 451
#define GENERAL 452
#define GENERATED_SYM 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GLOBAL_SYM 457
#define GRANT 458
#define GRANTS 459
#define GROUP_SYM 460
#define GROUP_CONCAT_SYM 461
#define GT_SYM 462
#define HANDLER_SYM 463
#define HARD_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HIGH_PRIORITY 469
#define HOST_SYM 470
#define HOSTS_SYM 471
#define HOUR_MICROSECOND_SYM 472
#define HOUR_MINUTE_SYM 473
#define HOUR_SECOND_SYM 474
#define HOUR_SYM 475
#define IDENT 476
#define IDENTIFIED_SYM 477
#define IDENT_QUOTED 478
#define IF 479
#define IGNORE_SYM 480
#define IGNORE_SERVER_IDS_SYM 481
#define IMPORT 482
#define INDEXES 483
#define INDEX_SYM 484
#define INDEX_STATS_SYM 485
#define INFILE 486
#define INITIAL_SIZE_SYM 487
#define INNER_SYM 488
#define INOUT_SYM 489
#define INSENSITIVE_SYM 490
#define INSERT 491
#define INSERT_METHOD 492
#define INSTALL_SYM 493
#define INTERVAL_SYM 494
#define INTO 495
#define INT_SYM 496
#define INVOKER_SYM 497
#define IN_SYM 498
#define IO_SYM 499
#define IPC_SYM 500
#define IS 501
#define ISOLATION 502
#define ISSUER_SYM 503
#define ITERATE_SYM 504
#define JOIN_SYM 505
#define KEYS 506
#define KEY_BLOCK_SIZE 507
#define KEY_SYM 508
#define KILL_SYM 509
#define LANGUAGE_SYM 510
#define LAST_SYM 511
#define LAST_VALUE 512
#define LE 513
#define LEADING 514
#define LEAVES 515
#define LEAVE_SYM 516
#define LEFT 517
#define LESS_SYM 518
#define LEVEL_SYM 519
#define LEX_HOSTNAME 520
#define LIKE 521
#define LIMIT 522
#define LINEAR_SYM 523
#define LINES 524
#define LINESTRING 525
#define LIST_SYM 526
#define LOAD 527
#define LOCAL_SYM 528
#define LOCATOR_SYM 529
#define LOCKS_SYM 530
#define LOCK_SYM 531
#define LOGFILE_SYM 532
#define LOGS_SYM 533
#define LONGBLOB 534
#define LONGTEXT 535
#define LONG_NUM 536
#define LONG_SYM 537
#define LOOP_SYM 538
#define LOW_PRIORITY 539
#define LT 540
#define MASTER_CONNECT_RETRY_SYM 541
#define MASTER_HOST_SYM 542
#define MASTER_LOG_FILE_SYM 543
#define MASTER_LOG_POS_SYM 544
#define MASTER_PASSWORD_SYM 545
#define MASTER_PORT_SYM 546
#define MASTER_SERVER_ID_SYM 547
#define MASTER_SSL_CAPATH_SYM 548
#define MASTER_SSL_CA_SYM 549
#define MASTER_SSL_CERT_SYM 550
#define MASTER_SSL_CIPHER_SYM 551
#define MASTER_SSL_KEY_SYM 552
#define MASTER_SSL_SYM 553
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 554
#define MASTER_SYM 555
#define MASTER_USER_SYM 556
#define MASTER_HEARTBEAT_PERIOD_SYM 557
#define MATCH 558
#define MAX_CONNECTIONS_PER_HOUR 559
#define MAX_QUERIES_PER_HOUR 560
#define MAX_ROWS 561
#define MAX_SIZE_SYM 562
#define MAX_SYM 563
#define MAX_UPDATES_PER_HOUR 564
#define MAX_USER_CONNECTIONS_SYM 565
#define MAX_VALUE_SYM 566
#define MEDIUMBLOB 567
#define MEDIUMINT 568
#define MEDIUMTEXT 569
#define MEDIUM_SYM 570
#define MEMORY_SYM 571
#define MERGE_SYM 572
#define MESSAGE_TEXT_SYM 573
#define MICROSECOND_SYM 574
#define MIGRATE_SYM 575
#define MINUTE_MICROSECOND_SYM 576
#define MINUTE_SECOND_SYM 577
#define MINUTE_SYM 578
#define MIN_ROWS 579
#define MIN_SYM 580
#define MODE_SYM 581
#define MODIFIES_SYM 582
#define MODIFY_SYM 583
#define MOD_SYM 584
#define MONTH_SYM 585
#define MULTILINESTRING 586
#define MULTIPOINT 587
#define MULTIPOLYGON 588
#define MUTEX_SYM 589
#define MYSQL_ERRNO_SYM 590
#define NAMES_SYM 591
#define NAME_SYM 592
#define NATIONAL_SYM 593
#define NATURAL 594
#define NCHAR_STRING 595
#define NCHAR_SYM 596
#define NDBCLUSTER_SYM 597
#define NE 598
#define NEG 599
#define NEW_SYM 600
#define NEXT_SYM 601
#define NODEGROUP_SYM 602
#define NONE_SYM 603
#define NOT2_SYM 604
#define NOT_SYM 605
#define NOW_SYM 606
#define NO_SYM 607
#define NO_WAIT_SYM 608
#define NO_WRITE_TO_BINLOG 609
#define NULL_SYM 610
#define NUM 611
#define NUMERIC_SYM 612
#define NVARCHAR_SYM 613
#define OFFSET_SYM 614
#define OLD_PASSWORD 615
#define ON 616
#define ONE_SHOT_SYM 617
#define ONE_SYM 618
#define ONLINE_SYM 619
#define OPEN_SYM 620
#define OPTIMIZE 621
#define OPTIONS_SYM 622
#define OPTION 623
#define OPTIONALLY 624
#define OR2_SYM 625
#define ORDER_SYM 626
#define OR_OR_SYM 627
#define OR_SYM 628
#define OUTER 629
#define OUTFILE 630
#define OUT_SYM 631
#define OWNER_SYM 632
#define PACK_KEYS_SYM 633
#define PAGE_SYM 634
#define PAGE_CHECKSUM_SYM 635
#define PARAM_MARKER 636
#define PARSER_SYM 637
#define PARSE_VCOL_EXPR_SYM 638
#define PARTIAL 639
#define PARTITIONING_SYM 640
#define PARTITIONS_SYM 641
#define PARTITION_SYM 642
#define PASSWORD 643
#define PERSISTENT_SYM 644
#define PHASE_SYM 645
#define PLUGINS_SYM 646
#define PLUGIN_SYM 647
#define POINT_SYM 648
#define POLYGON 649
#define PORT_SYM 650
#define POSITION_SYM 651
#define PRECISION 652
#define PREPARE_SYM 653
#define PRESERVE_SYM 654
#define PREV_SYM 655
#define PRIMARY_SYM 656
#define PRIVILEGES 657
#define PROCEDURE_SYM 658
#define PROCESS 659
#define PROCESSLIST_SYM 660
#define PROFILE_SYM 661
#define PROFILES_SYM 662
#define PROXY_SYM 663
#define PURGE 664
#define QUARTER_SYM 665
#define QUERY_SYM 666
#define QUICK 667
#define RANGE_SYM 668
#define READS_SYM 669
#define READ_ONLY_SYM 670
#define READ_SYM 671
#define READ_WRITE_SYM 672
#define REAL 673
#define REBUILD_SYM 674
#define RECOVER_SYM 675
#define REDOFILE_SYM 676
#define REDO_BUFFER_SIZE_SYM 677
#define REDUNDANT_SYM 678
#define REFERENCES 679
#define REGEXP 680
#define RELAY 681
#define RELAYLOG_SYM 682
#define RELAY_LOG_FILE_SYM 683
#define RELAY_LOG_POS_SYM 684
#define RELAY_THREAD 685
#define RELEASE_SYM 686
#define RELOAD 687
#define REMOVE_SYM 688
#define RENAME 689
#define REORGANIZE_SYM 690
#define REPAIR 691
#define REPEATABLE_SYM 692
#define REPEAT_SYM 693
#define REPLACE 694
#define REPLICATION 695
#define REQUIRE_SYM 696
#define RESET_SYM 697
#define RESIGNAL_SYM 698
#define RESOURCES 699
#define RESTORE_SYM 700
#define RESTRICT 701
#define RESUME_SYM 702
#define RETURNS_SYM 703
#define RETURN_SYM 704
#define REVOKE 705
#define RIGHT 706
#define ROLLBACK_SYM 707
#define ROLLUP_SYM 708
#define ROUTINE_SYM 709
#define ROWS_SYM 710
#define ROW_FORMAT_SYM 711
#define ROW_SYM 712
#define RTREE_SYM 713
#define SAVEPOINT_SYM 714
#define SCHEDULE_SYM 715
#define SCHEMA_NAME_SYM 716
#define SECOND_MICROSECOND_SYM 717
#define SECOND_SYM 718
#define SECURITY_SYM 719
#define SELECT_SYM 720
#define SENSITIVE_SYM 721
#define SEPARATOR_SYM 722
#define SERIALIZABLE_SYM 723
#define SERIAL_SYM 724
#define SESSION_SYM 725
#define SERVER_SYM 726
#define SERVER_OPTIONS 727
#define SET 728
#define SET_VAR 729
#define SHARE_SYM 730
#define SHIFT_LEFT 731
#define SHIFT_RIGHT 732
#define SHOW 733
#define SHUTDOWN 734
#define SIGNAL_SYM 735
#define SIGNED_SYM 736
#define SIMPLE_SYM 737
#define SLAVE 738
#define SLOW 739
#define SMALLINT 740
#define SNAPSHOT_SYM 741
#define SOCKET_SYM 742
#define SOFT_SYM 743
#define SONAME_SYM 744
#define SOUNDS_SYM 745
#define SOURCE_SYM 746
#define SPATIAL_SYM 747
#define SPECIFIC_SYM 748
#define SQLEXCEPTION_SYM 749
#define SQLSTATE_SYM 750
#define SQLWARNING_SYM 751
#define SQL_BIG_RESULT 752
#define SQL_BUFFER_RESULT 753
#define SQL_CACHE_SYM 754
#define SQL_CALC_FOUND_ROWS 755
#define SQL_NO_CACHE_SYM 756
#define SQL_SMALL_RESULT 757
#define SQL_SYM 758
#define SQL_THREAD 759
#define SSL_SYM 760
#define STARTING 761
#define STARTS_SYM 762
#define START_SYM 763
#define STATUS_SYM 764
#define STDDEV_SAMP_SYM 765
#define STD_SYM 766
#define STOP_SYM 767
#define STORAGE_SYM 768
#define STRAIGHT_JOIN 769
#define STRING_SYM 770
#define SUBCLASS_ORIGIN_SYM 771
#define SUBDATE_SYM 772
#define SUBJECT_SYM 773
#define SUBPARTITIONS_SYM 774
#define SUBPARTITION_SYM 775
#define SUBSTRING 776
#define SUM_SYM 777
#define SUPER_SYM 778
#define SUSPEND_SYM 779
#define SWAPS_SYM 780
#define SWITCHES_SYM 781
#define SYSDATE 782
#define TABLES 783
#define TABLESPACE 784
#define TABLE_REF_PRIORITY 785
#define TABLE_STATS_SYM 786
#define TABLE_SYM 787
#define TABLE_CHECKSUM_SYM 788
#define TABLE_NAME_SYM 789
#define TEMPORARY 790
#define TEMPTABLE_SYM 791
#define TERMINATED 792
#define TEXT_STRING 793
#define TEXT_SYM 794
#define THAN_SYM 795
#define THEN_SYM 796
#define TIMESTAMP 797
#define TIMESTAMP_ADD 798
#define TIMESTAMP_DIFF 799
#define TIME_SYM 800
#define TINYBLOB 801
#define TINYINT 802
#define TINYTEXT 803
#define TO_SYM 804
#define TRAILING 805
#define TRANSACTION_SYM 806
#define TRANSACTIONAL_SYM 807
#define TRIGGERS_SYM 808
#define TRIGGER_SYM 809
#define TRIM 810
#define TRUE_SYM 811
#define TRUNCATE_SYM 812
#define TYPES_SYM 813
#define TYPE_SYM 814
#define UDF_RETURNS_SYM 815
#define ULONGLONG_NUM 816
#define UNCOMMITTED_SYM 817
#define UNDEFINED_SYM 818
#define UNDERSCORE_CHARSET 819
#define UNDOFILE_SYM 820
#define UNDO_BUFFER_SIZE_SYM 821
#define UNDO_SYM 822
#define UNICODE_SYM 823
#define UNINSTALL_SYM 824
#define UNION_SYM 825
#define UNIQUE_SYM 826
#define UNKNOWN_SYM 827
#define UNLOCK_SYM 828
#define UNSIGNED 829
#define UNTIL_SYM 830
#define UPDATE_SYM 831
#define UPGRADE_SYM 832
#define USAGE 833
#define USER 834
#define USER_STATS_SYM 835
#define USE_FRM 836
#define USE_SYM 837
#define USING 838
#define UTC_DATE_SYM 839
#define UTC_TIMESTAMP_SYM 840
#define UTC_TIME_SYM 841
#define VALUES 842
#define VALUE_SYM 843
#define VARBINARY 844
#define VARCHAR 845
#define VARIABLES 846
#define VARIANCE_SYM 847
#define VARYING 848
#define VAR_SAMP_SYM 849
#define VIA_SYM 850
#define VIEW_SYM 851
#define VIRTUAL_SYM 852
#define WAIT_SYM 853
#define WARNINGS 854
#define WEEK_SYM 855
#define WHEN_SYM 856
#define WHERE 857
#define WHILE_SYM 858
#define WITH 859
#define WITH_CUBE_SYM 860
#define WITH_ROLLUP_SYM 861
#define WORK_SYM 862
#define WRAPPER_SYM 863
#define WRITE_SYM 864
#define X509_SYM 865
#define XA_SYM 866
#define XML_SYM 867
#define XOR 868
#define YEAR_MONTH_SYM 869
#define YEAR_SYM 870
#define ZEROFILL 871
#define IMPOSSIBLE_ACTION 872




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;



/* Line 214 of yacc.c  */
#line 2115 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2132 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  600
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55921

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  637
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  919
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2621
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4440

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   872

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   630,     2,     2,     2,   624,   619,     2,
     627,   628,   622,   621,   629,   620,   635,   623,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   636,   633,
       2,     2,     2,     2,   634,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   625,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   631,   618,   632,   626,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     176,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   222,   226,   230,   234,   240,   242,   243,   245,
     249,   251,   255,   259,   263,   267,   268,   276,   277,   290,
     291,   304,   305,   318,   319,   326,   327,   331,   336,   341,
     345,   348,   359,   361,   365,   368,   371,   374,   377,   380,
     383,   386,   387,   401,   402,   409,   412,   413,   415,   419,
     421,   422,   425,   426,   429,   430,   432,   436,   441,   442,
     445,   446,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   473,   475,   476,   480,   482,   483,
     486,   487,   490,   493,   496,   499,   502,   506,   510,   512,
     514,   516,   519,   523,   527,   528,   533,   534,   538,   539,
     541,   545,   547,   548,   550,   554,   556,   557,   561,   562,
     564,   568,   570,   575,   576,   578,   580,   582,   583,   587,
     590,   594,   595,   599,   600,   606,   612,   613,   621,   627,
     628,   631,   633,   635,   637,   641,   643,   645,   647,   651,
     652,   654,   656,   658,   660,   663,   665,   669,   671,   673,
     674,   676,   677,   680,   684,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
     720,   724,   726,   730,   731,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   758,   760,   761,
     767,   768,   771,   772,   776,   777,   780,   783,   786,   789,
     790,   797,   800,   801,   804,   806,   808,   812,   813,   814,
     815,   823,   824,   827,   830,   832,   834,   835,   836,   845,
     846,   853,   855,   858,   860,   863,   864,   865,   872,   873,
     874,   881,   882,   885,   886,   892,   893,   895,   896,   902,
     903,   906,   907,   913,   918,   919,   920,   929,   930,   938,
     940,   942,   944,   946,   948,   951,   956,   962,   963,   968,
     973,   978,   982,   986,   989,   992,   993,   996,   998,  1001,
    1005,  1007,  1009,  1011,  1013,  1015,  1018,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,  1045,  1049,
    1051,  1053,  1055,  1057,  1059,  1061,  1063,  1066,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1086,  1088,  1091,  1095,
    1097,  1099,  1101,  1104,  1107,  1110,  1112,  1114,  1116,  1118,
    1121,  1125,  1129,  1133,  1137,  1141,  1145,  1149,  1153,  1158,
    1159,  1161,  1163,  1165,  1167,  1169,  1172,  1176,  1179,  1184,
    1185,  1192,  1193,  1199,  1200,  1201,  1207,  1208,  1216,  1218,
    1219,  1221,  1222,  1227,  1228,  1229,  1233,  1239,  1245,  1246,
    1251,  1254,  1257,  1260,  1263,  1264,  1266,  1267,  1269,  1271,
    1275,  1277,  1282,  1288,  1294,  1295,  1298,  1299,  1300,  1308,
    1309,  1319,  1321,  1325,  1327,  1329,  1330,  1333,  1334,  1338,
    1340,  1344,  1345,  1352,  1354,  1355,  1356,  1362,  1363,  1368,
    1370,  1372,  1374,  1378,  1380,  1384,  1385,  1386,  1392,  1394,
    1398,  1400,  1402,  1403,  1407,  1409,  1413,  1414,  1419,  1421,
    1422,  1424,  1427,  1429,  1433,  1438,  1442,  1446,  1450,  1454,
    1459,  1464,  1468,  1469,  1470,  1477,  1478,  1480,  1481,  1483,
    1485,  1488,  1490,  1492,  1493,  1495,  1497,  1500,  1502,  1503,
    1507,  1508,  1510,  1512,  1515,  1517,  1520,  1524,  1528,  1532,
    1536,  1540,  1544,  1548,  1552,  1556,  1560,  1564,  1568,  1572,
    1576,  1580,  1581,  1588,  1590,  1592,  1596,  1601,  1606,  1609,
    1612,  1615,  1619,  1623,  1627,  1631,  1635,  1639,  1643,  1648,
    1653,  1655,  1657,  1659,  1661,  1663,  1665,  1667,  1669,  1671,
    1673,  1675,  1677,  1679,  1682,  1684,  1686,  1688,  1690,  1692,
    1694,  1698,  1700,  1702,  1705,  1708,  1709,  1718,  1719,  1729,
    1730,  1740,  1741,  1751,  1760,  1763,  1764,  1766,  1771,  1772,
    1774,  1777,  1778,  1782,  1785,  1794,  1795,  1798,  1799,  1801,
    1803,  1804,  1806,  1809,  1811,  1813,  1816,  1819,  1824,  1828,
    1832,  1836,  1840,  1842,  1845,  1847,  1849,  1853,  1856,  1860,
    1863,  1866,  1868,  1872,  1876,  1879,  1883,  1885,  1888,  1891,
    1894,  1896,  1899,  1901,  1903,  1905,  1908,  1912,  1915,  1919,
    1922,  1925,  1929,  1933,  1937,  1938,  1945,  1946,  1953,  1956,
    1958,  1960,  1962,  1964,  1966,  1968,  1970,  1972,  1974,  1976,
    1978,  1981,  1984,  1986,  1989,  1991,  1994,  1998,  2001,  2003,
    2005,  2007,  2009,  2011,  2013,  2015,  2018,  2019,  2021,  2023,
    2029,  2030,  2032,  2035,  2037,  2039,  2041,  2043,  2047,  2051,
    2055,  2059,  2060,  2062,  2063,  2065,  2066,  2068,  2071,  2073,
    2075,  2078,  2081,  2086,  2088,  2092,  2095,  2097,  2100,  2103,
    2106,  2110,  2114,  2118,  2122,  2125,  2128,  2130,  2133,  2135,
    2137,  2139,  2141,  2143,  2144,  2147,  2149,  2151,  2153,  2155,
    2157,  2158,  2161,  2163,  2165,  2166,  2168,  2170,  2173,  2176,
    2178,  2181,  2184,  2185,  2187,  2189,  2191,  2195,  2197,  2201,
    2202,  2204,  2205,  2207,  2213,  2214,  2218,  2222,  2224,  2225,
    2228,  2231,  2234,  2235,  2239,  2243,  2250,  2257,  2259,  2261,
    2264,  2267,  2270,  2272,  2275,  2278,  2280,  2282,  2283,  2285,
    2287,  2289,  2291,  2292,  2294,  2296,  2298,  2299,  2301,  2304,
    2305,  2307,  2308,  2310,  2311,  2313,  2315,  2318,  2320,  2323,
    2325,  2328,  2331,  2334,  2338,  2341,  2345,  2349,  2353,  2357,
    2359,  2361,  2363,  2365,  2369,  2371,  2373,  2375,  2380,  2383,
    2385,  2390,  2391,  2393,  2394,  2397,  2399,  2403,  2404,  2411,
    2412,  2418,  2426,  2427,  2433,  2434,  2440,  2441,  2447,  2448,
    2453,  2454,  2465,  2469,  2474,  2478,  2482,  2490,  2491,  2495,
    2497,  2502,  2503,  2507,  2508,  2511,  2512,  2514,  2515,  2518,
    2521,  2524,  2527,  2529,  2531,  2533,  2537,  2542,  2543,  2550,
    2555,  2556,  2562,  2563,  2570,  2575,  2579,  2581,  2584,  2586,
    2588,  2589,  2595,  2596,  2600,  2603,  2604,  2610,  2611,  2612,
    2619,  2621,  2625,  2627,  2629,  2633,  2636,  2640,  2643,  2648,
    2649,  2656,  2657,  2658,  2666,  2671,  2676,  2680,  2684,  2687,
    2690,  2697,  2703,  2707,  2713,  2715,  2717,  2719,  2720,  2722,
    2723,  2725,  2726,  2729,  2730,  2732,  2735,  2737,  2739,  2741,
    2742,  2744,  2746,  2747,  2750,  2752,  2753,  2755,  2757,  2759,
    2760,  2766,  2770,  2771,  2777,  2781,  2785,  2786,  2790,  2791,
    2794,  2796,  2800,  2801,  2803,  2805,  2806,  2809,  2811,  2815,
    2816,  2822,  2823,  2825,  2827,  2828,  2835,  2836,  2838,  2840,
    2843,  2845,  2847,  2849,  2850,  2856,  2859,  2860,  2866,  2867,
    2869,  2871,  2874,  2876,  2878,  2880,  2882,  2884,  2887,  2888,
    2894,  2895,  2897,  2899,  2900,  2905,  2910,  2914,  2920,  2922,
    2926,  2930,  2931,  2938,  2940,  2942,  2944,  2948,  2951,  2955,
    2957,  2959,  2960,  2967,  2969,  2971,  2973,  2977,  2981,  2986,
    2987,  2994,  2995,  2998,  2999,  3004,  3005,  3008,  3010,  3013,
    3018,  3021,  3025,  3028,  3032,  3033,  3037,  3038,  3039,  3046,
    3049,  3051,  3053,  3056,  3059,  3068,  3073,  3074,  3076,  3079,
    3081,  3083,  3085,  3087,  3088,  3091,  3096,  3100,  3102,  3104,
    3108,  3113,  3114,  3115,  3116,  3119,  3122,  3124,  3126,  3127,
    3130,  3134,  3135,  3138,  3142,  3146,  3150,  3153,  3157,  3162,
    3166,  3171,  3175,  3180,  3182,  3186,  3191,  3195,  3199,  3206,
    3208,  3214,  3221,  3227,  3235,  3242,  3251,  3257,  3264,  3269,
    3274,  3280,  3284,  3289,  3291,  3295,  3299,  3303,  3307,  3311,
    3315,  3321,  3327,  3331,  3335,  3339,  3343,  3347,  3351,  3353,
    3355,  3357,  3359,  3361,  3363,  3365,  3367,  3369,  3371,  3373,
    3375,  3377,  3379,  3381,  3383,  3385,  3386,  3389,  3391,  3394,
    3396,  3398,  3400,  3403,  3406,  3408,  3410,  3413,  3416,  3421,
    3423,  3427,  3429,  3431,  3433,  3435,  3437,  3441,  3443,  3445,
    3447,  3449,  3453,  3456,  3459,  3462,  3465,  3469,  3473,  3479,
    3486,  3491,  3496,  3504,  3507,  3514,  3520,  3527,  3534,  3539,
    3544,  3550,  3555,  3562,  3565,  3570,  3575,  3580,  3591,  3598,
    3607,  3614,  3619,  3624,  3631,  3636,  3641,  3646,  3653,  3658,
    3666,  3674,  3682,  3689,  3696,  3703,  3710,  3714,  3719,  3726,
    3735,  3738,  3741,  3750,  3759,  3766,  3773,  3776,  3783,  3790,
    3799,  3808,  3815,  3824,  3831,  3834,  3843,  3852,  3855,  3858,
    3861,  3868,  3875,  3882,  3887,  3892,  3901,  3906,  3911,  3916,
    3921,  3925,  3934,  3939,  3944,  3951,  3956,  3961,  3966,  3973,
    3982,  3989,  3994,  4001,  4003,  4010,  4015,  4020,  4025,  4030,
    4035,  4042,  4047,  4048,  4054,  4061,  4064,  4068,  4069,  4074,
    4075,  4079,  4080,  4082,  4084,  4088,  4093,  4098,  4104,  4109,
    4114,  4119,  4125,  4130,  4131,  4132,  4140,  4145,  4151,  4156,
    4162,  4167,  4172,  4177,  4182,  4187,  4193,  4194,  4203,  4204,
    4208,  4212,  4214,  4219,  4220,  4222,  4223,  4226,  4227,  4229,
    4230,  4234,  4237,  4241,  4244,  4246,  4248,  4251,  4253,  4256,
    4258,  4261,  4264,  4267,  4268,  4272,  4273,  4275,  4277,  4281,
    4283,  4287,  4289,  4293,  4294,  4296,  4297,  4300,  4305,  4311,
    4313,  4315,  4317,  4319,  4324,  4326,  4330,  4334,  4338,  4339,
    4346,  4347,  4354,  4355,  4364,  4369,  4370,  4379,  4380,  4391,
    4398,  4399,  4408,  4409,  4420,  4427,  4429,  4432,  4435,  4436,
    4441,  4445,  4451,  4454,  4455,  4456,  4464,  4466,  4467,  4468,
    4475,  4476,  4480,  4481,  4482,  4488,  4489,  4491,  4492,  4494,
    4495,  4498,  4502,  4506,  4508,  4510,  4511,  4519,  4520,  4528,
    4530,  4533,  4534,  4535,  4538,  4539,  4542,  4543,  4545,  4547,
    4549,  4551,  4555,  4557,  4561,  4563,  4565,  4567,  4569,  4571,
    4573,  4575,  4577,  4579,  4581,  4583,  4585,  4587,  4589,  4591,
    4593,  4595,  4597,  4599,  4601,  4603,  4605,  4607,  4609,  4611,
    4612,  4614,  4616,  4617,  4620,  4621,  4623,  4624,  4625,  4629,
    4630,  4631,  4635,  4638,  4639,  4640,  4645,  4650,  4653,  4654,
    4656,  4658,  4662,  4666,  4668,  4671,  4672,  4674,  4675,  4680,
    4685,  4688,  4689,  4691,  4693,  4694,  4696,  4697,  4699,  4702,
    4708,  4713,  4715,  4719,  4723,  4725,  4727,  4729,  4731,  4733,
    4735,  4736,  4739,  4743,  4748,  4750,  4753,  4756,  4758,  4760,
    4762,  4764,  4766,  4768,  4770,  4772,  4774,  4776,  4778,  4780,
    4782,  4784,  4786,  4788,  4790,  4792,  4794,  4796,  4798,  4800,
    4802,  4804,  4806,  4808,  4809,  4810,  4817,  4818,  4820,  4824,
    4826,  4830,  4831,  4834,  4838,  4840,  4843,  4845,  4846,  4850,
    4851,  4852,  4860,  4863,  4865,  4866,  4870,  4871,  4879,  4880,
    4887,  4892,  4899,  4904,  4909,  4914,  4915,  4922,  4927,  4932,
    4938,  4945,  4950,  4952,  4956,  4958,  4960,  4964,  4966,  4967,
    4970,  4971,  4973,  4974,  4975,  4984,  4985,  4986,  4993,  4994,
    4996,  4998,  5000,  5002,  5004,  5007,  5009,  5011,  5013,  5017,
    5022,  5023,  5027,  5031,  5033,  5036,  5039,  5040,  5044,  5045,
    5051,  5055,  5057,  5061,  5063,  5067,  5069,  5071,  5072,  5074,
    5075,  5080,  5081,  5083,  5087,  5089,  5091,  5093,  5094,  5095,
    5102,  5103,  5104,  5116,  5120,  5122,  5126,  5130,  5132,  5136,
    5137,  5139,  5140,  5145,  5146,  5153,  5154,  5160,  5161,  5168,
    5170,  5174,  5177,  5182,  5183,  5186,  5187,  5190,  5192,  5194,
    5196,  5197,  5202,  5203,  5205,  5206,  5208,  5210,  5214,  5216,
    5218,  5221,  5224,  5227,  5229,  5231,  5233,  5235,  5236,  5240,
    5241,  5245,  5248,  5253,  5258,  5262,  5267,  5272,  5274,  5278,
    5282,  5289,  5292,  5295,  5296,  5303,  5304,  5311,  5317,  5320,
    5322,  5324,  5326,  5332,  5338,  5341,  5344,  5346,  5351,  5355,
    5358,  5362,  5365,  5368,  5370,  5374,  5379,  5383,  5387,  5390,
    5393,  5395,  5397,  5399,  5401,  5405,  5409,  5413,  5417,  5421,
    5425,  5429,  5433,  5435,  5437,  5439,  5441,  5443,  5444,  5446,
    5447,  5450,  5451,  5453,  5455,  5457,  5458,  5461,  5462,  5465,
    5466,  5469,  5472,  5473,  5478,  5479,  5484,  5486,  5488,  5489,
    5491,  5493,  5494,  5496,  5498,  5499,  5504,  5505,  5506,  5512,
    5514,  5515,  5520,  5524,  5526,  5529,  5532,  5535,  5538,  5541,
    5544,  5547,  5549,  5551,  5553,  5555,  5557,  5559,  5561,  5563,
    5565,  5567,  5569,  5571,  5572,  5574,  5575,  5579,  5580,  5584,
    5588,  5590,  5591,  5595,  5597,  5600,  5601,  5603,  5604,  5608,
    5612,  5615,  5618,  5619,  5625,  5626,  5628,  5630,  5631,  5633,
    5635,  5637,  5640,  5643,  5644,  5645,  5646,  5647,  5669,  5671,
    5673,  5674,  5676,  5677,  5679,  5681,  5682,  5684,  5686,  5687,
    5690,  5693,  5695,  5699,  5704,  5708,  5712,  5713,  5716,  5719,
    5721,  5725,  5729,  5730,  5735,  5736,  5740,  5742,  5744,  5745,
    5749,  5752,  5756,  5758,  5760,  5763,  5764,  5767,  5771,  5773,
    5779,  5781,  5783,  5786,  5789,  5791,  5793,  5795,  5797,  5799,
    5802,  5805,  5807,  5809,  5811,  5813,  5815,  5817,  5819,  5822,
    5825,  5828,  5831,  5834,  5836,  5838,  5840,  5842,  5844,  5846,
    5848,  5852,  5858,  5860,  5862,  5864,  5866,  5868,  5872,  5877,
    5883,  5885,  5891,  5895,  5898,  5900,  5904,  5907,  5910,  5915,
    5917,  5919,  5921,  5923,  5925,  5927,  5929,  5931,  5933,  5935,
    5937,  5939,  5941,  5943,  5947,  5950,  5952,  5954,  5956,  5958,
    5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,  5978,
    5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,  5998,
    6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,  6018,
    6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,  6038,
    6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,  6058,
    6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,  6078,
    6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,  6098,
    6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,  6118,
    6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,  6136,  6138,
    6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,  6156,  6158,
    6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,  6176,  6178,
    6180,  6182,  6184,  6186,  6188,  6190,  6192,  6194,  6196,  6198,
    6200,  6202,  6204,  6206,  6208,  6210,  6212,  6214,  6216,  6218,
    6220,  6222,  6224,  6226,  6228,  6230,  6232,  6234,  6236,  6238,
    6240,  6242,  6244,  6246,  6248,  6250,  6252,  6254,  6256,  6258,
    6260,  6262,  6264,  6266,  6268,  6270,  6272,  6274,  6276,  6278,
    6280,  6282,  6284,  6286,  6288,  6290,  6292,  6294,  6296,  6298,
    6300,  6302,  6304,  6306,  6308,  6310,  6312,  6314,  6316,  6318,
    6320,  6322,  6324,  6326,  6328,  6330,  6332,  6334,  6336,  6338,
    6340,  6342,  6344,  6346,  6348,  6350,  6352,  6354,  6356,  6358,
    6360,  6362,  6364,  6366,  6368,  6370,  6372,  6374,  6376,  6378,
    6380,  6382,  6384,  6386,  6388,  6390,  6392,  6394,  6396,  6398,
    6400,  6402,  6404,  6406,  6408,  6410,  6412,  6414,  6416,  6418,
    6420,  6422,  6424,  6426,  6428,  6430,  6432,  6434,  6436,  6438,
    6440,  6442,  6444,  6446,  6448,  6450,  6452,  6454,  6456,  6458,
    6460,  6462,  6464,  6466,  6468,  6470,  6472,  6474,  6476,  6478,
    6480,  6482,  6484,  6486,  6488,  6490,  6492,  6494,  6496,  6498,
    6500,  6502,  6504,  6506,  6508,  6510,  6512,  6514,  6516,  6518,
    6520,  6522,  6524,  6526,  6528,  6530,  6532,  6534,  6536,  6538,
    6540,  6542,  6544,  6546,  6548,  6550,  6552,  6554,  6556,  6558,
    6560,  6562,  6564,  6566,  6568,  6570,  6572,  6574,  6576,  6578,
    6580,  6582,  6584,  6586,  6588,  6590,  6592,  6594,  6596,  6598,
    6600,  6602,  6604,  6606,  6608,  6610,  6612,  6614,  6616,  6618,
    6620,  6622,  6624,  6626,  6628,  6630,  6632,  6634,  6636,  6638,
    6640,  6642,  6644,  6646,  6648,  6650,  6651,  6656,  6657,  6659,
    6661,  6665,  6666,  6669,  6671,  6673,  6675,  6677,  6678,  6680,
    6681,  6683,  6685,  6687,  6688,  6691,  6694,  6697,  6699,  6702,
    6707,  6713,  6718,  6725,  6728,  6732,  6736,  6740,  6746,  6748,
    6752,  6756,  6759,  6762,  6765,  6767,  6769,  6774,  6779,  6781,
    6783,  6785,  6787,  6789,  6790,  6795,  6797,  6799,  6801,  6805,
    6809,  6811,  6813,  6816,  6819,  6822,  6823,  6827,  6832,  6836,
    6837,  6845,  6847,  6850,  6852,  6854,  6856,  6858,  6860,  6862,
    6863,  6869,  6871,  6873,  6875,  6877,  6879,  6883,  6890,  6897,
    6904,  6912,  6918,  6922,  6931,  6940,  6949,  6956,  6957,  6959,
    6961,  6964,  6965,  6967,  6969,  6973,  6974,  6978,  6979,  6983,
    6984,  6988,  6989,  6993,  6995,  6997,  6999,  7001,  7003,  7005,
    7007,  7009,  7011,  7013,  7015,  7018,  7021,  7023,  7027,  7030,
    7033,  7036,  7039,  7042,  7045,  7048,  7051,  7053,  7055,  7058,
    7059,  7061,  7065,  7067,  7070,  7073,  7076,  7078,  7082,  7086,
    7088,  7090,  7094,  7096,  7100,  7102,  7104,  7106,  7108,  7113,
    7119,  7124,  7131,  7133,  7134,  7138,  7142,  7144,  7146,  7147,
    7150,  7153,  7156,  7159,  7160,  7163,  7164,  7168,  7171,  7173,
    7176,  7179,  7182,  7185,  7188,  7189,  7193,  7194,  7196,  7197,
    7201,  7204,  7205,  7207,  7210,  7211,  7213,  7218,  7223,  7229,
    7232,  7236,  7237,  7239,  7240,  7245,  7246,  7248,  7250,  7251,
    7253,  7254,  7257,  7260,  7262,  7263,  7265,  7267,  7270,  7274,
    7277,  7278,  7285,  7289,  7290,  7291,  7292,  7294,  7297,  7299,
    7301,  7303,  7305,  7307,  7309,  7311,  7313,  7315,  7318,  7321,
    7325,  7327,  7329,  7331,  7333,  7335,  7337,  7339,  7341,  7343,
    7345,  7347,  7349,  7351,  7352,  7356,  7358,  7361,  7363,  7366,
    7370,  7374,  7378,  7379,  7383,  7387,  7388,  7396,  7397,  7401,
    7403,  7407,  7408,  7412,  7415,  7420,  7421,  7425,  7430,  7435,
    7436,  7437,  7438,  7455,  7464,  7472,  7473,  7474,  7475,  7476,
    7477,  7493,  7494,  7495,  7496,  7497,  7510,  7515,  7520,  7524,
    7529,  7533,  7536,  7538,  7542,  7548,  7550,  7552,  7553,  7555,
    7557,  7558,  7561,  7562,  7563,  7567,  7568,  7571,  7577,  7581,
    7585,  7589
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     638,     0,    -1,   157,    -1,    -1,   641,   639,   633,   640,
      -1,   641,   157,    -1,    -1,   157,    -1,   642,    -1,  1483,
      -1,   997,    -1,  1059,    -1,  1061,    -1,   691,    -1,   654,
      -1,  1062,    -1,  1051,    -1,  1489,    -1,   661,    -1,   643,
      -1,  1307,    -1,  1339,    -1,  1259,    -1,  1261,    -1,   647,
      -1,  1345,    -1,  1455,    -1,  1446,    -1,   652,    -1,  1271,
      -1,  1553,    -1,  1555,    -1,  1075,    -1,  1365,    -1,  1371,
      -1,  1438,    -1,  1067,    -1,   924,    -1,   835,    -1,  1082,
      -1,   645,    -1,  1361,    -1,  1492,    -1,  1070,    -1,  1054,
      -1,  1274,    -1,  1355,    -1,   726,    -1,  1453,    -1,  1490,
      -1,  1491,    -1,  1094,    -1,  1421,    -1,   719,    -1,  1325,
      -1,  1040,    -1,  1043,    -1,  1318,    -1,  1554,    -1,  1444,
      -1,  1299,    -1,  1370,    -1,  1545,    -1,   644,   398,  1415,
      -1,   124,    -1,   145,    -1,   398,  1415,   192,   646,    -1,
    1412,    -1,   634,  1417,    -1,    -1,   171,  1415,   648,   649,
      -1,    -1,   583,   650,    -1,   650,   629,   651,    -1,   651,
      -1,   634,  1417,    -1,    -1,   212,   653,  1417,    -1,    -1,
      57,   300,   549,   655,   656,    -1,   657,    -1,   656,   629,
     657,    -1,   287,   161,  1412,    -1,   301,   161,  1412,    -1,
     290,   161,  1412,    -1,   291,   161,  1238,    -1,   286,   161,
    1238,    -1,   298,   161,  1238,    -1,   294,   161,  1412,    -1,
     293,   161,  1412,    -1,   295,   161,  1412,    -1,   296,   161,
    1412,    -1,   297,   161,  1412,    -1,   299,   161,  1238,    -1,
     302,   161,  1400,    -1,   226,   161,   627,   658,   628,    -1,
     660,    -1,    -1,   659,    -1,   658,   629,   659,    -1,  1238,
      -1,   288,   161,  1412,    -1,   289,   161,  1240,    -1,   428,
     161,  1412,    -1,   429,   161,  1238,    -1,    -1,   103,   886,
     532,   889,  1408,   662,   823,    -1,    -1,   103,   975,   229,
    1415,   979,   361,  1408,   663,   627,   992,   628,   980,    -1,
      -1,   103,   976,   229,  1415,   978,   361,  1408,   664,   627,
     992,   628,   981,    -1,    -1,   103,   977,   229,  1415,   978,
     361,  1408,   665,   627,   992,   628,   982,    -1,    -1,   103,
     111,   889,  1415,   666,   883,    -1,    -1,   103,   667,  1511,
      -1,   103,   579,   684,  1471,    -1,   103,   277,   205,   786,
      -1,   103,   529,   783,    -1,   103,   668,    -1,   471,  1417,
     189,   114,   608,  1417,   367,   627,   669,   628,    -1,   670,
      -1,   669,   629,   670,    -1,   579,  1412,    -1,   215,  1412,
      -1,   111,  1412,    -1,   377,  1412,    -1,   388,  1412,    -1,
     487,  1412,    -1,   395,  1238,    -1,    -1,  1111,   168,   889,
     685,   672,   361,   460,   673,   678,   675,   680,   144,   681,
      -1,    -1,   169,  1116,  1208,   674,   676,   677,    -1,    23,
    1116,    -1,    -1,   153,    -1,   138,   361,   483,    -1,   138,
      -1,    -1,   507,  1116,    -1,    -1,   156,  1116,    -1,    -1,
     679,    -1,   361,    86,   399,    -1,   361,    86,   350,   399,
      -1,    -1,    82,  1412,    -1,    -1,   682,   683,    -1,   732,
      -1,   734,    -1,   730,    -1,   751,    -1,   769,    -1,   771,
      -1,   766,    -1,   736,    -1,   738,    -1,   739,    -1,   740,
      -1,   741,    -1,   743,    -1,    -1,  1415,   635,  1415,    -1,
    1415,    -1,    -1,   686,   688,    -1,    -1,   687,   689,    -1,
      82,  1412,    -1,   255,   503,    -1,   352,   503,    -1,    96,
     503,    -1,   414,   503,   114,    -1,   327,   503,   114,    -1,
     690,    -1,   688,    -1,   136,    -1,  1122,   136,    -1,   503,
     464,   129,    -1,   503,   464,   242,    -1,    -1,    50,   685,
     692,   693,    -1,    -1,   627,   694,   628,    -1,    -1,   695,
      -1,   695,   629,  1116,    -1,  1116,    -1,    -1,   697,    -1,
     697,   629,   699,    -1,   699,    -1,    -1,  1415,   698,   947,
      -1,    -1,   701,    -1,   701,   629,   702,    -1,   702,    -1,
     703,   698,  1415,   947,    -1,    -1,   243,    -1,   376,    -1,
     234,    -1,    -1,   704,   729,   633,    -1,   729,   633,    -1,
     705,   729,   633,    -1,    -1,   706,   707,   633,    -1,    -1,
     127,   727,   708,   947,   728,    -1,   127,  1415,    89,   190,
     715,    -1,    -1,   127,   712,   208,   190,   709,   713,   729,
      -1,   127,  1415,   108,   190,   710,    -1,    -1,   711,  1094,
      -1,   173,    -1,    98,    -1,   714,    -1,   713,   629,   714,
      -1,   718,    -1,  1238,    -1,   716,    -1,   495,   717,  1413,
      -1,    -1,   588,    -1,   715,    -1,  1415,    -1,   496,    -1,
    1122,   191,    -1,   494,    -1,   480,   720,   722,    -1,  1415,
      -1,   716,    -1,    -1,   720,    -1,    -1,   473,   723,    -1,
     725,   161,   724,    -1,   723,   629,   725,   161,   724,    -1,
    1399,    -1,  1147,    -1,  1404,    -1,    65,    -1,   516,    -1,
      93,    -1,    95,    -1,    94,    -1,    55,    -1,   461,    -1,
     534,    -1,    81,    -1,   109,    -1,   318,    -1,   335,    -1,
     443,   721,   722,    -1,  1415,    -1,   727,   629,  1415,    -1,
      -1,   128,  1116,    -1,   732,    -1,   734,    -1,   730,    -1,
     751,    -1,   769,    -1,   771,    -1,   766,    -1,   736,    -1,
     738,    -1,   739,    -1,   740,    -1,   741,    -1,   743,    -1,
      -1,   224,   731,   746,   155,   224,    -1,    -1,   733,   642,
      -1,    -1,   449,   735,  1116,    -1,    -1,   737,   775,    -1,
     261,  1416,    -1,   249,  1416,    -1,   365,  1415,    -1,    -1,
     181,   744,  1415,   240,   742,   745,    -1,    68,  1415,    -1,
      -1,   346,   192,    -1,   192,    -1,  1415,    -1,   745,   629,
    1415,    -1,    -1,    -1,    -1,   747,  1116,   541,   748,   705,
     749,   750,    -1,    -1,   152,   746,    -1,   151,   705,    -1,
     752,    -1,   755,    -1,    -1,    -1,    53,   753,  1116,   754,
     757,   765,   155,    53,    -1,    -1,    53,   756,   758,   765,
     155,    53,    -1,   759,    -1,   757,   759,    -1,   762,    -1,
     758,   762,    -1,    -1,    -1,   601,   760,  1116,   761,   541,
     705,    -1,    -1,    -1,   601,   763,  1116,   764,   541,   705,
      -1,    -1,   151,   705,    -1,    -1,  1416,   636,   767,   775,
     768,    -1,    -1,  1416,    -1,    -1,  1416,   636,   770,   773,
     768,    -1,    -1,   772,   773,    -1,    -1,    31,   774,   706,
     704,   155,    -1,   283,   705,   155,   283,    -1,    -1,    -1,
     603,   776,  1116,   144,   777,   705,   155,   603,    -1,    -1,
     438,   705,   575,   778,  1116,   155,   438,    -1,    30,    -1,
       8,    -1,   236,    -1,   576,    -1,   132,    -1,   808,   810,
      -1,   808,    57,   805,   789,    -1,   808,     6,   805,   784,
     793,    -1,    -1,   582,   277,   205,  1415,    -1,   808,     6,
     805,   796,    -1,   808,   145,   805,   796,    -1,   809,   788,
     799,    -1,   809,   788,   802,    -1,     6,   806,    -1,     6,
     807,    -1,    -1,   790,   791,    -1,   792,    -1,   791,   792,
      -1,   791,   629,   792,    -1,   811,    -1,   812,    -1,   813,
      -1,   794,    -1,   795,    -1,   794,   795,    -1,   794,   629,
     795,    -1,   811,    -1,   812,    -1,   813,    -1,   814,    -1,
     817,    -1,   819,    -1,   821,    -1,   818,    -1,   797,    -1,
     798,    -1,   797,   798,    -1,   797,   629,   798,    -1,   811,
      -1,   812,    -1,   813,    -1,   819,    -1,   821,    -1,   800,
      -1,   801,    -1,   800,   801,    -1,   800,   629,   801,    -1,
     811,    -1,   815,    -1,   816,    -1,   817,    -1,   819,    -1,
     821,    -1,   818,    -1,   803,    -1,   804,    -1,   803,   804,
      -1,   803,   629,   804,    -1,   811,    -1,   819,    -1,   821,
      -1,   113,  1412,    -1,   565,  1412,    -1,   421,  1412,    -1,
    1415,    -1,  1415,    -1,   415,    -1,   417,    -1,   350,     4,
      -1,   232,  1291,   822,    -1,    25,  1291,   822,    -1,   307,
    1291,   822,    -1,   176,  1291,   822,    -1,   566,  1291,   822,
      -1,   422,  1291,   822,    -1,   347,  1291,  1239,    -1,    82,
    1291,  1412,    -1,  1332,   159,  1291,   897,    -1,    -1,   821,
      -1,   598,    -1,   353,    -1,  1239,    -1,   221,    -1,   627,
     824,    -1,   890,   830,   827,    -1,   266,  1408,    -1,   627,
     266,  1408,   628,    -1,    -1,   903,   628,   825,   890,   830,
     827,    -1,    -1,   830,   879,   628,   826,  1496,    -1,    -1,
      -1,  1379,   882,   879,   828,  1493,    -1,    -1,  1379,   882,
     627,   879,   628,   829,  1496,    -1,   831,    -1,    -1,   832,
      -1,    -1,   387,   834,   833,   837,    -1,    -1,    -1,   387,
     836,   837,    -1,    47,   838,   847,   848,   855,    -1,   840,
     253,   627,   841,   628,    -1,    -1,   840,   210,   839,   845,
      -1,   413,   845,    -1,   413,   844,    -1,   271,   845,    -1,
     271,   844,    -1,    -1,   268,    -1,    -1,   842,    -1,   843,
      -1,   842,   629,   843,    -1,  1415,    -1,    73,   627,   841,
     628,    -1,   627,  1111,   853,  1112,   628,    -1,   627,  1111,
     853,  1112,   628,    -1,    -1,   386,  1239,    -1,    -1,    -1,
     520,    47,   840,   210,   846,   849,   854,    -1,    -1,   520,
      47,   840,   253,   627,   851,   628,   850,   854,    -1,   852,
      -1,   851,   629,   852,    -1,  1415,    -1,  1119,    -1,    -1,
     519,  1239,    -1,    -1,   627,   856,   628,    -1,   857,    -1,
     856,   629,   857,    -1,    -1,   387,   858,   859,   860,   876,
     871,    -1,  1415,    -1,    -1,    -1,   587,   263,   540,   861,
     863,    -1,    -1,   587,   243,   862,   864,    -1,   311,    -1,
     866,    -1,   866,    -1,   627,   865,   628,    -1,   866,    -1,
     865,   629,   866,    -1,    -1,    -1,   627,   867,   869,   868,
     628,    -1,   870,    -1,   869,   629,   870,    -1,   311,    -1,
    1119,    -1,    -1,   627,   872,   628,    -1,   873,    -1,   872,
     629,   873,    -1,    -1,   520,   874,   875,   876,    -1,  1417,
      -1,    -1,   877,    -1,   877,   878,    -1,   878,    -1,   529,
    1291,  1417,    -1,  1332,   159,  1291,   897,    -1,    90,  1291,
    1412,    -1,   347,  1291,  1239,    -1,   306,  1291,  1241,    -1,
     324,  1291,  1241,    -1,   114,   137,  1291,  1412,    -1,   229,
     137,  1291,  1412,    -1,    82,  1291,  1412,    -1,    -1,    -1,
     465,   880,  1105,  1109,   881,   901,    -1,    -1,    19,    -1,
      -1,   884,    -1,   885,    -1,   884,   885,    -1,   896,    -1,
     895,    -1,    -1,   887,    -1,   888,    -1,   888,   887,    -1,
     535,    -1,    -1,   224,  1122,   172,    -1,    -1,   892,    -1,
     893,    -1,   893,   891,    -1,   893,    -1,   893,   892,    -1,
     893,   629,   892,    -1,   159,  1291,   897,    -1,   306,  1291,
    1240,    -1,   324,  1291,  1240,    -1,    27,  1291,  1238,    -1,
     388,  1291,  1412,    -1,    82,  1291,  1412,    -1,    26,  1291,
    1240,    -1,   378,  1291,  1238,    -1,   378,  1291,   128,    -1,
      62,  1291,  1238,    -1,   533,  1291,  1238,    -1,   380,  1291,
    1244,    -1,   131,  1291,  1238,    -1,   456,  1291,   899,    -1,
      -1,   570,  1291,   894,   627,  1353,   628,    -1,   895,    -1,
     896,    -1,   237,  1291,   900,    -1,   114,   137,  1291,  1412,
      -1,   229,   137,  1291,  1412,    -1,   529,  1415,    -1,   513,
     140,    -1,   513,   316,    -1,    90,  1291,  1412,    -1,   252,
    1291,  1238,    -1,   552,  1291,  1244,    -1,  1411,  1290,  1412,
      -1,  1411,  1290,  1415,    -1,  1411,  1290,  1241,    -1,  1411,
    1290,   128,    -1,   958,   949,  1291,   951,    -1,   958,    71,
    1291,   957,    -1,  1417,    -1,  1417,    -1,   128,    -1,   184,
      -1,   149,    -1,    87,    -1,   423,    -1,    85,    -1,   379,
      -1,   352,    -1,   183,    -1,   256,    -1,  1231,    -1,  1104,
    1108,    -1,   515,    -1,   418,    -1,   126,    -1,   241,    -1,
     904,    -1,   905,    -1,   904,   629,   905,    -1,   906,    -1,
     907,    -1,   916,   912,    -1,   916,   964,    -1,    -1,   970,
     994,   979,   627,   992,   628,   908,   980,    -1,    -1,   976,
     973,   994,   978,   627,   992,   628,   909,   981,    -1,    -1,
     977,   973,   994,   978,   627,   992,   628,   910,   982,    -1,
      -1,   914,   971,   994,   979,   627,   992,   628,   911,   980,
      -1,   914,   189,   253,   994,   627,   992,   628,   964,    -1,
     914,   913,    -1,    -1,   913,    -1,    63,   627,  1116,   628,
      -1,    -1,   915,    -1,    92,   994,    -1,    -1,  1407,   917,
     918,    -1,   926,   944,    -1,   926,   919,    19,   627,   925,
     628,   920,   921,    -1,    -1,   198,    14,    -1,    -1,   597,
      -1,   389,    -1,    -1,   922,    -1,   922,   923,    -1,   923,
      -1,   571,    -1,   571,   253,    -1,    82,  1412,    -1,   383,
     627,   925,   628,    -1,  1111,  1116,  1112,    -1,   934,   942,
     938,    -1,   935,   943,   938,    -1,   186,   936,   938,    -1,
      39,    -1,    39,   941,    -1,    44,    -1,    43,    -1,   930,
     941,   961,    -1,   930,   961,    -1,   931,   941,   962,    -1,
     931,   962,    -1,    34,   941,    -1,    34,    -1,   932,   941,
     961,    -1,   933,   941,   962,    -1,   589,   941,    -1,   615,
     942,   938,    -1,   118,    -1,   545,   942,    -1,   542,   942,
      -1,   115,   942,    -1,   546,    -1,    41,   942,    -1,   929,
      -1,   312,    -1,   279,    -1,   282,   589,    -1,   282,   932,
     961,    -1,   548,   961,    -1,   539,   942,   961,    -1,   314,
     961,    -1,   280,   961,    -1,   126,   936,   938,    -1,   357,
     936,   938,    -1,   184,   936,   938,    -1,    -1,   160,   927,
     627,   996,   628,   961,    -1,    -1,   473,   928,   627,   996,
     628,   961,    -1,   282,   961,    -1,   469,    -1,   200,    -1,
     199,    -1,   393,    -1,   332,    -1,   270,    -1,   331,    -1,
     394,    -1,   333,    -1,    60,    -1,   341,    -1,   338,    60,
      -1,   930,   593,    -1,   590,    -1,   338,   590,    -1,   358,
      -1,   341,   590,    -1,   338,    60,   593,    -1,   341,   593,
      -1,   241,    -1,   547,    -1,   485,    -1,   313,    -1,    33,
      -1,   418,    -1,   143,    -1,   143,   397,    -1,    -1,   941,
      -1,   937,    -1,   627,   356,   629,   356,   628,    -1,    -1,
     939,    -1,   939,   940,    -1,   940,    -1,   481,    -1,   574,
      -1,   616,    -1,   627,   281,   628,    -1,   627,   561,   628,
      -1,   627,   125,   628,    -1,   627,   356,   628,    -1,    -1,
     941,    -1,    -1,   937,    -1,    -1,   945,    -1,   945,   946,
      -1,   946,    -1,   355,    -1,  1122,   355,    -1,   128,   948,
      -1,   361,   576,   351,  1115,    -1,    26,    -1,   469,   128,
     588,    -1,   963,   253,    -1,   571,    -1,   571,   253,    -1,
      82,  1412,    -1,    71,   955,    -1,  1411,  1290,  1412,    -1,
    1411,  1290,  1415,    -1,  1411,  1290,  1241,    -1,  1411,  1290,
     128,    -1,   926,   956,    -1,   351,  1115,    -1,  1398,    -1,
      60,   473,    -1,    59,    -1,  1417,    -1,    34,    -1,   950,
      -1,   128,    -1,    -1,   949,   951,    -1,  1417,    -1,    34,
      -1,   953,    -1,   128,    -1,  1417,    -1,    -1,    71,   957,
      -1,   955,    -1,   128,    -1,    -1,   128,    -1,    21,    -1,
      34,    21,    -1,    21,    34,    -1,   568,    -1,   568,    34,
      -1,    34,   568,    -1,    -1,   959,    -1,   960,    -1,    48,
      -1,   949,   950,   962,    -1,    34,    -1,    34,   949,   950,
      -1,    -1,    34,    -1,    -1,   401,    -1,   424,  1408,   965,
     967,   968,    -1,    -1,   627,   966,   628,    -1,   966,   629,
    1415,    -1,  1415,    -1,    -1,   303,   193,    -1,   303,   384,
      -1,   303,   482,    -1,    -1,   361,   576,   969,    -1,   361,
     132,   969,    -1,   361,   576,   969,   361,   132,   969,    -1,
     361,   132,   969,   361,   576,   969,    -1,   446,    -1,    51,
      -1,   473,   355,    -1,   352,     5,    -1,   473,   128,    -1,
     972,    -1,   401,   253,    -1,   571,   973,    -1,   253,    -1,
     229,    -1,    -1,   972,    -1,   251,    -1,   229,    -1,   228,
      -1,    -1,   571,    -1,   194,    -1,   492,    -1,    -1,   978,
      -1,   978,   986,    -1,    -1,   983,    -1,    -1,   985,    -1,
      -1,   984,    -1,   988,    -1,   983,   988,    -1,   989,    -1,
     984,   989,    -1,   990,    -1,   985,   990,    -1,   583,   991,
      -1,   559,   991,    -1,   252,  1291,  1238,    -1,    82,  1412,
      -1,  1411,  1290,  1412,    -1,  1411,  1290,  1415,    -1,  1411,
    1290,  1241,    -1,  1411,  1290,   128,    -1,   987,    -1,   986,
      -1,   987,    -1,   987,    -1,   604,   382,  1411,    -1,    46,
      -1,   458,    -1,   210,    -1,   992,   629,   993,  1229,    -1,
     993,  1229,    -1,  1415,    -1,  1415,   627,   356,   628,    -1,
      -1,  1407,    -1,    -1,   635,  1415,    -1,  1396,    -1,   996,
     629,  1396,    -1,    -1,    13,  1032,   532,  1408,   998,  1009,
      -1,    -1,    13,   111,  1008,   999,   884,    -1,    13,   111,
    1415,   577,   114,   137,   337,    -1,    -1,    13,   403,   685,
    1000,   686,    -1,    -1,    13,   195,   685,  1001,   686,    -1,
      -1,    13,  1519,  1514,  1002,  1521,    -1,    -1,    13,  1514,
    1003,  1521,    -1,    -1,    13,  1514,   168,   685,  1004,  1005,
    1006,   675,   680,  1007,    -1,    13,   529,   785,    -1,    13,
     277,   205,   787,    -1,    13,   529,   782,    -1,    13,   529,
     781,    -1,    13,   471,  1417,   367,   627,   669,   628,    -1,
      -1,   361,   460,   673,    -1,   679,    -1,   361,   460,   673,
     679,    -1,    -1,   434,   549,   685,    -1,    -1,   144,   681,
      -1,    -1,  1415,    -1,    -1,   139,   529,    -1,   227,   529,
      -1,  1024,   831,    -1,  1024,  1013,    -1,  1013,    -1,   832,
      -1,  1015,    -1,   145,   387,  1022,    -1,   419,   387,  1069,
    1014,    -1,    -1,   366,   387,  1069,  1014,  1010,  1069,    -1,
      15,   387,  1069,  1014,    -1,    -1,    63,   387,  1014,  1011,
    1064,    -1,    -1,   436,   387,  1069,  1014,  1012,  1056,    -1,
      69,   387,  1069,  1239,    -1,   557,   387,  1014,    -1,  1018,
      -1,   433,   385,    -1,    12,    -1,  1022,    -1,    -1,     6,
     387,  1069,  1016,  1017,    -1,    -1,   627,   856,   628,    -1,
     386,  1239,    -1,    -1,   435,   387,  1069,  1019,  1020,    -1,
      -1,    -1,  1022,  1021,   240,   627,   856,   628,    -1,  1023,
      -1,  1022,   629,  1023,    -1,  1415,    -1,  1026,    -1,  1024,
     629,  1026,    -1,     6,  1030,    -1,  1025,   906,  1038,    -1,
       6,   907,    -1,  1025,   627,   903,   628,    -1,    -1,    57,
    1030,  1407,  1027,   916,  1038,    -1,    -1,    -1,   328,  1030,
    1407,  1028,   918,  1029,  1038,    -1,   145,  1030,  1407,  1037,
      -1,   145,   189,   253,   994,    -1,   145,   401,   253,    -1,
     145,   972,  1407,    -1,   138,   251,    -1,   153,   251,    -1,
      13,  1030,  1407,   473,   128,  1398,    -1,    13,  1030,  1407,
     145,   128,    -1,   434,  1039,  1408,    -1,   100,   549,   949,
     951,   956,    -1,   891,    -1,   188,    -1,  1222,    -1,    -1,
      80,    -1,    -1,   225,    -1,    -1,  1033,  1034,    -1,    -1,
    1035,    -1,  1035,  1036,    -1,  1036,    -1,   225,    -1,   364,
      -1,    -1,   446,    -1,    51,    -1,    -1,     8,  1415,    -1,
     183,    -1,    -1,   549,    -1,   161,    -1,    19,    -1,    -1,
     508,   483,  1045,  1041,  1049,    -1,   512,   483,  1045,    -1,
      -1,   483,   508,  1045,  1042,  1049,    -1,   483,   512,  1045,
      -1,   508,   551,  1044,    -1,    -1,   604,    91,   486,    -1,
      -1,  1046,  1047,    -1,  1048,    -1,  1047,   629,  1048,    -1,
      -1,   504,    -1,   430,    -1,    -1,   575,  1050,    -1,   660,
      -1,  1050,   629,   660,    -1,    -1,    62,  1440,  1052,  1265,
    1053,    -1,    -1,   412,    -1,   175,    -1,    -1,   436,  1069,
    1440,  1055,  1265,  1056,    -1,    -1,  1057,    -1,  1058,    -1,
    1058,  1057,    -1,   412,    -1,   175,    -1,   581,    -1,    -1,
      15,  1069,  1440,  1060,  1265,    -1,    35,  1412,    -1,    -1,
      63,  1440,  1063,  1265,  1064,    -1,    -1,  1065,    -1,  1066,
      -1,  1066,  1065,    -1,   412,    -1,   179,    -1,   315,    -1,
     175,    -1,    58,    -1,   190,   577,    -1,    -1,   366,  1069,
    1440,  1068,  1265,    -1,    -1,   354,    -1,   273,    -1,    -1,
     434,  1440,  1071,  1073,    -1,   434,   579,   684,  1072,    -1,
    1418,   549,  1418,    -1,  1072,   629,  1418,   549,  1418,    -1,
    1074,    -1,  1073,   629,  1074,    -1,  1408,   549,  1408,    -1,
      -1,    49,   229,  1076,  1077,   243,  1081,    -1,  1078,    -1,
    1080,    -1,  1079,    -1,  1078,   629,  1079,    -1,  1408,  1090,
      -1,  1408,  1088,  1090,    -1,  1415,    -1,   128,    -1,    -1,
     272,   229,   240,    49,  1083,  1084,    -1,  1087,    -1,  1085,
      -1,  1086,    -1,  1085,   629,  1086,    -1,  1408,  1090,  1093,
      -1,  1408,  1088,  1090,  1093,    -1,    -1,   387,   834,  1089,
     627,  1014,   628,    -1,    -1,  1091,  1092,    -1,    -1,   972,
     627,  1204,   628,    -1,    -1,   225,   260,    -1,  1095,    -1,
     465,  1098,    -1,   627,  1096,   628,  1496,    -1,   465,  1100,
      -1,   627,  1096,   628,    -1,   465,  1183,    -1,   627,  1097,
     628,    -1,    -1,  1100,  1099,  1493,    -1,    -1,    -1,  1101,
    1105,  1109,  1102,  1103,  1108,    -1,  1225,  1231,    -1,  1254,
      -1,  1104,    -1,  1254,  1104,    -1,  1104,  1254,    -1,   192,
    1165,  1214,  1219,  1216,  1225,  1231,  1245,    -1,   192,   146,
    1214,  1231,    -1,    -1,  1106,    -1,  1106,  1107,    -1,  1107,
      -1,  1510,    -1,   501,    -1,   499,    -1,    -1,   190,   576,
      -1,   276,   243,   475,   326,    -1,  1109,   629,  1110,    -1,
    1110,    -1,   622,    -1,  1111,  1402,  1112,    -1,  1111,  1116,
    1112,  1113,    -1,    -1,    -1,    -1,    19,  1415,    -1,    19,
    1412,    -1,  1415,    -1,  1412,    -1,    -1,   627,   628,    -1,
     627,  1239,   628,    -1,    -1,   627,   628,    -1,  1116,  1120,
    1116,    -1,  1116,   613,  1116,    -1,  1116,  1121,  1116,    -1,
     350,  1116,    -1,  1117,   246,   556,    -1,  1117,   246,  1122,
     556,    -1,  1117,   246,   178,    -1,  1117,   246,  1122,   178,
      -1,  1117,   246,   572,    -1,  1117,   246,  1122,   572,    -1,
    1117,    -1,  1117,   246,   355,    -1,  1117,   246,  1122,   355,
      -1,  1117,   162,  1118,    -1,  1117,  1124,  1118,    -1,  1117,
    1124,  1125,   627,  1505,   628,    -1,  1118,    -1,  1119,   243,
     627,  1505,   628,    -1,  1119,  1122,   243,   627,  1505,   628,
      -1,  1119,   243,   627,  1116,   628,    -1,  1119,   243,   627,
    1116,   629,  1158,   628,    -1,  1119,  1122,   243,   627,  1116,
     628,    -1,  1119,  1122,   243,   627,  1116,   629,  1158,   628,
      -1,  1119,    32,  1119,    17,  1118,    -1,  1119,  1122,    32,
    1119,    17,  1118,    -1,  1119,   490,   266,  1119,    -1,  1119,
     266,  1130,  1218,    -1,  1119,  1122,   266,  1130,  1218,    -1,
    1119,   425,  1119,    -1,  1119,  1122,   425,  1119,    -1,  1119,
      -1,  1119,   618,  1119,    -1,  1119,   619,  1119,    -1,  1119,
     476,  1119,    -1,  1119,   477,  1119,    -1,  1119,   621,  1119,
      -1,  1119,   620,  1119,    -1,  1119,   621,   239,  1116,  1208,
      -1,  1119,   620,   239,  1116,  1208,    -1,  1119,   622,  1119,
      -1,  1119,   623,  1119,    -1,  1119,   624,  1119,    -1,  1119,
     142,  1119,    -1,  1119,   329,  1119,    -1,  1119,   625,  1119,
      -1,  1130,    -1,   373,    -1,   370,    -1,    17,    -1,    16,
      -1,   350,    -1,   349,    -1,   630,    -1,   349,    -1,   161,
      -1,   196,    -1,   207,    -1,   258,    -1,   285,    -1,   343,
      -1,    12,    -1,    18,    -1,    -1,    19,  1127,    -1,   241,
      -1,   574,   241,    -1,   143,    -1,   418,    -1,   186,    -1,
     126,   936,    -1,   930,   961,    -1,   931,    -1,   118,    -1,
     545,   942,    -1,   115,   942,    -1,  1116,   629,  1116,  1126,
      -1,  1128,    -1,  1129,   629,  1128,    -1,  1404,    -1,  1131,
      -1,  1132,    -1,  1135,    -1,  1133,    -1,  1130,    71,  1417,
      -1,  1399,    -1,  1397,    -1,  1147,    -1,  1143,    -1,  1130,
     372,  1130,    -1,   621,  1130,    -1,   620,  1130,    -1,   626,
    1130,    -1,  1123,  1130,    -1,   627,  1505,   628,    -1,   627,
    1116,   628,    -1,   627,  1116,   629,  1158,   628,    -1,   457,
     627,  1116,   629,  1158,   628,    -1,   172,   627,  1505,   628,
      -1,   631,  1415,  1116,   632,    -1,   303,  1159,     9,   627,
    1119,  1137,   628,    -1,    34,  1130,    -1,    54,   627,  1116,
      19,  1155,   628,    -1,    53,  1161,  1163,  1162,   155,    -1,
     100,   627,  1116,   629,  1155,   628,    -1,   100,   627,  1116,
     583,   950,   628,    -1,   128,   627,  1404,   628,    -1,   587,
     627,  1405,   628,    -1,   239,  1116,  1208,   621,  1116,    -1,
      60,   627,  1158,   628,    -1,    60,   627,  1158,   583,   950,
     628,    -1,   107,  1115,    -1,   118,   627,  1116,   628,    -1,
     123,   627,  1116,   628,    -1,   220,   627,  1116,   628,    -1,
     236,   627,  1116,   629,  1116,   629,  1116,   629,  1116,   628,
      -1,   239,   627,  1116,   629,  1116,   628,    -1,   239,   627,
    1116,   629,  1116,   629,  1158,   628,    -1,   262,   627,  1116,
     629,  1116,   628,    -1,   323,   627,  1116,   628,    -1,   330,
     627,  1116,   628,    -1,   451,   627,  1116,   629,  1116,   628,
      -1,   463,   627,  1116,   628,    -1,   545,   627,  1116,   628,
      -1,   542,   627,  1116,   628,    -1,   542,   627,  1116,   629,
    1116,   628,    -1,   555,   627,  1116,   628,    -1,   555,   627,
     259,  1116,   192,  1116,   628,    -1,   555,   627,   550,  1116,
     192,  1116,   628,    -1,   555,   627,    45,  1116,   192,  1116,
     628,    -1,   555,   627,   259,   192,  1116,   628,    -1,   555,
     627,   550,   192,  1116,   628,    -1,   555,   627,    45,   192,
    1116,   628,    -1,   555,   627,  1116,   192,  1116,   628,    -1,
     579,   627,   628,    -1,   615,   627,  1116,   628,    -1,     7,
     627,  1116,   629,  1116,   628,    -1,     7,   627,  1116,   629,
     239,  1116,  1208,   628,    -1,   106,  1115,    -1,   110,  1114,
      -1,   116,   627,  1116,   629,   239,  1116,  1208,   628,    -1,
     117,   627,  1116,   629,   239,  1116,  1208,   628,    -1,   177,
     627,  1208,   192,  1116,   628,    -1,   201,   627,  1210,   629,
    1116,   628,    -1,   351,  1114,    -1,   396,   627,  1119,   243,
    1116,   628,    -1,   517,   627,  1116,   629,  1116,   628,    -1,
     517,   627,  1116,   629,   239,  1116,  1208,   628,    -1,   521,
     627,  1116,   629,  1116,   629,  1116,   628,    -1,   521,   627,
    1116,   629,  1116,   628,    -1,   521,   627,  1116,   192,  1116,
     190,  1116,   628,    -1,   521,   627,  1116,   192,  1116,   628,
      -1,   527,  1114,    -1,   543,   627,  1209,   629,  1116,   629,
    1116,   628,    -1,   544,   627,  1209,   629,  1116,   629,  1116,
     628,    -1,   584,  1115,    -1,   586,  1114,    -1,   585,  1114,
      -1,    74,   627,  1116,   629,  1129,   628,    -1,    76,   627,
    1116,   629,  1158,   628,    -1,    77,   627,  1116,   629,  1116,
     628,    -1,    79,   627,  1116,   628,    -1,    75,   627,  1129,
     628,    -1,    78,   627,  1116,   629,  1116,    19,  1155,   628,
      -1,    21,   627,  1116,   628,    -1,    59,   627,  1116,   628,
      -1,    69,   627,  1158,   628,    -1,    72,   627,  1116,   628,
      -1,   111,   627,   628,    -1,   224,   627,  1116,   629,  1116,
     629,  1116,   628,    -1,   257,   627,  1158,   628,    -1,   319,
     627,  1116,   628,    -1,   329,   627,  1116,   629,  1116,   628,
      -1,   360,   627,  1116,   628,    -1,   388,   627,  1116,   628,
      -1,   410,   627,  1116,   628,    -1,   438,   627,  1116,   629,
    1116,   628,    -1,   439,   627,  1116,   629,  1116,   629,  1116,
     628,    -1,   557,   627,  1116,   629,  1116,   628,    -1,   600,
     627,  1116,   628,    -1,   600,   627,  1116,   629,  1116,   628,
      -1,  1134,    -1,    96,   627,  1116,   629,  1116,   628,    -1,
     199,   627,  1158,   628,    -1,   270,   627,  1158,   628,    -1,
     331,   627,  1158,   628,    -1,   332,   627,  1158,   628,    -1,
     333,   627,  1158,   628,    -1,   393,   627,  1116,   629,  1116,
     628,    -1,   394,   627,  1158,   628,    -1,    -1,  1411,   627,
    1136,  1140,   628,    -1,  1415,   635,  1415,   627,  1157,   628,
      -1,  1138,  1139,    -1,   243,    43,   326,    -1,    -1,   243,
     339,   255,   326,    -1,    -1,   604,   411,   174,    -1,    -1,
    1141,    -1,  1142,    -1,  1141,   629,  1142,    -1,  1111,  1116,
    1112,  1113,    -1,    28,   627,  1153,   628,    -1,    28,   627,
     141,  1153,   628,    -1,    37,   627,  1153,   628,    -1,    38,
     627,  1153,   628,    -1,    40,   627,  1153,   628,    -1,   101,
     627,  1213,   622,   628,    -1,   101,   627,  1153,   628,    -1,
      -1,    -1,   101,   627,   141,  1144,  1158,  1145,   628,    -1,
     325,   627,  1153,   628,    -1,   325,   627,   141,  1153,   628,
      -1,   308,   627,  1153,   628,    -1,   308,   627,   141,  1153,
     628,    -1,   511,   627,  1153,   628,    -1,   592,   627,  1153,
     628,    -1,   510,   627,  1153,   628,    -1,   594,   627,  1153,
     628,    -1,   522,   627,  1153,   628,    -1,   522,   627,   141,
    1153,   628,    -1,    -1,   206,   627,  1150,  1146,  1158,  1152,
    1151,   628,    -1,    -1,   634,  1148,  1149,    -1,  1417,   474,
    1116,    -1,  1417,    -1,   634,  1430,  1417,   995,    -1,    -1,
     141,    -1,    -1,   467,  1396,    -1,    -1,  1226,    -1,    -1,
    1213,  1154,  1116,    -1,    34,   942,    -1,    60,   942,   961,
      -1,   341,   942,    -1,   241,    -1,   481,    -1,   481,   241,
      -1,   574,    -1,   574,   241,    -1,   118,    -1,   545,   942,
      -1,   115,   942,    -1,   126,   936,    -1,    -1,   143,  1156,
     943,    -1,    -1,  1158,    -1,  1116,    -1,  1158,   629,  1116,
      -1,  1160,    -1,   627,  1160,   628,    -1,  1404,    -1,  1160,
     629,  1404,    -1,    -1,  1116,    -1,    -1,   151,  1116,    -1,
     601,  1116,   541,  1116,    -1,  1163,   601,  1116,   541,  1116,
      -1,  1177,    -1,  1168,    -1,  1167,    -1,  1164,    -1,   631,
    1415,  1164,   632,    -1,  1166,    -1,  1167,   629,  1166,    -1,
    1164,  1176,  1164,    -1,  1164,   514,  1177,    -1,    -1,  1164,
    1176,  1164,   361,  1169,  1116,    -1,    -1,  1164,   514,  1177,
     361,  1170,  1116,    -1,    -1,  1164,  1176,  1164,   583,  1171,
     627,  1207,   628,    -1,  1164,   339,   250,  1177,    -1,    -1,
    1164,   262,  1193,   250,  1164,   361,  1172,  1116,    -1,    -1,
    1164,   262,  1193,   250,  1177,  1173,   583,   627,  1207,   628,
      -1,  1164,   339,   262,  1193,   250,  1177,    -1,    -1,  1164,
     451,  1193,   250,  1164,   361,  1174,  1116,    -1,    -1,  1164,
     451,  1193,   250,  1177,  1175,   583,   627,  1207,   628,    -1,
    1164,   339,   451,  1193,   250,  1177,    -1,   250,    -1,   233,
     250,    -1,   104,   250,    -1,    -1,  1178,  1408,  1212,  1202,
      -1,  1192,  1191,  1188,    -1,   627,  1191,  1179,   628,  1212,
      -1,  1186,  1497,    -1,    -1,    -1,  1179,   570,  1501,  1180,
    1502,  1181,  1497,    -1,  1183,    -1,    -1,    -1,  1184,  1508,
    1109,  1185,   901,  1108,    -1,    -1,  1191,  1187,  1167,    -1,
      -1,    -1,  1189,  1105,  1109,  1190,   901,    -1,    -1,   465,
      -1,    -1,   374,    -1,    -1,   190,   250,    -1,   190,   371,
      47,    -1,   190,   205,    47,    -1,   188,    -1,   225,    -1,
      -1,  1195,   972,  1194,  1197,   627,  1206,   628,    -1,    -1,
     582,   972,  1194,  1198,   627,  1204,   628,    -1,  1196,    -1,
    1199,  1196,    -1,    -1,    -1,  1201,  1199,    -1,    -1,  1203,
    1200,    -1,    -1,  1206,    -1,  1415,    -1,   401,    -1,  1205,
      -1,  1206,   629,  1205,    -1,  1415,    -1,  1207,   629,  1415,
      -1,  1209,    -1,   119,    -1,   120,    -1,   121,    -1,   122,
      -1,   217,    -1,   218,    -1,   219,    -1,   321,    -1,   322,
      -1,   462,    -1,   614,    -1,   123,    -1,   600,    -1,   220,
      -1,   323,    -1,   330,    -1,   410,    -1,   463,    -1,   319,
      -1,   615,    -1,   118,    -1,   545,    -1,   115,    -1,   542,
      -1,    -1,    19,    -1,   161,    -1,    -1,  1211,  1415,    -1,
      -1,    12,    -1,    -1,    -1,   602,  1215,  1116,    -1,    -1,
      -1,   211,  1217,  1116,    -1,   166,  1130,    -1,    -1,    -1,
     205,    47,  1220,  1221,    -1,  1220,   629,  1403,  1229,    -1,
    1403,  1229,    -1,    -1,   605,    -1,   606,    -1,   371,    47,
    1223,    -1,  1223,   629,  1224,    -1,  1224,    -1,  1405,  1229,
      -1,    -1,  1226,    -1,    -1,   371,    47,  1227,  1228,    -1,
    1228,   629,  1403,  1229,    -1,  1403,  1229,    -1,    -1,    20,
      -1,   133,    -1,    -1,  1232,    -1,    -1,  1232,    -1,   267,
    1233,    -1,   267,  1233,   455,   170,  1235,    -1,   267,   455,
     170,  1235,    -1,  1234,    -1,  1234,   629,  1234,    -1,  1234,
     359,  1234,    -1,  1415,    -1,  1397,    -1,   561,    -1,   281,
      -1,   356,    -1,  1234,    -1,    -1,   267,  1234,    -1,   267,
     455,   170,    -1,   267,  1234,   455,   170,    -1,   356,    -1,
     620,   356,    -1,   620,   281,    -1,   356,    -1,   213,    -1,
     281,    -1,   561,    -1,   125,    -1,   185,    -1,   356,    -1,
     213,    -1,   281,    -1,   561,    -1,  1242,    -1,   356,    -1,
     561,    -1,   281,    -1,   125,    -1,   185,    -1,   356,    -1,
     561,    -1,   213,    -1,   281,    -1,  1242,    -1,  1243,    -1,
     125,    -1,   185,    -1,  1238,    -1,   128,    -1,    -1,    -1,
     403,  1415,  1246,   627,  1247,   628,    -1,    -1,  1248,    -1,
    1248,   629,  1249,    -1,  1249,    -1,  1111,  1116,  1112,    -1,
      -1,  1251,  1252,    -1,  1252,   629,  1253,    -1,  1253,    -1,
     634,  1417,    -1,  1417,    -1,    -1,   240,  1255,  1256,    -1,
      -1,    -1,   375,  1414,  1257,   952,  1258,  1380,  1383,    -1,
     147,  1414,    -1,  1250,    -1,    -1,   144,  1260,  1158,    -1,
      -1,   145,  1270,  1440,  1269,  1262,  1265,  1037,    -1,    -1,
     145,   229,  1415,   361,  1408,  1263,    -1,   145,   111,  1269,
    1415,    -1,   145,   195,  1269,  1415,   635,  1415,    -1,   145,
     195,  1269,  1415,    -1,   145,   403,  1269,   685,    -1,   145,
     579,   684,  1470,    -1,    -1,   145,   596,  1269,  1264,  1265,
    1037,    -1,   145,   168,  1269,   685,    -1,   145,   554,  1269,
     685,    -1,   145,   529,   808,   819,   820,    -1,   145,   277,
     205,   809,   819,   820,    -1,   145,   471,  1269,  1417,    -1,
    1266,    -1,  1265,   629,  1266,    -1,  1408,    -1,  1268,    -1,
    1267,   629,  1268,    -1,  1409,    -1,    -1,   224,   172,    -1,
      -1,   535,    -1,    -1,    -1,   236,  1272,  1277,  1031,  1279,
    1273,  1281,  1297,    -1,    -1,    -1,   439,  1275,  1278,  1279,
    1276,  1281,    -1,    -1,   284,    -1,   130,    -1,   214,    -1,
    1306,    -1,   130,    -1,   240,  1280,    -1,  1280,    -1,  1266,
      -1,  1284,    -1,   627,   628,  1284,    -1,   627,  1283,   628,
    1284,    -1,    -1,   473,  1282,  1288,    -1,  1283,   629,  1401,
      -1,  1401,    -1,   587,  1287,    -1,   588,  1287,    -1,    -1,
     879,  1285,  1493,    -1,    -1,   627,   879,   628,  1286,  1496,
      -1,  1287,   629,  1292,    -1,  1292,    -1,  1288,   629,  1289,
      -1,  1289,    -1,  1405,  1290,  1296,    -1,   161,    -1,   474,
      -1,    -1,  1290,    -1,    -1,   627,  1293,  1294,   628,    -1,
      -1,  1295,    -1,  1295,   629,  1296,    -1,  1296,    -1,  1116,
      -1,   128,    -1,    -1,    -1,   361,   148,  1298,   253,   576,
    1304,    -1,    -1,    -1,   576,  1300,  1306,  1031,  1165,   473,
    1302,  1301,  1214,  1225,  1236,    -1,  1302,   629,  1303,    -1,
    1303,    -1,  1405,  1290,  1296,    -1,  1304,   629,  1305,    -1,
    1305,    -1,  1405,  1290,  1296,    -1,    -1,   284,    -1,    -1,
     132,  1308,  1316,  1309,    -1,    -1,   192,  1408,  1310,  1214,
    1225,  1236,    -1,    -1,  1313,  1311,   192,  1165,  1214,    -1,
      -1,   192,  1267,  1312,   583,  1165,  1214,    -1,  1314,    -1,
    1313,   629,  1314,    -1,  1415,  1315,    -1,  1415,   635,  1415,
    1315,    -1,    -1,   635,   622,    -1,    -1,  1317,  1316,    -1,
     412,    -1,   284,    -1,   225,    -1,    -1,   557,  1320,  1319,
    1266,    -1,    -1,   532,    -1,    -1,  1322,    -1,  1323,    -1,
    1322,   629,  1323,    -1,   102,    -1,   316,    -1,    42,   244,
      -1,    97,   526,    -1,   379,   180,    -1,   245,    -1,   525,
      -1,   491,    -1,    12,    -1,    -1,   190,   411,   356,    -1,
      -1,   478,  1326,  1327,    -1,   112,  1338,    -1,  1334,   528,
    1333,  1338,    -1,  1334,   553,  1333,  1338,    -1,   167,  1333,
    1338,    -1,   532,   509,  1333,  1338,    -1,   365,   528,  1333,
    1338,    -1,   391,    -1,   159,   898,  1330,    -1,   159,    12,
    1330,    -1,  1334,    73,  1335,  1408,  1333,  1338,    -1,  1331,
     278,    -1,   483,   216,    -1,    -1,    35,   167,  1336,  1337,
    1328,  1230,    -1,    -1,   427,   167,  1336,  1337,  1329,  1230,
      -1,   974,  1335,  1408,  1333,  1214,    -1,  1332,   158,    -1,
      24,    -1,    99,    -1,   402,    -1,   101,   627,   622,   628,
     599,    -1,   101,   627,   622,   628,   164,    -1,   599,  1230,
      -1,   164,  1230,    -1,   407,    -1,   406,  1321,  1324,  1230,
      -1,  1429,   509,  1338,    -1,  1334,   405,    -1,  1429,   591,
    1338,    -1,   949,  1338,    -1,    72,  1338,    -1,   204,    -1,
     204,   190,  1418,    -1,   103,   111,   889,  1415,    -1,   103,
     532,  1408,    -1,   103,   596,  1408,    -1,   300,   509,    -1,
     483,   509,    -1,    67,    -1,   580,    -1,   531,    -1,   230,
      -1,   103,   403,   685,    -1,   103,   195,   685,    -1,   103,
     554,   685,    -1,   403,   509,  1338,    -1,   195,   509,  1338,
      -1,   403,    70,   685,    -1,   195,    70,   685,    -1,   103,
     168,   685,    -1,   509,    -1,   334,    -1,   278,    -1,   300,
      -1,    34,    -1,    -1,   513,    -1,    -1,  1335,  1415,    -1,
      -1,   193,    -1,   192,    -1,   243,    -1,    -1,   243,  1412,
      -1,    -1,   192,  1240,    -1,    -1,   266,  1412,    -1,   602,
    1116,    -1,    -1,  1342,  1408,  1340,  1344,    -1,    -1,  1342,
    1343,  1341,  1094,    -1,   133,    -1,   134,    -1,    -1,   175,
      -1,   386,    -1,    -1,  1396,    -1,  1415,    -1,    -1,   187,
    1069,  1346,  1347,    -1,    -1,    -1,  1440,  1348,  1353,  1349,
    1350,    -1,  1351,    -1,    -1,   604,   416,   276,  1354,    -1,
    1351,   629,  1352,    -1,  1352,    -1,   163,   278,    -1,   159,
     278,    -1,   197,   278,    -1,   484,   278,    -1,    34,   278,
      -1,   426,   278,    -1,   411,    49,    -1,   216,    -1,   402,
      -1,   278,    -1,   509,    -1,   483,    -1,    67,    -1,   580,
      -1,   531,    -1,   230,    -1,   300,    -1,   135,    -1,   444,
      -1,    -1,  1265,    -1,    -1,    17,   138,    61,    -1,    -1,
     442,  1356,  1357,    -1,  1357,   629,  1358,    -1,  1358,    -1,
      -1,   483,  1359,  1360,    -1,   300,    -1,   411,    49,    -1,
      -1,    12,    -1,    -1,   409,  1362,  1363,    -1,  1331,   278,
    1364,    -1,   549,  1412,    -1,    30,  1116,    -1,    -1,   254,
    1366,  1367,  1368,  1369,    -1,    -1,   209,    -1,   488,    -1,
      -1,    90,    -1,   411,    -1,  1116,    -1,   579,  1418,    -1,
     582,  1415,    -1,    -1,    -1,    -1,    -1,   272,  1376,  1372,
    1378,  1377,   231,  1414,  1373,  1379,   240,   532,  1408,  1374,
     952,  1375,  1386,  1380,  1383,  1387,  1389,  1392,    -1,   114,
      -1,   612,    -1,    -1,   273,    -1,    -1,    88,    -1,   284,
      -1,    -1,   439,    -1,   225,    -1,    -1,    73,  1381,    -1,
    1381,  1382,    -1,  1382,    -1,   537,    47,  1396,    -1,   369,
     154,    47,  1396,    -1,   154,    47,  1396,    -1,   165,    47,
    1396,    -1,    -1,   269,  1384,    -1,  1384,  1385,    -1,  1385,
      -1,   537,    47,  1396,    -1,   506,    47,  1396,    -1,    -1,
     455,   222,    47,  1396,    -1,    -1,   225,   356,  1388,    -1,
     269,    -1,   455,    -1,    -1,   627,  1390,   628,    -1,   627,
     628,    -1,  1390,   629,  1391,    -1,  1391,    -1,  1405,    -1,
     634,  1417,    -1,    -1,   473,  1393,    -1,  1393,   629,  1394,
      -1,  1394,    -1,  1405,  1290,  1111,  1296,  1112,    -1,   538,
      -1,   340,    -1,   564,   538,    -1,  1395,  1413,    -1,  1413,
      -1,   213,    -1,    36,    -1,   381,    -1,  1399,    -1,   621,
    1400,    -1,   620,  1400,    -1,  1395,    -1,  1400,    -1,   355,
      -1,   178,    -1,   556,    -1,   213,    -1,    36,    -1,   564,
     213,    -1,   564,    36,    -1,   118,  1395,    -1,   545,  1395,
      -1,   542,  1395,    -1,   356,    -1,   281,    -1,   561,    -1,
     125,    -1,   185,    -1,  1405,    -1,  1402,    -1,  1415,   635,
     622,    -1,  1415,   635,  1415,   635,   622,    -1,  1116,    -1,
    1415,    -1,  1406,    -1,  1415,    -1,  1406,    -1,  1415,   635,
    1415,    -1,   635,  1415,   635,  1415,    -1,  1415,   635,  1415,
     635,  1415,    -1,  1415,    -1,  1415,   635,  1415,   635,  1415,
      -1,  1415,   635,  1415,    -1,   635,  1415,    -1,  1415,    -1,
    1415,   635,  1415,    -1,   635,  1415,    -1,  1415,  1315,    -1,
    1415,   635,  1415,  1315,    -1,  1415,    -1,   221,    -1,   223,
      -1,   538,    -1,   538,    -1,   538,    -1,  1411,    -1,  1419,
      -1,  1411,    -1,  1420,    -1,  1415,    -1,  1412,    -1,   265,
      -1,  1417,    -1,  1417,   634,  1417,    -1,   107,  1115,    -1,
    1420,    -1,    21,    -1,    29,    -1,    31,    -1,    48,    -1,
      49,    -1,    59,    -1,    62,    -1,    61,    -1,    68,    -1,
      74,    -1,    75,    -1,    76,    -1,    77,    -1,    78,    -1,
      79,    -1,    82,    -1,    84,    -1,    96,    -1,   124,    -1,
     144,    -1,   155,    -1,   170,    -1,   171,    -1,   187,    -1,
     208,    -1,   212,    -1,   215,    -1,   238,    -1,   255,    -1,
     352,    -1,   365,    -1,   367,    -1,   377,    -1,   382,    -1,
     387,    -1,   395,    -1,   398,    -1,   433,    -1,   436,    -1,
     442,    -1,   445,    -1,   452,    -1,   459,    -1,   464,    -1,
     471,    -1,   481,    -1,   487,    -1,   483,    -1,   489,    -1,
     508,    -1,   512,    -1,   557,    -1,   568,    -1,   569,    -1,
     608,    -1,   611,    -1,   577,    -1,     5,    -1,     7,    -1,
       8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,    -1,
      18,    -1,    23,    -1,    24,    -1,    26,    -1,    25,    -1,
      27,    -1,    28,    -1,    35,    -1,    39,    -1,    42,    -1,
      44,    -1,    43,    -1,    46,    -1,    52,    -1,    55,    -1,
      56,    -1,    58,    -1,    64,    -1,    67,    -1,    66,    -1,
      65,    -1,    69,    -1,    70,    -1,    72,    -1,    81,    -1,
      73,    -1,    83,    -1,    85,    -1,    86,    -1,    87,    -1,
      88,    -1,    90,    -1,    91,    -1,    93,    -1,    95,    -1,
      94,    -1,    97,    -1,    99,    -1,   102,    -1,   105,    -1,
     109,    -1,   114,    -1,   113,    -1,   115,    -1,   118,    -1,
     123,    -1,   129,    -1,   131,    -1,   135,    -1,   137,    -1,
     138,    -1,   139,    -1,   140,    -1,   147,    -1,   148,    -1,
     149,    -1,   156,    -1,   160,    -1,   159,    -1,   158,    -1,
     163,    -1,   164,    -1,   166,    -1,   168,    -1,   167,    -1,
     169,    -1,   174,    -1,   175,    -1,   176,    -1,   180,    -1,
     179,    -1,   191,    -1,   153,    -1,   193,    -1,   182,    -1,
     183,    -1,   184,    -1,   197,    -1,   198,    -1,   200,    -1,
     199,    -1,   201,    -1,   204,    -1,   202,    -1,   210,    -1,
     209,    -1,   216,    -1,   220,    -1,   222,    -1,   226,    -1,
     230,    -1,   242,    -1,   227,    -1,   228,    -1,   232,    -1,
     244,    -1,   245,    -1,   247,    -1,   248,    -1,   237,    -1,
     252,    -1,   257,    -1,   256,    -1,   260,    -1,   263,    -1,
     264,    -1,   270,    -1,   271,    -1,   273,    -1,   275,    -1,
     277,    -1,   278,    -1,   306,    -1,   300,    -1,   302,    -1,
     287,    -1,   291,    -1,   288,    -1,   289,    -1,   301,    -1,
     290,    -1,   292,    -1,   286,    -1,   298,    -1,   294,    -1,
     293,    -1,   295,    -1,   296,    -1,   297,    -1,   304,    -1,
     305,    -1,   307,    -1,   309,    -1,   310,    -1,   315,    -1,
     316,    -1,   317,    -1,   318,    -1,   319,    -1,   320,    -1,
     323,    -1,   324,    -1,   328,    -1,   326,    -1,   330,    -1,
     331,    -1,   332,    -1,   333,    -1,   334,    -1,   335,    -1,
     337,    -1,   336,    -1,   338,    -1,   341,    -1,   342,    -1,
     346,    -1,   345,    -1,   353,    -1,   347,    -1,   348,    -1,
     358,    -1,   359,    -1,   360,    -1,   362,    -1,   363,    -1,
     364,    -1,   378,    -1,   379,    -1,   384,    -1,   385,    -1,
     386,    -1,   388,    -1,   389,    -1,   390,    -1,   392,    -1,
     391,    -1,   393,    -1,   394,    -1,   399,    -1,   400,    -1,
     402,    -1,   404,    -1,   405,    -1,   406,    -1,   407,    -1,
     408,    -1,   410,    -1,   411,    -1,   412,    -1,   415,    -1,
     419,    -1,   420,    -1,   422,    -1,   421,    -1,   423,    -1,
     426,    -1,   427,    -1,   428,    -1,   429,    -1,   430,    -1,
     432,    -1,   435,    -1,   437,    -1,   440,    -1,   444,    -1,
     447,    -1,   448,    -1,   453,    -1,   454,    -1,   455,    -1,
     456,    -1,   457,    -1,   458,    -1,   460,    -1,   461,    -1,
     463,    -1,   469,    -1,   468,    -1,   470,    -1,   482,    -1,
     475,    -1,   479,    -1,   484,    -1,   486,    -1,   488,    -1,
     490,    -1,   491,    -1,   499,    -1,   498,    -1,   501,    -1,
     504,    -1,   507,    -1,   509,    -1,   513,    -1,   515,    -1,
     516,    -1,   517,    -1,   518,    -1,   520,    -1,   519,    -1,
     523,    -1,   524,    -1,   525,    -1,   526,    -1,   534,    -1,
     531,    -1,   528,    -1,   533,    -1,   529,    -1,   535,    -1,
     536,    -1,   539,    -1,   540,    -1,   551,    -1,   552,    -1,
     553,    -1,   542,    -1,   543,    -1,   544,    -1,   545,    -1,
     558,    -1,   559,    -1,   560,    -1,   195,    -1,   562,    -1,
     563,    -1,   566,    -1,   565,    -1,   572,    -1,   575,    -1,
     579,    -1,   580,    -1,   581,    -1,   591,    -1,   596,    -1,
     597,    -1,   588,    -1,   599,    -1,   598,    -1,   600,    -1,
     607,    -1,   610,    -1,   612,    -1,   615,    -1,   595,    -1,
      -1,   473,  1423,  1422,  1424,    -1,    -1,   368,    -1,  1425,
      -1,  1424,   629,  1425,    -1,    -1,  1426,  1431,    -1,  1428,
      -1,   202,    -1,   273,    -1,   470,    -1,    -1,   362,    -1,
      -1,   202,    -1,   273,    -1,   470,    -1,    -1,   202,   635,
      -1,   273,   635,    -1,   470,   635,    -1,  1432,    -1,  1428,
    1433,    -1,  1427,  1434,  1290,  1437,    -1,  1427,   551,   247,
     264,  1435,    -1,   634,  1417,  1290,  1116,    -1,   634,   634,
    1430,  1434,  1290,  1437,    -1,   949,   954,    -1,   336,  1290,
    1116,    -1,   336,   951,   956,    -1,   388,  1290,  1436,    -1,
     388,   190,  1418,  1290,  1436,    -1,  1415,    -1,  1415,   635,
    1415,    -1,   128,   635,  1415,    -1,   416,   562,    -1,   416,
      83,    -1,   437,   416,    -1,   468,    -1,   538,    -1,   388,
     627,   538,   628,    -1,   360,   627,   538,   628,    -1,  1116,
      -1,   128,    -1,   361,    -1,    12,    -1,    34,    -1,    -1,
     276,  1440,  1439,  1441,    -1,   532,    -1,   528,    -1,  1442,
      -1,  1441,   629,  1442,    -1,  1408,  1212,  1443,    -1,   416,
      -1,   609,    -1,   609,    88,    -1,   284,   609,    -1,   416,
     273,    -1,    -1,   573,  1445,  1440,    -1,   208,  1408,   365,
    1212,    -1,   208,  1410,    68,    -1,    -1,   208,  1410,   416,
    1447,  1448,  1214,  1231,    -1,  1449,    -1,  1415,  1450,    -1,
     183,    -1,   346,    -1,   183,    -1,   346,    -1,   400,    -1,
     256,    -1,    -1,  1452,  1451,   627,  1295,   628,    -1,   161,
      -1,   196,    -1,   258,    -1,   207,    -1,   285,    -1,   450,
     684,  1454,    -1,  1458,   361,  1457,  1469,   192,  1470,    -1,
    1458,   361,   195,  1469,   192,  1470,    -1,  1458,   361,   403,
    1469,   192,  1470,    -1,    12,  1459,   629,   203,   368,   192,
    1470,    -1,   408,   361,  1418,   192,  1470,    -1,   203,   684,
    1456,    -1,  1458,   361,  1457,  1469,   549,  1471,  1478,  1479,
      -1,  1458,   361,   195,  1469,   549,  1471,  1478,  1479,    -1,
    1458,   361,   403,  1469,   549,  1471,  1478,  1479,    -1,   408,
     361,  1418,   549,  1471,  1480,    -1,    -1,   532,    -1,  1460,
      -1,    12,  1459,    -1,    -1,   402,    -1,  1461,    -1,  1460,
     629,  1461,    -1,    -1,   465,  1462,  1475,    -1,    -1,   236,
    1463,  1475,    -1,    -1,   576,  1464,  1475,    -1,    -1,   424,
    1465,  1475,    -1,   132,    -1,   578,    -1,   229,    -1,    13,
      -1,   103,    -1,   145,    -1,   171,    -1,   432,    -1,   479,
      -1,   404,    -1,   182,    -1,   203,   368,    -1,   478,   112,
      -1,   523,    -1,   103,   535,   528,    -1,   276,   528,    -1,
     440,   483,    -1,   440,    66,    -1,   103,   596,    -1,   478,
     596,    -1,   103,   454,    -1,    13,   454,    -1,   103,   579,
      -1,   168,    -1,   554,    -1,   103,   529,    -1,    -1,    17,
      -1,  1468,  1466,  1467,    -1,  1468,    -1,   518,   538,    -1,
     248,   538,    -1,    64,   538,    -1,   622,    -1,  1415,   635,
     622,    -1,   622,   635,   622,    -1,  1408,    -1,  1418,    -1,
    1470,   629,  1418,    -1,  1474,    -1,  1471,   629,  1474,    -1,
     595,    -1,   604,    -1,   583,    -1,    19,    -1,  1418,   222,
      47,   538,    -1,  1418,   222,    47,   388,   538,    -1,  1418,
     222,  1472,  1417,    -1,  1418,   222,  1472,  1417,  1473,  1412,
      -1,  1418,    -1,    -1,   627,  1476,   628,    -1,  1476,   629,
    1477,    -1,  1477,    -1,  1415,    -1,    -1,   441,  1467,    -1,
     441,   505,    -1,   441,   610,    -1,   441,   348,    -1,    -1,
     604,  1481,    -1,    -1,   604,   203,   368,    -1,  1481,  1482,
      -1,  1482,    -1,   203,   368,    -1,   305,  1238,    -1,   309,
    1238,    -1,   304,  1238,    -1,   310,  1237,    -1,    -1,    31,
    1484,  1485,    -1,    -1,   607,    -1,    -1,    17,   352,    56,
      -1,    17,    56,    -1,    -1,   431,    -1,   352,   431,    -1,
      -1,   459,    -1,    84,  1485,  1486,  1487,    -1,   452,  1485,
    1486,  1487,    -1,   452,  1485,   549,  1488,  1415,    -1,   459,
    1415,    -1,   431,   459,  1415,    -1,    -1,  1494,    -1,    -1,
     570,  1501,  1495,  1095,    -1,    -1,  1494,    -1,  1498,    -1,
      -1,  1498,    -1,    -1,  1499,  1500,    -1,  1226,  1230,    -1,
    1232,    -1,    -1,   141,    -1,    12,    -1,   465,  1182,    -1,
     627,  1097,   628,    -1,  1502,  1497,    -1,    -1,  1503,   570,
    1501,  1504,  1502,  1497,    -1,  1506,  1503,  1507,    -1,    -1,
      -1,    -1,  1509,    -1,  1509,  1510,    -1,  1510,    -1,   514,
      -1,   214,    -1,   141,    -1,   502,    -1,   497,    -1,   498,
      -1,   500,    -1,    12,    -1,  1516,  1512,    -1,  1515,  1513,
      -1,  1517,  1514,  1521,    -1,  1521,    -1,  1529,    -1,  1540,
      -1,  1534,    -1,   671,    -1,  1521,    -1,  1529,    -1,  1540,
      -1,  1534,    -1,  1533,    -1,   671,    -1,  1515,    -1,  1516,
      -1,    -1,   129,   161,  1418,    -1,  1518,    -1,  1518,  1519,
      -1,  1519,    -1,   373,   439,    -1,    11,   161,   563,    -1,
      11,   161,   317,    -1,    11,   161,   536,    -1,    -1,   503,
     464,   129,    -1,   503,   464,   242,    -1,    -1,  1520,   596,
    1408,  1522,  1523,    19,  1525,    -1,    -1,   627,  1524,   628,
      -1,  1415,    -1,  1524,   629,  1415,    -1,    -1,  1526,  1527,
    1528,    -1,   465,  1098,    -1,   627,  1096,   628,  1496,    -1,
      -1,   604,    63,   368,    -1,   604,    52,    63,   368,    -1,
     604,   273,    63,   368,    -1,    -1,    -1,    -1,   554,  1111,
     685,   779,   780,   361,  1111,  1530,  1408,   190,  1111,  1531,
     150,   457,  1532,   729,    -1,    10,  1111,   195,  1415,   448,
     902,   489,  1412,    -1,  1111,   195,  1415,   448,   902,   489,
    1412,    -1,    -1,    -1,    -1,    -1,    -1,  1111,   195,   685,
     627,  1535,   696,   628,  1536,   448,  1537,   947,  1538,   687,
    1539,   729,    -1,    -1,    -1,    -1,    -1,   403,  1111,   685,
    1541,   627,  1542,   700,   628,  1543,   687,  1544,   729,    -1,
     611,  1547,  1546,  1548,    -1,   611,   155,  1546,  1550,    -1,
     611,   398,  1546,    -1,   611,    84,  1546,  1549,    -1,   611,
     452,  1546,    -1,   611,   420,    -1,  1396,    -1,  1396,   629,
    1396,    -1,  1396,   629,  1396,   629,  1238,    -1,    31,    -1,
     508,    -1,    -1,   250,    -1,   447,    -1,    -1,   363,   390,
      -1,    -1,    -1,   524,  1551,  1552,    -1,    -1,   190,   320,
      -1,   238,   392,  1415,   489,  1412,    -1,   238,   489,  1412,
      -1,   569,   392,  1415,    -1,   569,   489,  1412,    -1,   617,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1700,  1700,  1713,  1712,  1737,  1744,  1746,  1750,  1751,
    1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,
    1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,
    1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
    1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,
    1806,  1807,  1808,  1812,  1822,  1823,  1827,  1837,  1844,  1855,
    1854,  1865,  1867,  1871,  1872,  1876,  1889,  1888,  1908,  1907,
    1916,  1917,  1921,  1925,  1929,  1933,  1937,  1941,  1946,  1950,
    1954,  1958,  1962,  1966,  1972,  2003,  2008,  2011,  2013,  2014,
    2018,  2024,  2028,  2044,  2048,  2060,  2059,  2101,  2100,  2112,
    2110,  2123,  2121,  2133,  2132,  2145,  2144,  2152,  2156,  2160,
    2164,  2171,  2184,  2185,  2189,  2193,  2197,  2201,  2205,  2209,
    2213,  2221,  2220,  2252,  2251,  2258,  2265,  2266,  2272,  2278,
    2288,  2294,  2300,  2302,  2309,  2310,  2314,  2320,  2329,  2330,
    2338,  2338,  2396,  2397,  2398,  2399,  2400,  2401,  2402,  2403,
    2404,  2405,  2406,  2407,  2408,  2413,  2427,  2443,  2462,  2463,
    2467,  2468,  2473,  2475,  2477,  2479,  2481,  2483,  2485,  2491,
    2492,  2493,  2497,  2501,  2509,  2508,  2521,  2523,  2526,  2528,
    2532,  2536,  2543,  2545,  2549,  2550,  2555,  2575,  2601,  2603,
    2607,  2608,  2612,  2638,  2639,  2640,  2641,  2645,  2646,  2650,
    2651,  2656,  2659,  2686,  2685,  2750,  2766,  2765,  2819,  2845,
    2845,  2868,  2869,  2874,  2876,  2881,  2904,  2917,  2921,  2938,
    2939,  2943,  2947,  2956,  2963,  2970,  2980,  2995,  3018,  3024,
    3025,  3031,  3034,  3038,  3046,  3066,  3068,  3086,  3092,  3094,
    3096,  3098,  3100,  3102,  3104,  3106,  3108,  3110,  3112,  3114,
    3119,  3134,  3149,  3167,  3168,  3172,  3173,  3174,  3175,  3176,
    3177,  3178,  3179,  3180,  3181,  3182,  3183,  3184,  3189,  3188,
    3195,  3195,  3252,  3251,  3280,  3280,  3294,  3347,  3390,  3411,
    3410,  3432,  3451,  3453,  3454,  3458,  3478,  3501,  3503,  3519,
    3501,  3538,  3540,  3541,  3545,  3546,  3551,  3557,  3550,  3578,
    3577,  3593,  3594,  3598,  3599,  3604,  3608,  3603,  3629,  3633,
    3628,  3652,  3662,  3667,  3666,  3702,  3703,  3708,  3707,  3740,
    3740,  3755,  3754,  3790,  3802,  3804,  3801,  3831,  3830,  3851,
    3853,  3858,  3860,  3862,  3879,  3884,  3890,  3897,  3898,  3906,
    3912,  3921,  3927,  3933,  3934,  3938,  3938,  3943,  3944,  3945,
    3949,  3950,  3951,  3955,  3959,  3960,  3961,  3965,  3966,  3967,
    3968,  3969,  3970,  3971,  3972,  3976,  3980,  3981,  3982,  3986,
    3987,  3988,  3989,  3990,  3994,  3998,  3999,  4000,  4004,  4005,
    4006,  4007,  4008,  4009,  4010,  4014,  4018,  4019,  4020,  4024,
    4025,  4026,  4031,  4039,  4047,  4055,  4067,  4079,  4084,  4089,
    4097,  4105,  4113,  4121,  4129,  4137,  4145,  4158,  4171,  4184,
    4186,  4190,  4195,  4208,  4209,  4260,  4261,  4264,  4279,  4298,
    4297,  4306,  4304,  4311,  4313,  4312,  4316,  4315,  4321,  4358,
    4359,  4364,  4363,  4382,  4401,  4400,  4417,  4421,  4429,  4428,
    4431,  4433,  4435,  4437,  4442,  4443,  4448,  4449,  4453,  4454,
    4458,  4477,  4487,  4498,  4507,  4508,  4524,  4526,  4525,  4530,
    4528,  4539,  4540,  4544,  4562,  4578,  4579,  4595,  4610,  4632,
    4633,  4638,  4637,  4661,  4671,  4693,  4692,  4710,  4709,  4729,
    4751,  4755,  4784,  4796,  4797,  4802,  4813,  4801,  4838,  4839,
    4843,  4856,  4877,  4890,  4916,  4917,  4922,  4921,  4958,  4963,
    4964,  4968,  4969,  4973,  4975,  4981,  4987,  4989,  4991,  4993,
    4995,  4997,  5007,  5022,  5006,  5036,  5037,  5041,  5042,  5046,
    5047,  5051,  5052,  5056,  5057,  5061,  5062,  5066,  5070,  5071,
    5074,  5076,  5080,  5081,  5085,  5086,  5087,  5091,  5096,  5101,
    5106,  5111,  5116,  5121,  5126,  5141,  5147,  5152,  5157,  5162,
    5167,  5173,  5172,  5198,  5199,  5200,  5205,  5210,  5215,  5217,
    5219,  5221,  5227,  5232,  5237,  5243,  5249,  5255,  5264,  5282,
    5299,  5322,  5336,  5337,  5338,  5339,  5340,  5341,  5342,  5346,
    5347,  5348,  5352,  5353,  5357,  5358,  5359,  5360,  5365,  5372,
    5373,  5377,  5378,  5382,  5383,  5391,  5390,  5399,  5397,  5407,
    5405,  5415,  5413,  5421,  5440,  5446,  5448,  5452,  5456,  5457,
    5461,  5466,  5465,  5491,  5492,  5501,  5503,  5508,  5511,  5515,
    5522,  5523,  5527,  5528,  5532,  5538,  5544,  5548,  5564,  5580,
    5581,  5582,  5583,  5588,  5592,  5597,  5602,  5606,  5611,  5616,
    5622,  5627,  5633,  5637,  5642,  5647,  5665,  5667,  5669,  5682,
    5684,  5689,  5694,  5706,  5711,  5716,  5721,  5723,  5725,  5727,
    5729,  5731,  5733,  5735,  5738,  5737,  5742,  5741,  5745,  5747,
    5756,  5757,  5758,  5763,  5764,  5765,  5766,  5767,  5771,  5775,
    5776,  5780,  5781,  5785,  5786,  5787,  5788,  5789,  5793,  5794,
    5795,  5796,  5797,  5801,  5806,  5808,  5814,  5815,  5817,  5822,
    5831,  5832,  5836,  5837,  5841,  5842,  5843,  5847,  5848,  5849,
    5850,  5853,  5854,  5858,  5859,  5863,  5864,  5868,  5869,  5873,
    5874,  5875,  5876,  5883,  5884,  5890,  5896,  5902,  5908,  5909,
    5922,  5928,  5934,  5940,  5949,  5970,  5976,  5981,  5982,  5986,
    5994,  5998,  5999,  6003,  6004,  6008,  6017,  6021,  6022,  6026,
    6037,  6038,  6042,  6043,  6047,  6048,  6053,  6054,  6058,  6065,
    6074,  6082,  6093,  6094,  6095,  6096,  6097,  6098,  6103,  6111,
    6112,  6116,  6118,  6122,  6134,  6135,  6139,  6146,  6159,  6160,
    6162,  6164,  6170,  6175,  6181,  6187,  6194,  6204,  6205,  6206,
    6207,  6208,  6212,  6216,  6217,  6221,  6222,  6226,  6227,  6231,
    6232,  6233,  6237,  6238,  6242,  6246,  6259,  6271,  6272,  6276,
    6277,  6281,  6282,  6286,  6287,  6291,  6292,  6296,  6297,  6301,
    6302,  6306,  6307,  6311,  6313,  6314,  6320,  6326,  6332,  6340,
    6341,  6345,  6349,  6350,  6363,  6364,  6365,  6369,  6370,  6374,
    6380,  6394,  6395,  6399,  6400,  6404,  6405,  6413,  6412,  6451,
    6450,  6464,  6476,  6475,  6494,  6493,  6512,  6511,  6530,  6524,
    6544,  6543,  6576,  6581,  6586,  6591,  6596,  6606,  6607,  6608,
    6609,  6613,  6614,  6626,  6627,  6631,  6632,  6635,  6637,  6638,
    6639,  6641,  6643,  6644,  6653,  6654,  6658,  6667,  6665,  6679,
    6693,  6692,  6706,  6704,  6718,  6725,  6736,  6740,  6747,  6751,
    6756,  6755,  6771,  6773,  6778,  6786,  6785,  6801,  6805,  6804,
    6816,  6817,  6821,  6836,  6837,  6841,  6850,  6854,  6859,  6864,
    6863,  6875,  6886,  6874,  6902,  6911,  6915,  6924,  6933,  6939,
    6945,  6954,  6963,  6982,  7003,  7013,  7017,  7025,  7026,  7030,
    7031,  7035,  7035,  7038,  7040,  7044,  7045,  7049,  7050,  7054,
    7055,  7056,  7060,  7061,  7062,  7066,  7067,  7068,  7069,  7078,
    7077,  7086,  7094,  7093,  7101,  7110,  7119,  7120,  7127,  7127,
    7133,  7134,  7138,  7139,  7140,  7144,  7145,  7161,  7162,  7167,
    7166,  7178,  7179,  7180,  7185,  7184,  7206,  7207,  7211,  7212,
    7216,  7217,  7218,  7223,  7222,  7244,  7253,  7252,  7279,  7280,
    7284,  7285,  7289,  7290,  7291,  7292,  7293,  7294,  7299,  7298,
    7320,  7321,  7322,  7327,  7326,  7332,  7339,  7344,  7352,  7353,
    7357,  7371,  7370,  7383,  7384,  7388,  7389,  7393,  7403,  7413,
    7414,  7419,  7418,  7429,  7430,  7434,  7435,  7439,  7449,  7460,
    7459,  7467,  7467,  7476,  7477,  7482,  7483,  7492,  7501,  7502,
    7506,  7511,  7516,  7521,  7526,  7525,  7545,  7553,  7545,  7560,
    7561,  7562,  7563,  7564,  7568,  7575,  7582,  7584,  7595,  7596,
    7600,  7601,  7629,  7659,  7661,  7667,  7677,  7678,  7679,  7694,
    7701,  7727,  7733,  7739,  7740,  7741,  7742,  7743,  7747,  7748,
    7749,  7753,  7754,  7759,  7810,  7817,  7860,  7866,  7872,  7878,
    7884,  7890,  7896,  7902,  7906,  7912,  7918,  7924,  7930,  7936,
    7940,  7946,  7956,  7962,  7970,  7976,  7986,  7992,  8001,  8011,
    8017,  8027,  8033,  8042,  8046,  8052,  8058,  8064,  8070,  8076,
    8082,  8088,  8094,  8100,  8106,  8112,  8118,  8124,  8130,  8134,
    8135,  8139,  8140,  8144,  8145,  8149,  8150,  8154,  8155,  8156,
    8157,  8158,  8159,  8163,  8164,  8169,  8175,  8179,  8186,  8193,
    8200,  8207,  8214,  8219,  8225,  8232,  8239,  8247,  8258,  8280,
    8287,  8295,  8296,  8297,  8298,  8299,  8300,  8312,  8313,  8314,
    8315,  8316,  8322,  8326,  8332,  8338,  8344,  8350,  8352,  8359,
    8366,  8372,  8374,  8383,  8390,  8398,  8404,  8411,  8417,  8431,
    8438,  8454,  8460,  8466,  8474,  8480,  8486,  8492,  8498,  8513,
    8525,  8531,  8537,  8543,  8549,  8555,  8561,  8567,  8573,  8579,
    8585,  8591,  8597,  8603,  8609,  8615,  8621,  8629,  8650,  8657,
    8663,  8670,  8677,  8684,  8691,  8697,  8703,  8710,  8716,  8723,
    8729,  8735,  8741,  8747,  8753,  8771,  8777,  8783,  8790,  8797,
    8805,  8812,  8819,  8826,  8833,  8840,  8857,  8863,  8869,  8875,
    8881,  8888,  8894,  8900,  8906,  8912,  8918,  8930,  8936,  8942,
    8948,  8954,  8966,  8972,  8988,  8994,  9001,  9008,  9015,  9022,
    9029,  9033,  9053,  9052,  9125,  9167,  9169,  9174,  9175,  9179,
    9180,  9184,  9185,  9189,  9196,  9204,  9230,  9236,  9242,  9248,
    9254,  9260,  9269,  9276,  9278,  9275,  9285,  9296,  9302,  9308,
    9314,  9320,  9326,  9332,  9338,  9344,  9351,  9350,  9369,  9368,
    9383,  9393,  9401,  9417,  9418,  9423,  9428,  9433,  9436,  9449,
    9448,  9465,  9467,  9469,  9471,  9473,  9475,  9477,  9479,  9481,
    9483,  9489,  9495,  9498,  9497,  9503,  9504,  9508,  9515,  9523,
    9524,  9528,  9535,  9543,  9544,  9548,  9549,  9553,  9561,  9572,
    9573,  9582,  9593,  9594,  9600,  9601,  9621,  9623,  9627,  9625,
    9642,  9640,  9658,  9656,  9663,  9672,  9670,  9688,  9687,  9697,
    9708,  9706,  9725,  9724,  9735,  9746,  9747,  9748,  9760,  9760,
    9774,  9814,  9867,  9871,  9876,  9868,  9888,  9908,  9916,  9908,
    9925,  9924,  9947,  9964,  9947,  9971,  9975, 10001, 10002, 10007,
   10010, 10011, 10012, 10016, 10017, 10022, 10021, 10027, 10026, 10034,
   10035, 10038, 10040, 10040, 10044, 10044, 10049, 10050, 10054, 10056,
   10061, 10062, 10066, 10077, 10090, 10091, 10092, 10093, 10094, 10095,
   10096, 10097, 10098, 10099, 10100, 10101, 10105, 10106, 10107, 10108,
   10109, 10110, 10111, 10112, 10113, 10117, 10118, 10119, 10120, 10123,
   10125, 10126, 10130, 10131, 10139, 10141, 10145, 10147, 10146, 10160,
   10163, 10162, 10177, 10183, 10198, 10200, 10204, 10206, 10211, 10212,
   10232, 10257, 10261, 10262, 10266, 10279, 10281, 10286, 10285, 10320,
   10322, 10327, 10328, 10329, 10334, 10341, 10345, 10346, 10350, 10354,
   10358, 10365, 10372, 10379, 10389, 10423, 10427, 10433, 10439, 10448,
   10456, 10460, 10467, 10468, 10472, 10473, 10474, 10478, 10479, 10480,
   10481, 10482, 10483, 10487, 10488, 10489, 10490, 10491, 10495, 10496,
   10497, 10498, 10499, 10503, 10504, 10505, 10506, 10507, 10511, 10516,
   10517, 10521, 10522, 10525, 10528, 10527, 10558, 10559, 10563, 10564,
   10568, 10580, 10580, 10590, 10591, 10595, 10614, 10647, 10646, 10659,
   10667, 10658, 10669, 10681, 10693, 10692, 10710, 10709, 10720, 10720,
   10736, 10743, 10766, 10787, 10799, 10804, 10803, 10813, 10819, 10826,
   10831, 10836, 10846, 10847, 10851, 10862, 10863, 10867, 10878, 10879,
   10883, 10884, 10892, 10900, 10891, 10910, 10917, 10909, 10927, 10935,
   10936, 10944, 10948, 10949, 10960, 10961, 10965, 10974, 10975, 10976,
   10978, 10977, 10988, 10989, 10993, 10994, 10996, 10995, 10999, 10998,
   11004, 11005, 11009, 11010, 11014, 11024, 11025, 11029, 11030, 11035,
   11034, 11048, 11049, 11053, 11058, 11066, 11067, 11075, 11077, 11077,
   11085, 11093, 11084, 11115, 11116, 11120, 11128, 11129, 11133, 11143,
   11144, 11151, 11150, 11166, 11165, 11177, 11176, 11188, 11187, 11201,
   11202, 11206, 11219, 11235, 11236, 11240, 11241, 11245, 11246, 11247,
   11252, 11251, 11273, 11275, 11278, 11280, 11283, 11284, 11287, 11291,
   11295, 11299, 11303, 11307, 11311, 11315, 11319, 11327, 11330, 11340,
   11339, 11352, 11359, 11367, 11375, 11383, 11391, 11399, 11406, 11408,
   11410, 11419, 11423, 11428, 11427, 11433, 11432, 11437, 11446, 11453,
   11462, 11471, 11476, 11478, 11480, 11482, 11484, 11486, 11493, 11501,
   11503, 11511, 11518, 11525, 11535, 11542, 11548, 11557, 11565, 11569,
   11573, 11580, 11587, 11594, 11601, 11608, 11615, 11621, 11628, 11635,
   11640, 11645, 11653, 11655, 11657, 11662, 11663, 11666, 11668, 11672,
   11673, 11677, 11678, 11682, 11683, 11687, 11688, 11692, 11693, 11696,
   11698, 11705, 11716, 11715, 11728, 11727, 11737, 11738, 11742, 11743,
   11744, 11748, 11749, 11750, 11765, 11764, 11777, 11786, 11776, 11788,
   11792, 11793, 11807, 11808, 11813, 11815, 11817, 11819, 11821, 11823,
   11825, 11827, 11829, 11831, 11833, 11835, 11840, 11842, 11844, 11846,
   11848, 11850, 11852, 11857, 11858, 11862, 11863, 11867, 11866, 11876,
   11877, 11881, 11881, 11883, 11884, 11888, 11889, 11894, 11893, 11904,
   11908, 11912, 11925, 11924, 11938, 11939, 11940, 11943, 11944, 11945,
   11949, 11954, 11964, 11976, 11988, 11998, 12008, 11975, 12016, 12017,
   12021, 12022, 12026, 12027, 12035, 12039, 12040, 12041, 12044, 12046,
   12050, 12051, 12055, 12060, 12067, 12072, 12079, 12081, 12085, 12086,
   12090, 12095, 12103, 12104, 12107, 12109, 12117, 12119, 12123, 12124,
   12125, 12129, 12131, 12136, 12137, 12146, 12147, 12151, 12152, 12156,
   12169, 12193, 12205, 12216, 12235, 12243, 12255, 12270, 12291, 12292,
   12293, 12301, 12302, 12303, 12310, 12316, 12322, 12328, 12334, 12363,
   12391, 12392, 12393, 12397, 12407, 12417, 12423, 12432, 12447, 12448,
   12452, 12461, 12477, 12481, 12528, 12532, 12550, 12554, 12633, 12658,
   12689, 12690, 12706, 12716, 12720, 12726, 12732, 12742, 12748, 12757,
   12767, 12768, 12798, 12814, 12830, 12847, 12848, 12859, 12860, 12871,
   12872, 12873, 12877, 12894, 12916, 12931, 12932, 12933, 12934, 12935,
   12936, 12937, 12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945,
   12946, 12947, 12948, 12949, 12950, 12951, 12952, 12953, 12954, 12955,
   12956, 12957, 12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965,
   12966, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975,
   12976, 12977, 12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985,
   12986, 12987, 12988, 12998, 12999, 13000, 13001, 13002, 13003, 13004,
   13005, 13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014,
   13015, 13016, 13017, 13018, 13019, 13020, 13021, 13022, 13023, 13024,
   13025, 13026, 13027, 13028, 13029, 13030, 13031, 13032, 13033, 13034,
   13035, 13036, 13037, 13038, 13039, 13040, 13041, 13042, 13043, 13044,
   13045, 13046, 13047, 13048, 13049, 13050, 13051, 13052, 13053, 13054,
   13055, 13056, 13057, 13058, 13059, 13060, 13061, 13062, 13063, 13064,
   13065, 13066, 13067, 13068, 13069, 13070, 13071, 13072, 13073, 13074,
   13075, 13076, 13077, 13078, 13079, 13080, 13081, 13082, 13083, 13084,
   13085, 13086, 13087, 13088, 13089, 13090, 13091, 13092, 13093, 13094,
   13095, 13096, 13097, 13098, 13099, 13100, 13101, 13102, 13103, 13104,
   13105, 13106, 13107, 13108, 13109, 13110, 13111, 13112, 13113, 13114,
   13115, 13116, 13117, 13118, 13119, 13120, 13121, 13122, 13123, 13124,
   13125, 13126, 13127, 13128, 13129, 13130, 13131, 13132, 13133, 13134,
   13135, 13136, 13137, 13138, 13139, 13140, 13141, 13142, 13143, 13144,
   13145, 13146, 13147, 13148, 13149, 13150, 13151, 13152, 13153, 13154,
   13155, 13156, 13157, 13158, 13159, 13160, 13161, 13162, 13163, 13164,
   13165, 13166, 13167, 13168, 13169, 13170, 13171, 13172, 13173, 13174,
   13175, 13176, 13177, 13178, 13179, 13180, 13181, 13182, 13183, 13184,
   13185, 13186, 13187, 13188, 13189, 13190, 13191, 13192, 13193, 13194,
   13195, 13196, 13197, 13198, 13199, 13200, 13201, 13202, 13203, 13204,
   13205, 13206, 13207, 13208, 13209, 13210, 13211, 13212, 13213, 13214,
   13215, 13216, 13217, 13218, 13219, 13220, 13221, 13222, 13223, 13224,
   13225, 13226, 13227, 13228, 13229, 13230, 13231, 13232, 13233, 13234,
   13235, 13236, 13237, 13238, 13239, 13240, 13241, 13242, 13243, 13244,
   13245, 13246, 13247, 13248, 13249, 13250, 13251, 13252, 13253, 13254,
   13255, 13256, 13257, 13258, 13259, 13260, 13261, 13262, 13263, 13264,
   13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272, 13273, 13274,
   13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284,
   13285, 13286, 13287, 13288, 13289, 13296, 13295, 13310, 13311, 13315,
   13316, 13320, 13320, 13402, 13403, 13404, 13405, 13409, 13410, 13414,
   13415, 13416, 13417, 13421, 13422, 13423, 13424, 13428, 13429, 13433,
   13475, 13494, 13505, 13518, 13532, 13547, 13566, 13593, 13606, 13633,
   13676, 13690, 13691, 13692, 13693, 13697, 13698, 13707, 13719, 13720,
   13721, 13727, 13733, 13745, 13744, 13760, 13761, 13765, 13766, 13770,
   13785, 13786, 13787, 13792, 13793, 13798, 13797, 13817, 13829, 13842,
   13841, 13875, 13876, 13880, 13881, 13885, 13886, 13887, 13888, 13890,
   13889, 13902, 13903, 13904, 13905, 13906, 13912, 13917, 13923, 13934,
   13945, 13949, 13959, 13964, 13971, 13983, 13995, 14004, 14006, 14010,
   14011, 14018, 14020, 14024, 14025, 14030, 14029, 14033, 14032, 14036,
   14035, 14039, 14038, 14041, 14042, 14043, 14044, 14045, 14046, 14047,
   14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057,
   14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14070,
   14071, 14075, 14076, 14080, 14090, 14100, 14113, 14128, 14141, 14154,
   14166, 14171, 14179, 14184, 14191, 14191, 14192, 14192, 14195, 14222,
   14227, 14233, 14239, 14245, 14249, 14253, 14254, 14258, 14285, 14287,
   14291, 14295, 14299, 14306, 14307, 14311, 14312, 14316, 14317, 14321,
   14322, 14328, 14334, 14340, 14350, 14349, 14359, 14360, 14365, 14366,
   14367, 14372, 14373, 14374, 14378, 14379, 14383, 14395, 14404, 14414,
   14423, 14437, 14438, 14443, 14442, 14458, 14459, 14460, 14463, 14465,
   14469, 14469, 14493, 14494, 14498, 14499, 14500, 14504, 14508, 14515,
   14518, 14516, 14532, 14539, 14560, 14577, 14579, 14583, 14584, 14588,
   14589, 14597, 14598, 14599, 14600, 14606, 14612, 14622, 14624, 14626,
   14631, 14632, 14633, 14634, 14635, 14639, 14640, 14641, 14642, 14643,
   14644, 14654, 14655, 14660, 14673, 14686, 14688, 14690, 14695, 14700,
   14702, 14704, 14710, 14711, 14713, 14719, 14718, 14736, 14737, 14741,
   14746, 14754, 14754, 14779, 14780, 14785, 14786, 14788, 14790, 14808,
   14814, 14819, 14801, 14881, 14899, 14924, 14956, 14960, 14969, 14992,
   14920, 15057, 15081, 15090, 15098, 15056, 15119, 15123, 15127, 15131,
   15135, 15139, 15146, 15153, 15160, 15170, 15171, 15175, 15176, 15177,
   15181, 15182, 15187, 15189, 15188, 15194, 15195, 15199, 15206, 15216,
   15222, 15233
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_EXISTS_SYM", "COLUMN_GET_SYM", "COLUMN_LIST_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_STATS_SYM", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "server_def", "server_options_list",
  "server_option", "event_tail", "$@11", "ev_schedule_time", "$@12",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@13",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@14",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@15", "$@16",
  "sp_cursor_stmt", "$@17", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "sp_decl_idents", "sp_opt_default", "sp_proc_stmt",
  "sp_proc_stmt_if", "$@18", "sp_proc_stmt_statement", "$@19",
  "sp_proc_stmt_return", "$@20", "sp_proc_stmt_unlabeled", "$@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@23", "$@24", "$@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@26", "$@27",
  "searched_case_stmt", "$@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@29", "$@30",
  "searched_when_clause", "$@31", "$@32", "else_clause_opt",
  "sp_labeled_control", "$@33", "sp_opt_label", "sp_labeled_block", "$@34",
  "sp_unlabeled_block", "$@35", "sp_block_content", "$@36",
  "sp_unlabeled_control", "$@37", "$@38", "$@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "$@42", "create3", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@66", "$@67", "$@68", "$@69", "$@70", "$@71",
  "$@72", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@73", "$@74",
  "$@75", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@76", "add_part_extra", "reorg_partition_rule",
  "$@77", "reorg_parts_rule", "$@78", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@79", "$@80", "$@81", "opt_column", "opt_ignore", "alter_options",
  "$@82", "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@83", "$@84", "start",
  "start_transaction_opts", "slave_thread_opts", "$@85",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@86", "opt_checksum_type", "repair",
  "$@87", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@88", "binlog_base64_event", "check", "$@89",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@90", "opt_no_write_to_binlog", "rename", "$@91", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@92",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@93",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@94", "cache_keys_spec", "$@95",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@96",
  "select_part2", "$@97", "$@98", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@99", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@100", "$@101", "$@102", "variable", "$@103",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "in_sum_expr", "$@104", "cast_type", "$@105",
  "opt_expr_list", "expr_list", "ident_list_arg", "ident_list", "opt_expr",
  "opt_else", "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@106", "$@107", "$@108", "$@109",
  "$@110", "$@111", "$@112", "normal_join", "table_factor", "$@113",
  "select_derived_union", "$@114", "$@115", "select_init2_derived",
  "select_part2_derived", "$@116", "$@117", "select_derived", "$@118",
  "select_derived2", "$@119", "$@120", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@121", "$@122",
  "index_hints_list", "opt_index_hints_list", "$@123",
  "opt_key_definition", "$@124", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@125", "having_clause", "$@126", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@127", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@128", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@129",
  "select_var_list", "select_var_ident", "into", "$@130",
  "into_destination", "$@131", "$@132", "do", "$@133", "drop", "$@134",
  "$@135", "$@136", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@137",
  "$@138", "replace", "$@139", "$@140", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@141", "fields", "insert_values", "$@142", "$@143", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@144", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@145", "update", "$@146", "$@147", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@148", "single_multi", "$@149", "$@150", "$@151", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@152", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@153", "show_param",
  "$@154", "$@155", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@156", "$@157", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@158",
  "flush_options", "$@159", "$@160", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@161", "reset_options",
  "reset_option", "$@162", "slave_reset_options", "purge", "$@163",
  "purge_options", "purge_option", "kill", "$@164", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@165", "$@166", "$@167",
  "$@168", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@169", "opt_option", "option_value_list", "option_type_value",
  "$@170", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@171",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@172", "handler", "$@173", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@174",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@175", "$@176", "$@177",
  "$@178", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@179", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@180",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@181",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@182", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@183",
  "view_list_opt", "view_list", "view_select", "$@184", "view_select_aux",
  "view_check_option", "trigger_tail", "$@185", "$@186", "$@187",
  "udf_tail", "sf_tail", "$@188", "$@189", "$@190", "$@191", "$@192",
  "sp_tail", "$@193", "$@194", "$@195", "$@196", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@197", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   124,    38,
      45,    43,    42,    47,    37,    94,   126,    40,    41,    44,
      33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   637,   638,   639,   638,   638,   640,   640,   641,   641,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   643,   644,   644,   645,   646,   646,   648,
     647,   649,   649,   650,   650,   651,   653,   652,   655,   654,
     656,   656,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   658,   658,   658,
     659,   660,   660,   660,   660,   662,   661,   663,   661,   664,
     661,   665,   661,   666,   661,   667,   661,   661,   661,   661,
     661,   668,   669,   669,   670,   670,   670,   670,   670,   670,
     670,   672,   671,   674,   673,   673,   675,   675,   675,   675,
     676,   676,   677,   677,   678,   678,   679,   679,   680,   680,
     682,   681,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   684,   685,   685,   686,   686,
     687,   687,   688,   688,   688,   688,   688,   688,   688,   689,
     689,   689,   690,   690,   692,   691,   693,   693,   694,   694,
     695,   695,   696,   696,   697,   697,   698,   699,   700,   700,
     701,   701,   702,   703,   703,   703,   703,   704,   704,   705,
     705,   706,   706,   708,   707,   707,   709,   707,   707,   711,
     710,   712,   712,   713,   713,   714,   715,   715,   716,   717,
     717,   718,   718,   718,   718,   718,   719,   720,   720,   721,
     721,   722,   722,   723,   723,   724,   724,   724,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     726,   727,   727,   728,   728,   729,   729,   729,   729,   729,
     729,   729,   729,   729,   729,   729,   729,   729,   731,   730,
     733,   732,   735,   734,   737,   736,   738,   739,   740,   742,
     741,   743,   744,   744,   744,   745,   745,   747,   748,   749,
     746,   750,   750,   750,   751,   751,   753,   754,   752,   756,
     755,   757,   757,   758,   758,   760,   761,   759,   763,   764,
     762,   765,   765,   767,   766,   768,   768,   770,   769,   772,
     771,   774,   773,   775,   776,   777,   775,   778,   775,   779,
     779,   780,   780,   780,   781,   782,   783,   784,   784,   785,
     785,   786,   787,   788,   788,   790,   789,   791,   791,   791,
     792,   792,   792,   793,   794,   794,   794,   795,   795,   795,
     795,   795,   795,   795,   795,   796,   797,   797,   797,   798,
     798,   798,   798,   798,   799,   800,   800,   800,   801,   801,
     801,   801,   801,   801,   801,   802,   803,   803,   803,   804,
     804,   804,   805,   806,   807,   808,   809,   810,   810,   810,
     811,   812,   813,   814,   815,   816,   817,   818,   819,   820,
     820,   821,   821,   822,   822,   823,   823,   823,   823,   825,
     824,   826,   824,   827,   828,   827,   829,   827,   830,   831,
     831,   833,   832,   834,   836,   835,   837,   838,   839,   838,
     838,   838,   838,   838,   840,   840,   841,   841,   842,   842,
     843,   844,   845,   846,   847,   847,   848,   849,   848,   850,
     848,   851,   851,   852,   853,   854,   854,   855,   855,   856,
     856,   858,   857,   859,   860,   861,   860,   862,   860,   863,
     863,   864,   864,   865,   865,   867,   868,   866,   869,   869,
     870,   870,   871,   871,   872,   872,   874,   873,   875,   876,
     876,   877,   877,   878,   878,   878,   878,   878,   878,   878,
     878,   878,   880,   881,   879,   882,   882,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   887,   888,   889,   889,
     890,   890,   891,   891,   892,   892,   892,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   894,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   895,   896,
     897,   898,   899,   899,   899,   899,   899,   899,   899,   900,
     900,   900,   901,   901,   902,   902,   902,   902,   903,   904,
     904,   905,   905,   906,   906,   908,   907,   909,   907,   910,
     907,   911,   907,   907,   907,   912,   912,   913,   914,   914,
     915,   917,   916,   918,   918,   919,   919,   920,   920,   920,
     921,   921,   922,   922,   923,   923,   923,   924,   925,   926,
     926,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   927,   926,   928,   926,   926,   926,
     929,   929,   929,   929,   929,   929,   929,   929,   930,   931,
     931,   932,   932,   933,   933,   933,   933,   933,   934,   934,
     934,   934,   934,   935,   935,   935,   936,   936,   936,   937,
     938,   938,   939,   939,   940,   940,   940,   941,   941,   941,
     941,   942,   942,   943,   943,   944,   944,   945,   945,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   947,   948,   948,   949,   949,   950,
     950,   951,   951,   952,   952,   953,   953,   954,   954,   955,
     956,   956,   957,   957,   958,   958,   959,   959,   959,   960,
     960,   960,   961,   961,   961,   961,   961,   961,   961,   962,
     962,   963,   963,   964,   965,   965,   966,   966,   967,   967,
     967,   967,   968,   968,   968,   968,   968,   969,   969,   969,
     969,   969,   970,   971,   971,   972,   972,   973,   973,   974,
     974,   974,   975,   975,   976,   977,   978,   979,   979,   980,
     980,   981,   981,   982,   982,   983,   983,   984,   984,   985,
     985,   986,   986,   987,   987,   987,   987,   987,   987,   988,
     988,   989,   990,   990,   991,   991,   991,   992,   992,   993,
     993,   994,   994,   995,   995,   996,   996,   998,   997,   999,
     997,   997,  1000,   997,  1001,   997,  1002,   997,  1003,   997,
    1004,   997,   997,   997,   997,   997,   997,  1005,  1005,  1005,
    1005,  1006,  1006,  1007,  1007,  1008,  1008,  1009,  1009,  1009,
    1009,  1009,  1009,  1009,  1009,  1009,  1009,  1010,  1009,  1009,
    1011,  1009,  1012,  1009,  1009,  1009,  1009,  1013,  1014,  1014,
    1016,  1015,  1017,  1017,  1017,  1019,  1018,  1020,  1021,  1020,
    1022,  1022,  1023,  1024,  1024,  1025,  1026,  1026,  1026,  1027,
    1026,  1028,  1029,  1026,  1026,  1026,  1026,  1026,  1026,  1026,
    1026,  1026,  1026,  1026,  1026,  1026,  1026,  1030,  1030,  1031,
    1031,  1033,  1032,  1034,  1034,  1035,  1035,  1036,  1036,  1037,
    1037,  1037,  1038,  1038,  1038,  1039,  1039,  1039,  1039,  1041,
    1040,  1040,  1042,  1040,  1040,  1043,  1044,  1044,  1046,  1045,
    1047,  1047,  1048,  1048,  1048,  1049,  1049,  1050,  1050,  1052,
    1051,  1053,  1053,  1053,  1055,  1054,  1056,  1056,  1057,  1057,
    1058,  1058,  1058,  1060,  1059,  1061,  1063,  1062,  1064,  1064,
    1065,  1065,  1066,  1066,  1066,  1066,  1066,  1066,  1068,  1067,
    1069,  1069,  1069,  1071,  1070,  1070,  1072,  1072,  1073,  1073,
    1074,  1076,  1075,  1077,  1077,  1078,  1078,  1079,  1080,  1081,
    1081,  1083,  1082,  1084,  1084,  1085,  1085,  1086,  1087,  1089,
    1088,  1091,  1090,  1092,  1092,  1093,  1093,  1094,  1095,  1095,
    1096,  1096,  1097,  1097,  1099,  1098,  1101,  1102,  1100,  1103,
    1103,  1103,  1103,  1103,  1104,  1104,  1105,  1105,  1106,  1106,
    1107,  1107,  1107,  1108,  1108,  1108,  1109,  1109,  1109,  1110,
    1110,  1111,  1112,  1113,  1113,  1113,  1113,  1113,  1114,  1114,
    1114,  1115,  1115,  1116,  1116,  1116,  1116,  1116,  1116,  1116,
    1116,  1116,  1116,  1116,  1117,  1117,  1117,  1117,  1117,  1117,
    1118,  1118,  1118,  1118,  1118,  1118,  1118,  1118,  1118,  1118,
    1118,  1118,  1118,  1118,  1119,  1119,  1119,  1119,  1119,  1119,
    1119,  1119,  1119,  1119,  1119,  1119,  1119,  1119,  1119,  1120,
    1120,  1121,  1121,  1122,  1122,  1123,  1123,  1124,  1124,  1124,
    1124,  1124,  1124,  1125,  1125,  1126,  1126,  1127,  1127,  1127,
    1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1128,  1129,
    1129,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1132,  1132,
    1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,
    1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,
    1132,  1132,  1132,  1132,  1132,  1132,  1133,  1133,  1133,  1133,
    1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,
    1133,  1133,  1133,  1133,  1134,  1134,  1134,  1134,  1134,  1134,
    1134,  1134,  1136,  1135,  1135,  1137,  1137,  1138,  1138,  1139,
    1139,  1140,  1140,  1141,  1141,  1142,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1144,  1145,  1143,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1143,  1143,  1143,  1146,  1143,  1148,  1147,
    1149,  1149,  1149,  1150,  1150,  1151,  1151,  1152,  1152,  1154,
    1153,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1156,  1155,  1157,  1157,  1158,  1158,  1159,
    1159,  1160,  1160,  1161,  1161,  1162,  1162,  1163,  1163,  1164,
    1164,  1165,  1166,  1166,  1167,  1167,  1168,  1168,  1169,  1168,
    1170,  1168,  1171,  1168,  1168,  1172,  1168,  1173,  1168,  1168,
    1174,  1168,  1175,  1168,  1168,  1176,  1176,  1176,  1178,  1177,
    1177,  1177,  1179,  1180,  1181,  1179,  1182,  1184,  1185,  1183,
    1187,  1186,  1189,  1190,  1188,  1191,  1192,  1193,  1193,  1194,
    1194,  1194,  1194,  1195,  1195,  1197,  1196,  1198,  1196,  1199,
    1199,  1200,  1201,  1200,  1203,  1202,  1204,  1204,  1205,  1205,
    1206,  1206,  1207,  1207,  1208,  1208,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1208,  1208,  1208,  1209,  1209,  1209,  1209,
    1209,  1209,  1209,  1209,  1209,  1210,  1210,  1210,  1210,  1211,
    1211,  1211,  1212,  1212,  1213,  1213,  1214,  1215,  1214,  1216,
    1217,  1216,  1218,  1218,  1219,  1219,  1220,  1220,  1221,  1221,
    1221,  1222,  1223,  1223,  1224,  1225,  1225,  1227,  1226,  1228,
    1228,  1229,  1229,  1229,  1230,  1230,  1231,  1231,  1232,  1232,
    1232,  1233,  1233,  1233,  1234,  1234,  1234,  1234,  1234,  1235,
    1236,  1236,  1236,  1236,  1237,  1237,  1237,  1238,  1238,  1238,
    1238,  1238,  1238,  1239,  1239,  1239,  1239,  1239,  1240,  1240,
    1240,  1240,  1240,  1241,  1241,  1241,  1241,  1241,  1242,  1243,
    1243,  1244,  1244,  1245,  1246,  1245,  1247,  1247,  1248,  1248,
    1249,  1251,  1250,  1252,  1252,  1253,  1253,  1255,  1254,  1257,
    1258,  1256,  1256,  1256,  1260,  1259,  1262,  1261,  1263,  1261,
    1261,  1261,  1261,  1261,  1261,  1264,  1261,  1261,  1261,  1261,
    1261,  1261,  1265,  1265,  1266,  1267,  1267,  1268,  1269,  1269,
    1270,  1270,  1272,  1273,  1271,  1275,  1276,  1274,  1277,  1277,
    1277,  1277,  1278,  1278,  1279,  1279,  1280,  1281,  1281,  1281,
    1282,  1281,  1283,  1283,  1284,  1284,  1285,  1284,  1286,  1284,
    1287,  1287,  1288,  1288,  1289,  1290,  1290,  1291,  1291,  1293,
    1292,  1294,  1294,  1295,  1295,  1296,  1296,  1297,  1298,  1297,
    1300,  1301,  1299,  1302,  1302,  1303,  1304,  1304,  1305,  1306,
    1306,  1308,  1307,  1310,  1309,  1311,  1309,  1312,  1309,  1313,
    1313,  1314,  1314,  1315,  1315,  1316,  1316,  1317,  1317,  1317,
    1319,  1318,  1320,  1320,  1321,  1321,  1322,  1322,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1324,  1324,  1326,
    1325,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1328,  1327,  1329,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1330,  1330,  1330,  1331,  1331,  1332,  1332,  1333,
    1333,  1334,  1334,  1335,  1335,  1336,  1336,  1337,  1337,  1338,
    1338,  1338,  1340,  1339,  1341,  1339,  1342,  1342,  1343,  1343,
    1343,  1344,  1344,  1344,  1346,  1345,  1348,  1349,  1347,  1347,
    1350,  1350,  1351,  1351,  1352,  1352,  1352,  1352,  1352,  1352,
    1352,  1352,  1352,  1352,  1352,  1352,  1352,  1352,  1352,  1352,
    1352,  1352,  1352,  1353,  1353,  1354,  1354,  1356,  1355,  1357,
    1357,  1359,  1358,  1358,  1358,  1360,  1360,  1362,  1361,  1363,
    1364,  1364,  1366,  1365,  1367,  1367,  1367,  1368,  1368,  1368,
    1369,  1369,  1370,  1372,  1373,  1374,  1375,  1371,  1376,  1376,
    1377,  1377,  1378,  1378,  1378,  1379,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1382,  1382,  1382,  1383,  1383,  1384,  1384,
    1385,  1385,  1386,  1386,  1387,  1387,  1388,  1388,  1389,  1389,
    1389,  1390,  1390,  1391,  1391,  1392,  1392,  1393,  1393,  1394,
    1395,  1395,  1395,  1395,  1396,  1396,  1396,  1397,  1398,  1398,
    1398,  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1399,
    1399,  1399,  1399,  1400,  1400,  1400,  1400,  1400,  1401,  1401,
    1402,  1402,  1403,  1404,  1404,  1405,  1405,  1406,  1406,  1406,
    1407,  1407,  1407,  1407,  1408,  1408,  1408,  1409,  1409,  1410,
    1411,  1411,  1412,  1413,  1414,  1415,  1415,  1416,  1416,  1417,
    1417,  1417,  1418,  1418,  1418,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,  1419,
    1419,  1419,  1419,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1422,  1421,  1423,  1423,  1424,
    1424,  1426,  1425,  1427,  1427,  1427,  1427,  1428,  1428,  1429,
    1429,  1429,  1429,  1430,  1430,  1430,  1430,  1431,  1431,  1432,
    1432,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1434,  1434,
    1434,  1435,  1435,  1435,  1435,  1436,  1436,  1436,  1437,  1437,
    1437,  1437,  1437,  1439,  1438,  1440,  1440,  1441,  1441,  1442,
    1443,  1443,  1443,  1443,  1443,  1445,  1444,  1446,  1446,  1447,
    1446,  1448,  1448,  1449,  1449,  1450,  1450,  1450,  1450,  1451,
    1450,  1452,  1452,  1452,  1452,  1452,  1453,  1454,  1454,  1454,
    1454,  1454,  1455,  1456,  1456,  1456,  1456,  1457,  1457,  1458,
    1458,  1459,  1459,  1460,  1460,  1462,  1461,  1463,  1461,  1464,
    1461,  1465,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,
    1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,
    1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1466,
    1466,  1467,  1467,  1468,  1468,  1468,  1469,  1469,  1469,  1469,
    1470,  1470,  1471,  1471,  1472,  1472,  1473,  1473,  1474,  1474,
    1474,  1474,  1474,  1475,  1475,  1476,  1476,  1477,  1478,  1478,
    1478,  1478,  1478,  1479,  1479,  1480,  1480,  1481,  1481,  1482,
    1482,  1482,  1482,  1482,  1484,  1483,  1485,  1485,  1486,  1486,
    1486,  1487,  1487,  1487,  1488,  1488,  1489,  1490,  1490,  1491,
    1492,  1493,  1493,  1495,  1494,  1496,  1496,  1496,  1497,  1497,
    1499,  1498,  1500,  1500,  1501,  1501,  1501,  1502,  1502,  1503,
    1504,  1503,  1505,  1506,  1507,  1508,  1508,  1509,  1509,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1511,  1511,  1511,
    1512,  1512,  1512,  1512,  1512,  1513,  1513,  1513,  1513,  1513,
    1513,  1514,  1514,  1515,  1516,  1517,  1517,  1517,  1518,  1519,
    1519,  1519,  1520,  1520,  1520,  1522,  1521,  1523,  1523,  1524,
    1524,  1526,  1525,  1527,  1527,  1528,  1528,  1528,  1528,  1530,
    1531,  1532,  1529,  1533,  1533,  1535,  1536,  1537,  1538,  1539,
    1534,  1541,  1542,  1543,  1544,  1540,  1545,  1545,  1545,  1545,
    1545,  1545,  1546,  1546,  1546,  1547,  1547,  1548,  1548,  1548,
    1549,  1549,  1550,  1551,  1550,  1552,  1552,  1553,  1553,  1554,
    1554,  1555
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     0,     7,     0,    12,     0,
      12,     0,    12,     0,     6,     0,     3,     4,     4,     3,
       2,    10,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     0,    13,     0,     6,     2,     0,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     3,     4,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     0,     2,
       0,     2,     2,     2,     2,     2,     3,     3,     1,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     4,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     3,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
       0,     2,     0,     3,     0,     2,     2,     2,     2,     0,
       6,     2,     0,     2,     1,     1,     3,     0,     0,     0,
       7,     0,     2,     2,     1,     1,     0,     0,     8,     0,
       6,     1,     2,     1,     2,     0,     0,     6,     0,     0,
       6,     0,     2,     0,     5,     0,     1,     0,     5,     0,
       2,     0,     5,     4,     0,     0,     8,     0,     7,     1,
       1,     1,     1,     1,     2,     4,     5,     0,     4,     4,
       4,     3,     3,     2,     2,     0,     2,     1,     2,     3,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     4,     0,
       1,     1,     1,     1,     1,     2,     3,     2,     4,     0,
       6,     0,     5,     0,     0,     5,     0,     7,     1,     0,
       1,     0,     4,     0,     0,     3,     5,     5,     0,     4,
       2,     2,     2,     2,     0,     1,     0,     1,     1,     3,
       1,     4,     5,     5,     0,     2,     0,     0,     7,     0,
       9,     1,     3,     1,     1,     0,     2,     0,     3,     1,
       3,     0,     6,     1,     0,     0,     5,     0,     4,     1,
       1,     1,     3,     1,     3,     0,     0,     5,     1,     3,
       1,     1,     0,     3,     1,     3,     0,     4,     1,     0,
       1,     2,     1,     3,     4,     3,     3,     3,     3,     4,
       4,     3,     0,     0,     6,     0,     1,     0,     1,     1,
       2,     1,     1,     0,     1,     1,     2,     1,     0,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     0,     6,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     0,     8,     0,     9,     0,
       9,     0,     9,     8,     2,     0,     1,     4,     0,     1,
       2,     0,     3,     2,     8,     0,     2,     0,     1,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     3,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     2,     2,     2,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     1,     3,     2,     1,     2,     2,     2,
       3,     3,     3,     3,     2,     2,     1,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     0,     1,     1,     2,     2,     1,
       2,     2,     0,     1,     1,     1,     3,     1,     3,     0,
       1,     0,     1,     5,     0,     3,     3,     1,     0,     2,
       2,     2,     0,     3,     3,     6,     6,     1,     1,     2,
       2,     2,     1,     2,     2,     1,     1,     0,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     1,     2,     0,
       1,     0,     1,     0,     1,     1,     2,     1,     2,     1,
       2,     2,     2,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     0,     2,     1,     3,     0,     6,     0,
       5,     7,     0,     5,     0,     5,     0,     5,     0,     4,
       0,    10,     3,     4,     3,     3,     7,     0,     3,     1,
       4,     0,     3,     0,     2,     0,     1,     0,     2,     2,
       2,     2,     1,     1,     1,     3,     4,     0,     6,     4,
       0,     5,     0,     6,     4,     3,     1,     2,     1,     1,
       0,     5,     0,     3,     2,     0,     5,     0,     0,     6,
       1,     3,     1,     1,     3,     2,     3,     2,     4,     0,
       6,     0,     0,     7,     4,     4,     3,     3,     2,     2,
       6,     5,     3,     5,     1,     1,     1,     0,     1,     0,
       1,     0,     2,     0,     1,     2,     1,     1,     1,     0,
       1,     1,     0,     2,     1,     0,     1,     1,     1,     0,
       5,     3,     0,     5,     3,     3,     0,     3,     0,     2,
       1,     3,     0,     1,     1,     0,     2,     1,     3,     0,
       5,     0,     1,     1,     0,     6,     0,     1,     1,     2,
       1,     1,     1,     0,     5,     2,     0,     5,     0,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     0,     5,
       0,     1,     1,     0,     4,     4,     3,     5,     1,     3,
       3,     0,     6,     1,     1,     1,     3,     2,     3,     1,
       1,     0,     6,     1,     1,     1,     3,     3,     4,     0,
       6,     0,     2,     0,     4,     0,     2,     1,     2,     4,
       2,     3,     2,     3,     0,     3,     0,     0,     6,     2,
       1,     1,     2,     2,     8,     4,     0,     1,     2,     1,
       1,     1,     1,     0,     2,     4,     3,     1,     1,     3,
       4,     0,     0,     0,     2,     2,     1,     1,     0,     2,
       3,     0,     2,     3,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     4,     3,     3,     6,     1,
       5,     6,     5,     7,     6,     8,     5,     6,     4,     4,
       5,     3,     4,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     1,     2,     1,
       1,     1,     2,     2,     1,     1,     2,     2,     4,     1,
       3,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     3,     2,     2,     2,     2,     3,     3,     5,     6,
       4,     4,     7,     2,     6,     5,     6,     6,     4,     4,
       5,     4,     6,     2,     4,     4,     4,    10,     6,     8,
       6,     4,     4,     6,     4,     4,     4,     6,     4,     7,
       7,     7,     6,     6,     6,     6,     3,     4,     6,     8,
       2,     2,     8,     8,     6,     6,     2,     6,     6,     8,
       8,     6,     8,     6,     2,     8,     8,     2,     2,     2,
       6,     6,     6,     4,     4,     8,     4,     4,     4,     4,
       3,     8,     4,     4,     6,     4,     4,     4,     6,     8,
       6,     4,     6,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     1,     0,
       3,     2,     3,     2,     1,     1,     2,     1,     2,     1,
       2,     2,     2,     0,     3,     0,     1,     1,     3,     1,
       3,     1,     3,     0,     1,     0,     2,     4,     5,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     0,     6,
       0,     6,     0,     8,     4,     0,     8,     0,    10,     6,
       0,     8,     0,    10,     6,     1,     2,     2,     0,     4,
       3,     5,     2,     0,     0,     7,     1,     0,     0,     6,
       0,     3,     0,     0,     5,     0,     1,     0,     1,     0,
       2,     3,     3,     1,     1,     0,     7,     0,     7,     1,
       2,     0,     0,     2,     0,     2,     0,     1,     1,     1,
       1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     0,     2,     0,     1,     0,     0,     3,     0,
       0,     3,     2,     0,     0,     4,     4,     2,     0,     1,
       1,     3,     3,     1,     2,     0,     1,     0,     4,     4,
       2,     0,     1,     1,     0,     1,     0,     1,     2,     5,
       4,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       0,     2,     3,     4,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     0,     6,     0,     1,     3,     1,
       3,     0,     2,     3,     1,     2,     1,     0,     3,     0,
       0,     7,     2,     1,     0,     3,     0,     7,     0,     6,
       4,     6,     4,     4,     4,     0,     6,     4,     4,     5,
       6,     4,     1,     3,     1,     1,     3,     1,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     6,     0,     5,     0,     6,     1,
       3,     2,     4,     0,     2,     0,     2,     1,     1,     1,
       0,     4,     0,     1,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     0,
       3,     2,     4,     4,     3,     4,     4,     1,     3,     3,
       6,     2,     2,     0,     6,     0,     6,     5,     2,     1,
       1,     1,     5,     5,     2,     2,     1,     4,     3,     2,
       3,     2,     2,     1,     3,     4,     3,     3,     2,     2,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     0,     1,     0,
       2,     0,     1,     1,     1,     0,     2,     0,     2,     0,
       2,     2,     0,     4,     0,     4,     1,     1,     0,     1,
       1,     0,     1,     1,     0,     4,     0,     0,     5,     1,
       0,     4,     3,     1,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     0,     3,     0,     3,     3,
       1,     0,     3,     1,     2,     0,     1,     0,     3,     3,
       2,     2,     0,     5,     0,     1,     1,     0,     1,     1,
       1,     2,     2,     0,     0,     0,     0,    21,     1,     1,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     4,     0,     3,     1,     1,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     3,     1,     5,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     0,     1,     1,
       3,     0,     2,     1,     1,     1,     1,     0,     1,     0,
       1,     1,     1,     0,     2,     2,     2,     1,     2,     4,
       5,     4,     6,     2,     3,     3,     3,     5,     1,     3,
       3,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     4,     1,     1,     1,     3,     3,
       1,     1,     2,     2,     2,     0,     3,     4,     3,     0,
       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     1,     1,     1,     1,     3,     6,     6,     6,
       7,     5,     3,     8,     8,     8,     6,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     1,     1,     1,     1,     4,     5,
       4,     6,     1,     0,     3,     3,     1,     1,     0,     2,
       2,     2,     2,     0,     2,     0,     3,     2,     1,     2,
       2,     2,     2,     2,     0,     3,     0,     1,     0,     3,
       2,     0,     1,     2,     0,     1,     4,     4,     5,     2,
       3,     0,     1,     0,     4,     0,     1,     1,     0,     1,
       0,     2,     2,     1,     0,     1,     1,     2,     3,     2,
       0,     6,     3,     0,     0,     0,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     2,     1,     2,     3,
       3,     3,     0,     3,     3,     0,     7,     0,     3,     1,
       3,     0,     3,     2,     4,     0,     3,     4,     4,     0,
       0,     0,    16,     8,     7,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,    12,     4,     4,     3,     4,
       3,     2,     1,     3,     5,     1,     1,     0,     1,     1,
       0,     2,     0,     0,     3,     0,     2,     5,     3,     3,
       3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   951,  1020,  2484,     0,     0,     0,     0,     0,     0,
    2486,   115,    64,  1661,  1776,  1777,  1574,  1600,     2,     0,
    1020,   165,     0,    76,  1602,     0,  1832,     0,     0,  1020,
       0,   444,     0,  1827,     0,     0,  1020,  1605,  1817,   239,
     165,  2486,     0,  1066,  2307,  1699,     0,     0,     0,     0,
    1682,     0,  2365,  1650,     0,     0,  2621,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1057,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1778,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   885,
       0,     0,     0,     0,     0,     0,     0,   953,   868,  2551,
    2552,  2553,  1022,  1021,     0,  2486,  1942,  1005,  1031,  2013,
    2014,  2015,  2016,  2017,  2018,  2019,  2020,  1956,  2021,  2022,
    2024,  2023,  2025,  2026,  1957,  1958,  2027,  2028,  2029,  2031,
    2030,  2032,  1959,  1960,  2033,  2034,  2035,  2036,  1961,  1963,
    1962,  2037,  2040,  2039,  2038,  1964,  2041,  2042,  2043,  2045,
    1965,  1966,  1967,  1968,  1969,  1970,  2044,  1971,  2046,  1972,
    2047,  2048,  2049,  2050,  2051,  2052,  2053,  2055,  2054,  1973,
    2056,  2057,  2058,  2059,  2060,  2062,  2061,  2063,  2064,  2065,
    1974,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  1975,  2073,
    2074,  2075,  2092,  1976,  2076,  2079,  2078,  2077,  2080,  2081,
    2082,  2084,  2083,  2085,  1977,  1978,  2086,  2087,  2088,  2090,
    2089,  2094,  2095,  2096,  1979,  2091,  2093,  2283,  2097,  2098,
    2100,  2099,  2101,  2103,  2102,  1980,  2105,  2104,  1981,  1982,
    2106,  2107,  1940,  2108,  1941,  2109,  2112,  2113,  2110,  2114,
    2119,  1983,  2111,  2115,  2116,  2117,  2118,  2120,  1984,  2122,
    2121,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,
    2142,  2135,  2137,  2138,  2140,  2136,  2141,  2145,  2144,  2146,
    2147,  2148,  2143,  2133,  2139,  2134,  2149,  2150,  2132,  2151,
    2152,  2153,  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,
    2163,  2162,  2164,  2165,  2166,  2167,  2168,  2169,  2171,  2170,
    2172,  2173,  2174,  2176,  2175,  2178,  2179,  1985,  2177,  2180,
    2181,  2182,  2183,  2184,  2185,  1986,  1987,  1988,  2186,  2187,
    1989,  2188,  2189,  2190,  1990,  2191,  2192,  2193,  2195,  2194,
    2196,  2197,  1991,  1992,  2198,  2199,  2200,  2201,  2202,  2203,
    2204,  2205,  2206,  2207,  2208,  2209,  2210,  2211,  2213,  2212,
    2214,  2215,  2216,  2217,  2218,  2219,  2220,  1993,  2221,  1994,
    2222,  2223,  1995,  2224,  1996,  2225,  2226,  1997,  2227,  2228,
    2229,  2230,  2231,  2232,  1998,  2233,  2234,  2235,  1999,  2237,
    2236,  2238,  2000,  2240,  2241,  2001,  2239,  2003,  2242,  2243,
    2002,  2244,  2004,  2245,  2246,  2248,  2247,  2249,  2250,  2251,
    2005,  2252,  2006,  2253,  2254,  2255,  2256,  2257,  2259,  2258,
    2260,  2261,  2262,  2263,  2266,  2268,  2265,  2267,  2264,  2269,
    2270,  2271,  2272,  2276,  2277,  2278,  2279,  2273,  2274,  2275,
    2007,  2280,  2281,  2282,  2284,  2285,  2287,  2286,  2008,  2009,
    2288,  2289,  2012,  2290,  2291,  2292,  2296,  2293,  2304,  2294,
    2295,  2298,  2297,  2299,  2300,  2010,  2301,  2011,  2302,  2303,
     184,  1945,   167,  1946,  1955,     0,  2356,  2355,   989,  1006,
    2487,  2488,   538,   814,     0,     0,   815,     0,   537,   813,
     165,  2553,   120,     0,   534,   535,     0,     0,     0,  1675,
       0,  1598,  1598,  1598,     0,     0,  1598,  1598,     0,  1601,
    1598,   165,  1598,     0,    69,  1784,     0,     0,     0,     0,
    1939,     0,  1608,     0,     0,  1834,  1848,     0,  1849,  1843,
    2353,     0,  1091,     0,     0,     0,     0,   165,  1023,     0,
    1659,     0,   229,   238,   240,   241,   237,     0,  2488,  2499,
    1058,  1064,  1076,  2308,  2305,  1761,   241,   978,   978,   978,
     976,   978,  1683,  1680,     0,     0,     0,  1659,  1842,  2605,
       0,     0,     0,  2601,     0,  2606,     0,  1066,     0,     0,
       1,     5,     0,     0,  2087,  2190,  1774,  1772,  1934,     0,
     859,   886,     0,   864,     0,   862,  1951,  1950,  1949,     0,
     875,   874,   872,     0,   405,     0,   957,   958,   952,   954,
     956,     0,  2562,   866,  1003,  2485,     0,   186,     0,    78,
       0,     0,     0,  2491,     0,     0,     0,     0,   119,     0,
       0,     0,   116,  1091,  1091,  2553,  2555,  2557,   538,   536,
       0,     0,     0,  1679,  1678,  1677,     0,  1675,  2014,  1956,
    2026,     0,  1907,     0,     0,     0,  1363,     0,  1961,     0,
    2041,  2043,  1965,  1966,  1967,  1968,  1969,  1970,  1973,     0,
       0,  1101,  1101,  1098,     0,     0,     0,  2064,  2065,  1916,
       0,     0,     0,  1904,  1917,  2100,  2101,     0,  1906,  2107,
       0,     0,     0,  2121,     0,  2126,  1914,     0,     0,  2158,
    2160,     0,     0,  2164,  2165,  2166,  2167,  1891,  1156,     0,
    1098,  1903,  1913,  2182,  1897,  2191,  2196,  2197,     0,  2206,
       0,     0,     0,  2231,  2235,     0,     0,  2256,     0,     0,
    1098,  1890,  2276,  2277,  2278,  2279,     0,  1905,  2007,  1915,
       0,  2290,  1101,  1098,  1098,     0,     0,     0,  2299,  2303,
       0,     0,     0,  2523,  1155,     0,  1328,     0,  1357,  1113,
    1119,  1133,     0,  1148,  1182,  1183,  1185,  1283,  1184,  1190,
    1189,  1575,  1901,  1188,  1187,  1902,  1181,  1924,  1945,  1923,
       0,     0,     0,     0,     0,     0,     0,     0,  1757,     0,
       0,  1585,  1598,    71,     0,  2401,  2416,  2417,  2413,  2418,
    2436,  2419,  2423,     0,  2415,  2407,     0,  2422,     0,  2411,
    2420,     0,  2405,     0,  2421,  2426,  2437,  2409,  2414,  2392,
       0,  2399,  2403,  1936,  1469,  2368,  2369,     0,    77,  1610,
    1611,  1609,   949,     0,  2618,  1835,  1836,  1837,     0,  1852,
       0,  1018,     0,     0,   454,   445,     0,  1756,  1755,     0,
    1828,  2500,     0,     0,   994,  1613,  1660,     0,  1612,  1823,
       0,  1821,  1818,  1820,   230,     0,     0,   260,  2401,     0,
    2386,     0,  2494,  2491,  2501,  2536,  2531,  2530,  2533,  2534,
    1082,  2535,  1081,  2532,  2529,  1091,  1077,  1079,  1080,  2311,
    1719,     0,   748,     0,  1740,  1769,  1720,     0,     0,  1769,
       0,  1504,  1759,  1762,     0,  2320,  1733,   811,   810,  1743,
     809,  2321,  1755,     0,  1707,  1721,     0,  1684,  1726,     0,
    2322,     0,  1758,  1742,     0,  1741,  1504,  1769,     0,  1700,
       0,     0,     0,     0,   236,   972,   982,   974,   969,     0,
     975,   971,     0,  2619,  2620,  2366,   949,  1896,  1895,  1943,
    2602,  1894,  2610,  2612,  2598,  2600,  2607,  1060,     0,  2505,
       6,    63,     0,  1781,  2560,  2561,  2559,   764,     0,  1101,
    1952,  2554,   168,   873,     0,   406,   168,     0,     0,     0,
       0,     0,   407,   408,   344,   857,   955,   870,     0,     0,
     869,  2562,     0,     0,  1033,  1035,  1034,  1051,   188,   185,
     166,     0,   991,  1592,  1594,  1008,  2490,     0,     0,  2492,
    2496,  1154,  1153,     0,   113,   118,     0,     0,     0,  2462,
     117,  2452,  2558,  1091,  1091,  1091,  2550,     0,  2538,  2545,
    2546,  2549,  2548,  2547,  2544,     0,  2537,  2540,  2541,  2543,
    2542,  2562,  2556,     0,   816,   816,   816,     0,  1662,  1665,
    1669,  1673,  1676,     0,     0,  1474,  1203,  1474,  1474,  1474,
    1364,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1474,     0,  1240,  1213,     0,
    1241,     0,     0,     0,     0,     0,  1910,     0,     0,  2523,
       0,     0,     0,  1333,     0,     0,     0,  2523,     0,     0,
       0,     0,     0,     0,  1359,  1361,  1923,  1474,     0,     0,
    1474,     0,     0,     0,     0,     0,  1106,  1246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1474,
    1474,     0,     0,  1474,  1254,     0,  1912,     0,     0,     0,
    1911,     0,     0,  1909,  1908,  1892,     0,  1257,  1259,  1258,
       0,  1474,  1474,     0,     0,  1193,  1192,  1194,     0,     0,
       0,     0,     0,     0,  1152,  1151,  1150,  1149,     0,     0,
       0,  1157,     0,  1158,  1159,     0,  1160,  1161,  1162,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1195,     0,
       0,     0,  1893,  1292,     0,  1599,  1580,  1587,  1582,     0,
    1757,  1583,  1591,   419,     0,  1588,  2450,  1584,     0,  1576,
       0,    70,     0,  1806,  1811,     0,     0,     0,  1801,  1809,
    1803,  1810,  1802,     0,     0,  1812,  1805,     0,  1804,  1808,
    1807,  1785,  1789,  1793,  1786,  2402,  2400,  2434,  2433,  2438,
       0,  2435,  2431,  2424,  2463,  2428,     0,  2463,  2430,  2429,
    2463,  2425,  2432,  2463,  2397,     0,  1470,  1471,     0,  2367,
       0,  1935,   950,     0,     0,  1838,  1839,     0,  1041,  1853,
    1854,  1850,  1469,  2354,  2357,     0,   637,  1092,   455,     0,
       0,   464,     0,     0,    66,    67,     0,  1025,     0,  1024,
    1028,     0,     0,     0,  1616,  1606,  1615,  1824,  1825,     0,
     228,   253,   248,   256,   250,   252,   251,   257,   258,   259,
     254,   249,   255,   242,     0,  2400,     0,  2397,  2495,     0,
    2497,  2514,  1065,  2502,  1088,  1067,  1087,     0,  1078,  2306,
    2309,  2317,  1765,   747,     0,     0,  1732,     0,   538,     0,
       0,     0,     0,     0,     0,  1701,     0,     0,   581,     0,
    1725,  1505,  1763,  1764,  1769,     0,     0,  1769,     0,  1738,
    1759,     0,  1769,  1696,     0,     0,  1688,  1693,  1689,     0,
    1695,  1694,  1697,  1685,  1686,  1765,  1712,  1739,  1759,  1724,
    1731,     0,  1711,  1718,     0,  1729,  1759,  1759,  1769,  1769,
     985,   984,   983,   979,   980,   985,     0,  1681,  1398,     0,
       0,  2599,  2613,  2597,  2608,  2609,  2596,  1061,  2506,  1059,
    2507,     0,     7,     4,  1775,  1773,  1782,  1783,   765,   764,
     529,   532,   531,     0,     0,  1954,     0,   865,     0,  1757,
     863,     0,     0,  1757,   355,  1757,   409,   764,   877,     0,
       0,   867,  1004,     0,     0,   443,  1051,  1037,  1053,     0,
     189,   191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      79,    80,    96,   993,   992,     0,   990,  1016,  1015,  1013,
       0,  1014,  1012,  1007,  1009,  1010,  2489,  2493,   539,   764,
    1757,     0,   347,     0,     0,     0,     0,     0,   538,     0,
       0,  2539,   105,   817,     0,     0,     0,  1667,  1595,  1663,
    1597,  1934,     0,     0,     0,  1671,     0,     0,  1475,  1474,
       0,  1339,     0,     0,     0,     0,  1365,     0,     0,     0,
       0,     0,     0,     0,  1179,     0,     0,     0,     0,     0,
       0,     0,  1313,     0,  1339,  1102,  1549,  1550,  1534,  1535,
    1533,  1536,  1099,     0,  1537,  1548,  1270,     0,     0,     0,
       0,     0,     0,  1445,  1446,  1447,  1448,  1456,  1449,  1450,
    1451,  1458,  1463,  1452,  1453,  1459,  1460,  1461,  1454,  1462,
    1457,  1455,  1464,     0,  1444,     0,  1467,  1465,  1468,  1466,
       0,  1334,  1326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1474,     0,     0,     0,  1474,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1474,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1236,     0,  1926,  1925,     0,     0,     0,     0,
    1197,     0,  1196,  1407,     0,  2508,  2524,     0,  2323,  1329,
    1331,     0,  1104,  1103,  1105,  1116,  1109,  1114,  1107,  1111,
       0,  1163,  2020,  1117,     0,     0,  1145,  2523,  1483,  1146,
    1131,  1136,  1137,     0,  1134,  1135,     0,  1139,     0,  1138,
    1142,  1143,  1144,  1147,     0,     0,     0,     0,  1186,  1191,
    1358,  1091,  1927,     0,  1578,   419,   422,   421,  1589,   420,
    1637,     0,   959,     0,     0,    72,    74,  1798,  1795,  1794,
    1796,  1800,  1799,  1797,     0,  1813,  2427,     0,  2408,     0,
    2412,  2406,  2410,     0,     0,  2398,     0,  2404,  1473,  2095,
    2175,     0,  1476,  2371,  1603,  2617,  2290,  1840,  1833,     0,
    1851,     0,     0,     0,  1019,   638,     0,  1091,   453,   452,
     451,   450,     0,   466,   448,     0,    68,     0,     0,  1829,
       0,     0,     0,     0,   996,  1614,     0,  1826,  1822,  1819,
       0,     0,     0,     0,     0,     0,     0,  2498,  2516,  2515,
    2503,  1091,  1495,  1092,  1092,  1923,  2311,  2314,  2315,  2318,
    2316,     0,  2313,  2312,  2327,     0,  1767,  1770,  1771,     0,
       0,  1751,  1745,  1744,  1736,  1746,  1737,  1754,  1753,  1752,
    1709,  1708,  1517,  1518,  2229,  1516,  1508,  1511,  1515,  1514,
    1704,  1760,  1750,  1748,  1734,  1769,  1749,  1747,  1690,  1691,
    1692,     0,  1504,     0,  1767,  1769,  1759,     0,  1769,  1769,
    1728,  1730,     0,   973,   982,   970,   977,  1416,  1415,     0,
    1372,     0,  1374,  1371,  1370,  1369,     0,  1415,  2603,  2611,
    2615,     0,  1504,  2513,  2511,   530,  1637,  1637,     0,  1953,
       0,     0,     0,     0,     0,     0,     0,   169,   178,     0,
       0,   353,   354,  1637,   352,   395,   396,   399,   400,   401,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   402,
    1637,  1637,   349,   375,   376,   379,   380,   381,   382,   383,
     345,     0,   350,   947,   947,     0,  1637,  1637,   947,  1637,
       0,     0,  1637,  1637,     0,     0,  1637,     0,     0,   947,
       0,  1637,   945,     0,     0,  1637,  1637,  1637,  1637,   947,
       0,     0,  1637,  1637,   443,  1637,     0,     0,   965,     0,
       0,  1637,     0,     0,  1637,  1637,     0,  1637,   893,   944,
     542,   563,   564,   858,   892,   894,   906,   439,     0,   923,
     946,     0,     0,   879,   881,  2563,  2564,  2565,  1040,  1032,
    1039,  1036,  1051,  1049,  1038,   806,   805,     0,  1052,   187,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1593,  1017,  1011,   114,   764,  1637,  1637,  1637,  1637,   351,
     384,   385,   388,   389,   390,   391,   394,   392,   393,     0,
       0,  1757,     0,  2454,  2455,     0,  2453,     0,  2591,     0,
       0,     0,   167,   540,     0,     0,   818,     0,     0,     0,
       0,     0,  1476,     0,  1937,  1670,  1398,  1674,  1673,     0,
    1266,     0,  1306,     0,  1308,  1309,  1310,     0,     0,     0,
       0,     0,  1267,     0,  1211,  1268,  1269,     0,     0,  1264,
       0,     0,     0,     0,  1263,     0,     0,     0,     0,  1312,
       0,  1100,     0,     0,  1214,  1215,  1208,  1200,     0,  1285,
       0,     0,  1216,     0,     0,     0,     0,  1272,     0,  1286,
    1360,     0,  1362,  1927,     0,  1318,  1273,  1221,     0,  1316,
       0,  1222,  1287,  1288,  1289,  1275,  1276,     0,  1291,     0,
    1277,     0,     0,     0,     0,  1224,  1322,  1320,     0,     0,
       0,     0,  1324,  1226,     0,     0,     0,  1225,     0,     0,
       0,     0,     0,     0,     0,  1228,     0,  1209,  1321,  1323,
    1281,     0,  1237,     0,  2517,  1406,  2525,  1407,     0,     0,
    2519,  2509,  2514,  2522,  1201,     0,     0,     0,     0,     0,
    1928,  1110,  1115,  1108,  1112,  2523,     0,     0,     0,     0,
    1129,  1128,     0,     0,     0,  2523,  1483,  1132,     0,     0,
    1302,  1303,  1355,     0,  1581,  1579,  1590,  1635,  1636,  1638,
       0,  2451,   961,   960,  1586,   959,    75,     0,  1792,  1814,
    1787,  2467,     0,  2466,     0,  2446,  2449,  1934,     0,     0,
       0,  2381,  2375,  2382,  2384,  2378,  2383,  2385,  2376,  2377,
    2372,  2379,  1477,  1506,     0,  1841,  1042,  1044,  1045,  1043,
    1051,     0,     0,  2360,  2361,  2359,  2358,   456,     0,   465,
       0,   477,     0,   456,  1831,  1830,     0,  1026,  1029,  1030,
    1001,  1000,  1002,   995,   997,   998,   522,  1620,     0,     0,
       0,  1626,  1607,  1617,     0,  2064,  2276,  2279,   243,   246,
     245,   247,     0,     0,     0,     0,     0,     0,  1086,  1398,
    1567,  1083,  1071,  1506,  1496,  1070,  1093,  1089,     0,  2310,
       0,  2273,  2338,     0,     0,     0,     0,     0,  2328,  1766,
       0,  1713,     0,  1735,     0,     0,     0,     0,  1706,     0,
    1727,  1687,  1715,  1705,  1476,  1759,  1702,  1703,   987,   986,
     981,  1415,  1398,     0,     0,  1395,  1417,     0,  1417,  1398,
    1398,     0,  1398,  1469,  1412,     0,     0,  2614,  1497,  2512,
       0,     0,   861,   172,   175,   173,     0,   174,     0,     0,
     404,   403,     0,  1757,   397,   126,   125,   127,   128,  1531,
    1532,  1528,  1529,  1527,  1530,   130,   129,   124,   876,     0,
       0,     0,  1757,   377,   356,   357,   360,   361,   362,   948,
     851,  1020,   927,     0,   619,   851,   802,   807,   807,   925,
       0,  1020,     0,     0,     0,     0,     0,  1020,     0,     0,
       0,  1637,     0,   938,   888,     0,     0,     0,     0,     0,
     939,     0,   889,  1637,     0,     0,     0,     0,     0,  1020,
       0,     0,     0,   441,     0,  1020,   907,   968,   967,   966,
       0,  1020,  1020,     0,   569,   570,   568,     0,     0,     0,
     561,   543,   764,   890,   440,   891,   618,     0,   962,   615,
     621,  1930,     0,     0,     0,     0,   136,  2567,     0,  1436,
     190,    97,    86,    82,   101,  1541,  1542,  1540,  1538,  1539,
     102,    84,    85,    89,    88,    90,    91,    92,    87,    93,
      83,    94,   103,   104,    81,     0,     0,     0,     0,  1757,
     386,     0,     0,  1637,   346,   363,   364,   367,   368,   369,
     370,   371,   374,   372,   373,     0,  2458,  2460,     0,     0,
     340,   339,     0,   131,  2585,     0,     0,   618,   106,   439,
     541,   544,   844,   846,   845,   832,   831,   107,   109,   111,
    1596,  1673,  1398,  1495,  1935,  1476,     0,  1672,     0,     0,
    1307,  1340,     0,  1366,     0,  1205,   721,   721,   721,  1349,
     706,  1353,  1344,   721,  1345,   721,  1347,     0,   750,     0,
     749,     0,  1165,  1180,     0,     0,     0,     0,     0,     0,
    1314,  1311,     0,     0,     0,     0,  1337,     0,     0,     0,
    1210,     0,  1297,  1319,  1317,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1325,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1198,
    1091,  2526,  2528,  1062,     0,  2518,  2520,  2324,  2325,  2326,
     853,  1330,     0,  1126,  1122,     0,  1120,  1482,  1141,  1140,
       0,     0,     0,  1130,  1092,  1293,  1091,     0,  1356,  1929,
     418,   580,  1577,    73,  1790,  2464,     0,  2475,     0,     0,
       0,     0,     0,     0,     0,  2370,  1507,  1647,     0,  1051,
    1055,  1944,  1844,  2363,  2364,  2362,     0,   457,   458,   460,
    1092,   474,   454,     0,   446,   449,     0,     0,   999,  1076,
       0,  1639,  1624,  1631,  1625,     0,     0,     0,  1623,  1919,
    1918,  1925,  2501,     0,     0,  2391,     0,     0,     0,  2504,
    1476,  1476,  1561,     0,     0,  1068,  1073,  1069,  1072,     0,
    1090,  1097,  1096,  1920,  1927,     0,     0,     0,     0,   752,
     751,   760,     0,     0,     0,  2323,     0,   756,   758,   757,
    2333,   755,  1768,  1504,  1723,  1722,  1519,  1510,     0,  1513,
    1512,  1698,  1504,  1717,  1769,     0,     0,  2508,  1410,     0,
    1397,  1396,  1418,     0,  1398,  1417,  1417,     0,  1377,  1376,
    1651,  1654,     0,  1375,  1434,  1400,  1076,  2604,  2616,     0,
     763,   762,   579,   759,   578,   177,   176,   182,   183,   424,
     410,   423,   398,   123,   411,   412,   378,     0,   358,   620,
     852,   910,     0,     0,     0,   807,   614,   851,   816,   808,
     851,   851,     0,     0,   553,   550,   929,   556,   908,   900,
     909,   920,   922,     0,   552,   571,     0,     0,   559,   851,
     895,   936,   937,   959,   547,     0,   590,   591,   589,   565,
     572,   548,   549,   931,     0,  1491,  1493,  1501,   555,   554,
    1552,  1551,   558,     0,   551,     0,   942,   915,     0,   587,
     585,   582,   584,   583,   588,   586,   560,   557,   573,   905,
       0,   947,   947,   924,     0,   598,   599,   601,   602,  1933,
       0,   964,   926,     0,   603,   616,   604,     0,     0,   577,
    1545,  1546,  1543,  1544,   576,  1547,   574,   575,     0,   146,
       0,     0,   878,     0,   139,   137,   148,     0,     0,     0,
    1439,     0,  1440,  1437,  1438,     0,    98,   100,   417,   416,
     415,   414,   387,     0,     0,     0,  1757,   365,  2459,  2457,
    2456,     0,     0,  2592,   343,   341,   342,     0,     0,   192,
     596,   597,   595,   594,     0,   427,     0,  1990,   425,     0,
     438,     0,  1855,   764,   545,     0,     0,     0,     0,  1476,
    1520,  1938,  1666,     0,  1238,  1367,     0,     0,   722,  1341,
     772,  1351,     0,  1352,   708,   707,   723,  1343,  1346,  1350,
    1348,  1204,  1212,  1260,     0,  1178,  1261,  1262,     0,  1284,
    1207,  1206,     0,     0,     0,  1244,  1245,  1335,  1338,     0,
       0,  1218,     0,  1220,     0,     0,  1299,  1274,  1290,  1247,
    1278,     0,  1223,  1199,     0,  1248,     0,  1253,  1251,     0,
    1227,     0,     0,  1234,     0,  1232,     0,  1233,     0,  1235,
    1280,  1282,  1408,  2527,  1063,     0,     0,  1332,  1118,     0,
    1127,  1124,     0,  1121,  1093,  1304,  1294,     0,  1788,  2465,
       0,  2396,  2448,  2447,  2468,  2468,  2468,     0,  1478,     0,
    1604,  1046,  1051,  1055,     0,  1047,  1855,   461,     0,     0,
       0,   481,     0,   479,   447,  1027,  1091,  1621,  1633,     0,
    1641,     0,     0,  1618,  1628,     0,     0,     0,  1627,   244,
       0,  2388,  2389,  2387,  1506,  1484,     0,     0,  1573,     0,
    1568,  1084,     0,  1095,  1094,     0,  2340,     0,  2339,  2351,
    2352,  2349,  2350,  2348,  2329,     0,  2335,  2334,     0,     0,
       0,  2345,  2336,     0,     0,  1714,  1509,  1716,  1710,   988,
    2514,  1469,  1402,  1398,  1373,  1398,  1384,     0,     0,  1398,
    1380,  1378,  1382,     0,  1476,     0,  1399,  1431,  1091,  1922,
    1498,  1501,   359,   912,     0,   851,   803,   804,   816,     0,
     816,   816,     0,     0,   899,     0,  1008,     0,   904,   760,
     566,   935,   934,   567,     0,   897,     0,  1502,  1503,  1494,
     442,   896,   917,   902,  1813,   928,   618,   963,   784,   702,
     651,   642,   721,   645,   644,   688,   721,   656,   706,   704,
     674,   706,   706,   681,   680,   698,   684,   664,   772,   772,
     663,   701,   772,   685,   683,   687,     0,   689,   706,   694,
     682,   686,   703,   679,   676,   700,   721,   721,   721,   660,
     699,   772,     0,   692,   721,   622,   725,   662,   772,   779,
       0,     0,   721,   723,  1932,   147,   135,     0,     0,   880,
     882,     0,     0,   883,  2569,     0,  2571,     0,  1054,     0,
      95,     0,     0,   348,   413,   366,  2461,     0,   203,  1091,
       0,     0,   193,   195,   196,     0,     0,     0,   429,  1857,
    1856,   426,   525,   546,     0,     0,     0,  1673,  1668,     0,
    1664,     0,  1368,     0,     0,     0,     0,   766,   777,   775,
     769,     0,   773,   774,  1342,     0,     0,   724,  1354,   721,
    1175,   706,  1169,  1171,  1167,     0,   689,  1170,   721,     0,
     772,  1174,  1166,     0,  1315,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1202,     0,  1295,     0,     0,     0,
       0,     0,     0,  1231,  1229,  1230,  1506,  2508,   854,  1123,
       0,  1305,     0,     0,     0,  2473,  2473,  2473,  1646,  1645,
       0,  1644,  1648,  1048,  1056,     0,   459,   462,     0,     0,
       0,   478,     0,   523,     0,     0,     0,  1642,  1630,  2505,
    1619,  1622,  1927,  2390,  1075,     0,  1479,  1572,  1569,     0,
    1562,  1564,  1566,     0,  1921,     0,     0,  2344,  2330,   761,
       0,     0,     0,     0,  2331,  1403,  1401,  1411,     0,  1369,
    1398,  1398,     0,  1369,     0,     0,     0,  1653,  1495,  1655,
    1435,     0,  1413,     0,  1500,     0,     0,   911,     0,     0,
       0,     0,     0,     0,   941,     0,   962,   901,   921,   943,
     932,  1020,  1492,   916,   918,   996,     0,   600,     0,   788,
     650,   643,   661,   659,   710,   705,     0,   710,   710,   670,
     688,   665,     0,   772,   678,   669,   690,   693,   695,   697,
     710,     0,   772,   658,   657,   667,   654,   710,   733,     0,
       0,     0,     0,   729,     0,   782,     0,   736,     0,   623,
     726,   728,     0,     0,     0,   691,   772,   647,   780,   779,
     649,   772,   779,   710,   710,     0,   133,   138,   149,   150,
     871,  2568,     0,  2566,     0,  1050,  1441,    99,     0,     0,
     206,   204,   205,     0,   199,   201,   196,  2579,     0,  2586,
       0,     0,  2584,   428,   431,   540,   526,     0,     0,  1501,
     849,     0,     0,  2229,  1521,  1239,   719,   717,   720,   718,
     768,   767,   771,     0,   770,   779,     0,     0,  1177,  1172,
     690,  1176,  1168,  1173,  1265,  1242,  1243,  1336,  1327,  1271,
       0,  1219,  1296,     0,     0,  1279,  1249,  1252,  1250,  1255,
    1256,  1083,  1083,   592,  2521,  1125,  1815,  2476,     0,     0,
    2472,  2470,     0,  2471,  2469,  2439,     0,  2394,  2395,  2393,
    2380,     0,     0,     0,  1091,   467,     0,   484,   483,   480,
    1506,  1632,  1634,  1640,  1629,     0,  1480,  1495,   753,  1565,
       0,  1085,  2342,  2341,  2343,  2337,     0,     0,     0,     0,
    1385,     0,  1389,  1394,  1390,     0,  1381,  1379,     0,  1520,
    1423,  1424,     0,     0,  1429,  1433,  1506,  1501,   914,     0,
     617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   940,  1898,   930,   962,   898,     0,   903,   562,     0,
     787,     0,   792,   714,   715,   716,   671,   711,   713,     0,
     673,   641,   666,   696,   672,     0,   668,   655,   739,   738,
    1101,   731,   746,   626,     0,     0,   737,     0,   727,   735,
     730,     0,   646,   648,   652,   653,   639,   640,  1931,   140,
     884,   280,  2570,  1066,     0,  2575,   121,  2583,  2593,   203,
       0,     0,   144,     0,   194,   760,   197,  2505,   439,     0,
     434,   819,     0,   848,     0,   821,   823,  1522,     0,   778,
     776,     0,     0,  1298,  1300,  1409,   593,     0,  1791,  2445,
    2444,  2443,  2440,     0,     0,     0,     0,     0,     0,  2474,
    2478,  1643,     0,     0,     0,   475,     0,   471,   473,     0,
     509,   524,  1488,  1501,     0,  1506,     0,  1570,  1563,  2347,
    2346,  2332,  1404,     0,     0,     0,     0,     0,  1442,  1652,
    1419,  1419,  1430,  1414,  1499,   913,     0,     0,   605,     0,
       0,  1900,  1899,   933,     0,   785,     0,   789,   790,   791,
       0,   783,   712,     0,   855,     0,   745,  1101,   734,  1091,
     743,   742,   740,   741,     0,   142,   306,     0,   292,   278,
       0,     0,     0,   282,   151,   154,   152,     0,   153,   159,
       0,   160,   161,   162,   163,   164,   155,   304,   305,   158,
     156,   157,     0,  1947,     0,  1948,  2573,     0,     0,  2572,
     170,   200,     0,     0,   136,   145,  2587,   744,   432,  1855,
       0,  2501,     0,  1637,   108,   820,   840,   839,   825,     0,
    1501,     0,     0,   110,   822,   842,   829,   112,   824,   841,
     827,  1523,   709,  1217,     0,  2441,  2479,  2482,  2480,  2481,
    1524,     0,  2483,  2477,     0,  1845,  1092,     0,   468,   469,
       0,   487,     0,  1637,  1637,     0,     0,  1637,  1637,  1637,
    1637,   502,   510,   512,     0,  1489,  1490,     0,  1485,  1487,
    1481,  1553,   754,  1858,  2508,  1386,     0,  1391,     0,  1383,
       0,     0,  1427,  1425,     0,   611,   819,   607,   609,     0,
     786,     0,     0,   772,     0,   772,   732,     0,   141,     0,
     134,     0,     0,   291,   294,     0,     0,   297,   287,   286,
     288,     0,   281,   280,   280,   334,   285,   331,   330,   323,
    2505,     0,     0,     0,  2594,   202,  1091,   148,     0,   430,
     436,   435,   834,     0,   826,     0,   847,   850,     0,   830,
     828,  1816,  1526,  1525,  1649,  1657,     0,   753,     0,   476,
     475,   472,     0,   485,     0,     0,  1637,  1637,     0,     0,
       0,     0,     0,   482,   511,  1637,  1501,     0,  1074,     0,
    1866,  1405,     0,     0,  1443,     0,  1420,     0,     0,     0,
     613,   819,   606,   821,   823,     0,   798,     0,   797,     0,
     794,   793,   675,   856,   677,   627,   143,   307,   318,   321,
     313,   293,     0,     0,     0,   283,   280,     0,   267,   265,
     266,   272,   273,   274,   275,   276,   277,   268,   271,   269,
     270,   280,     0,   211,     0,     0,  2574,     0,  2576,     0,
     180,   179,   171,     0,   280,  2580,     0,  2588,  2505,   833,
     838,   837,   835,   836,   843,     0,     0,  1846,   463,   470,
     495,   488,   491,     0,   521,   515,     0,     0,   517,   518,
     516,   513,   506,     0,   504,     0,  1486,  1554,     0,     0,
       0,     0,  1859,  1861,     0,  1571,  1388,  1393,  1422,  1421,
    1436,     0,   612,   608,   610,   919,   800,   801,   799,     0,
       0,   629,   628,   630,     0,     0,   280,   314,     0,   289,
       0,     0,     0,     0,   209,   337,     0,   207,   325,   325,
    2577,  2578,   181,  2595,     0,   150,   170,   437,  1656,  1658,
    1872,   495,     0,   493,     0,   489,   486,   490,   519,   520,
       0,   503,     0,   514,     0,     0,     0,     0,     0,  1860,
       0,     0,  1867,  1869,     0,     0,     0,     0,     0,   634,
     624,   631,   633,   315,   321,   311,   319,   280,     0,     0,
     279,   298,   333,   210,     0,   335,     0,   280,     0,   324,
     326,   328,     0,   132,  2589,     0,  1858,   492,     0,   500,
     496,   498,   501,   509,   508,   505,  1091,  1864,  1865,     0,
    1862,     0,     0,  1868,  1428,  1426,   796,   795,   636,   635,
     632,     0,   312,     0,     0,   310,   290,   295,   280,     0,
     280,   222,   221,     0,   213,   261,   332,     0,   212,  2581,
     280,     0,  1866,   494,     0,     0,   507,     0,     0,  1557,
    1559,  1863,  1871,  1870,   316,     0,   280,     0,   280,     0,
     280,     0,     0,     0,     0,     0,   208,   280,  2590,     0,
    1874,   499,   497,  1092,  1555,  1091,     0,   308,   280,   296,
     301,   338,     0,   216,   262,   263,     0,   219,  2582,  1873,
       0,  1878,  1560,  1558,   280,   280,   297,   300,   336,     0,
       0,   214,   215,   227,   226,   218,     0,     0,     0,  1885,
     280,   280,   302,   235,   233,   280,   223,   231,   225,     0,
     232,   264,   220,  1876,  1877,  1875,  1880,     0,     0,  1882,
    1883,     0,  1847,     0,   217,   234,  1884,  1879,     0,  1886,
    1888,     0,   224,  1881,     0,  1091,  1887,     0,  1092,  1889
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   602,  1443,    59,    60,    61,    62,    63,  1314,
      64,   813,  1241,  1745,  1746,    65,   541,    66,  1021,  1500,
    1501,  2965,  2966,  1502,    67,  2083,  3005,  3006,  3007,  1519,
     511,   512,  1937,  1938,  1046,  2988,  2952,  3759,  2956,  3875,
    4010,  3914,  2013,  3303,  3760,  3761,  3884,   536,  2081,  1457,
    4034,  1917,  4142,  1918,    68,   637,  1019,  1479,  1480,  3321,
    3322,  3581,  3323,  3573,  3574,  3575,  3576,  4277,  4116,  4217,
    4278,  4353,  4389,  4395,  4396,  4323,  4405,  4406,  4407,  4393,
     885,  4408,    69,   564,   565,   887,  1343,  2328,  1344,    70,
    4324,  4391,  4117,  4118,  4017,  4119,  3887,  4120,  4021,  4121,
    3890,  4122,  4123,  4124,  4125,  4269,  4126,  4016,  4316,  4113,
    4114,  4318,  4370,  4387,  4127,  3897,  4011,  4204,  3898,  4012,
    4264,  4109,  4265,  4311,  4366,  4110,  4205,  4314,  4208,  4128,
    4134,  4279,  4129,  4135,  4130,  3902,  4028,  4133,  4026,  4132,
    4320,  4274,  2572,  2987,   620,   621,   648,  2071,   622,  1035,
     993,  1459,  1950,  1951,  2434,  2435,  2554,  2555,  2556,  1942,
    1943,  1944,  2059,  2060,  2061,  1924,  1925,  1926,  1463,  1921,
    1922,   623,   994,  1004,  1945,  1946,  1947,  2560,  2063,  2064,
    2065,  2066,  1948,  1738,  1949,  2840,  2578,  2998,  3585,  3777,
    3331,  3921,  4148,  2999,  3000,  2504,  2903,  2483,    71,   553,
     865,  1311,  2302,  1312,  2726,  2727,  2728,  1788,  1789,  3655,
    1793,  2301,  3815,  4060,  3816,  3817,  2730,  3958,  2734,  3122,
    3123,  3420,  3657,  3820,  4163,  4062,  4236,  4161,  4232,  4162,
    4234,  4335,  4290,  4291,  4073,  4173,  4174,  4240,  4293,  3971,
    3972,  3973,  2321,  2739,  3660,  3587,  2053,  1449,  1450,   513,
     514,   515,   645,  2579,  1999,  2580,  2581,  2920,  2001,  2002,
    2700,  1377,  2916,  2889,  3631,  2994,  2924,  2925,  2926,  2927,
    2928,  3996,  4093,  4094,  4091,  2934,  2856,  2443,  2444,  2509,
    2937,  3285,  3538,  4203,  4260,  4261,  4262,    72,   862,  3775,
    3506,  3521,  3287,  3288,  3289,  3290,  3291,  3292,  3293,  3023,
    3024,  3726,  3727,  3728,  3018,  3019,  3358,  3539,  3540,  3541,
    3776,  3741,  3351,  2780,  2781,  3827,  2789,  2790,  2831,  3166,
    2832,  1453,  3352,  3353,  3354,  3550,  3542,  2936,  3499,  3719,
    3722,  3861,  4100,  2445,  2857,  2446,  2860,   948,   516,  2447,
    2448,  1533,  1534,  3924,  3933,  3937,  3925,  3938,  3934,  3926,
    3927,  3928,  3940,  3936,  2585,  3588,  3589,  2849,  3087,  3863,
      73,  1467,   987,   996,   992,  1011,   632,  1468,  2014,  2516,
    3560,   610,  2003,  3491,  3216,  3495,  2004,  2869,  2005,  3203,
    3477,  2006,  3232,  3493,  3716,  2870,  2871,  2007,  2008,  2009,
    3215,  3224,  3714,  2449,  1293,   126,   127,   628,   629,   630,
    2254,  2932,  2490,    74,  1425,  1420,    75,   960,   955,   956,
    1423,  1424,  1883,  2379,    76,   640,  1506,    77,  1322,  2313,
    2314,  2315,    78,  1012,    79,    80,   641,  1513,  1514,  1515,
      81,  1305,   134,    82,   873,  1317,  1319,  1320,    83,   636,
    1013,  1014,  1015,  1016,  2019,    84,  1779,  2286,  2287,  2288,
    2289,  1476,  2518,  1477,  1478,  2028,  3115,    85,    86,   599,
    2209,   570,   894,   571,   572,  1822,  2341,  3632,   905,   906,
     907,  2765,  1355,  1356,  1357,  1785,  2770,  1100,  1097,   778,
     779,   780,   781,  1189,  1190,  3543,   782,  1199,  1704,  3035,
    3372,  1564,  1565,   783,   784,   785,   786,   787,   788,  1731,
    3055,  3056,  3386,  2239,  2240,  2241,   789,  2128,  3042,  2141,
     790,  1182,  1689,  1622,  3378,  3047,  1550,  2103,  2617,  3026,
    2697,  2203,  1123,  1124,  1081,  2110,  1556,  1890,  1891,  1892,
    1893,  1894,  3465,  3464,  3466,  3833,  3681,  3835,  3685,  2390,
    1895,  1896,  2806,  3679,  3984,  2204,  2205,  2206,  3396,  2807,
    3183,  2825,  2826,  3696,  2381,  1897,  2813,  3992,  3693,  3694,
    4089,  4088,  3695,  3470,  3471,  3196,  3197,  2961,  2962,  2963,
    3837,  1613,  1614,  1620,  1288,  1289,  1551,  2283,  2714,  3667,
    3824,  2230,  3436,  3822,  3978,  2010,  2895,  2896,  2343,  2344,
    2829,  3200,  3229,  1380,  3633,  2716,  1856,  2796,  2797,  3340,
    3952,  4394,  2841,  2530,  2944,  1584,  1585,  2902,  4078,  4244,
    4338,  4339,  4340,  3148,  3149,  3440,  3441,  2345,  2762,  3150,
    3668,  3983,    87,   520,    88,  1743,  2245,  1238,  2259,  1023,
    1537,  1538,   801,   533,    89,   542,  2284,    90,   560,  1806,
     852,   877,  1325,  1326,  2322,  2740,  2747,  2323,  2752,  3429,
    2742,  3127,  3128,  2249,  2250,  2743,  3130,  3426,  3410,  3411,
    3110,  3652,    91,   587,  3194,  2820,  2821,  4054,  4055,   878,
      92,   519,  1068,  2092,  1543,  2091,  1069,  1070,  2094,   666,
     667,    93,   962,   583,  1402,  1403,  1404,  1872,    94,   575,
     949,  2793,  2802,  1850,   869,  1234,  1384,   952,  1385,  1836,
    2361,  1366,    95,   983,   982,    96,   606,  1445,    97,   814,
    1261,  1755,  2704,  3098,  1262,  1263,  2260,  3798,    98,   561,
     882,   883,  1328,  1808,    99,   555,   870,  1799,   100,   545,
     857,  1297,  1778,   101,   102,   859,  3116,  4057,  4230,   549,
    1781,  1301,  3332,  4080,  4182,  4183,  4185,  4252,  4253,  4286,
    4381,  4415,  4399,  4418,  4419,  4422,  4429,  4430,   792,   970,
     793,  3711,   794,   795,  2748,  2749,  3201,   796,  2750,   797,
    2850,  1024,  1540,   539,   491,   617,   971,  2722,   799,  3904,
     990,  1039,   493,   494,   103,   909,   574,  1359,  1360,  1361,
    1831,  1832,   953,  2218,  1833,  1834,  2358,  2353,  3448,  3172,
    3164,   104,   860,   498,  1303,  1304,  2295,   105,   586,   106,
    1290,  1772,  1773,  2280,  2713,  2281,   107,   890,   108,   839,
    1766,   840,  1266,   841,   842,  1280,  1274,  1283,  1277,  3803,
    3644,  3645,  2268,  1237,  1040,  2075,  2981,  1041,  1758,  2262,
    2263,  3405,  3647,  3101,  3809,  3810,   109,   135,   501,   643,
    1030,  1349,   110,   111,   112,   113,  1352,  1438,  2337,  1439,
    2210,  1440,  1441,  1904,  1820,  1685,  1686,  3085,  1179,  1180,
    2213,  2670,  2671,   908,   652,  1056,  1048,   128,   129,   130,
     655,   656,   131,  1009,  1010,  2517,  2958,  3305,  3563,  3564,
    3765,  3909,  1050,  3771,  4224,  4357,  1051,  1052,  2989,  3773,
    4038,  4226,  4330,  1053,  2569,  3318,  3910,  4144,   114,   972,
     596,  1436,  1431,  1433,  1900,  2397,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3759
static const int yypact[] =
{
    4447,  1143,  1116, -3759,  -144,   696, 47998,   135,  1336,  1336,
     412,  2881, -3759, -3759, -3759, -3759, -3759,  2850, -3759, 47998,
    1116, -3759, 24220, -3759, -3759,   -37, -3759,   164,  1336,  1116,
     404, -3759, 47998, -3759,   766,  1393,  1116, -3759, -3759, 43126,
   -3759,   412, 47998, -3759,   862, -3759, 43126,  1438,  -105,   753,
     716,   807, -3759, -3759, 47998,  1082, -3759,  -167,  1324,  1252,
   -3759, -3759,  1043, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, 24833, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1314, 47998,
    1346, 47998,  1342, 47998, 41299, 47998,  1026,  1270,  1405, -3759,
   -3759,  1467, -3759, -3759,  1336,   412, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,   984, -3759, -3759,  1060, -3759, -3759, -3759, -3759,
   -3759,  1635,  1440, -3759,  1469, 41299, -3759, 47998, -3759, -3759,
   -3759,  1100, -3759,  1154, -3759,  1169,  1493,  1545,  1560,  1046,
   11136,  1512,  1512,  1512, 47998,  1618,  1512,  1512, 47998, -3759,
    1512, -3759,  1512,  1336, -3759, -3759,  3820, 47998,  1479,   199,
    -102, 41299,  1463, 47998,  -144,    40, -3759,  1588, -3759, -3759,
   -3759,  1336, -3759,  1804,  1674,   836, 47998, -3759, -3759,  1336,
     974,   879,  1289, -3759, -3759,  1427, -3759,  4051,   138, -3759,
   -3759, -3759,  2678, -3759, -3759,  5988,  1427, -3759, -3759, -3759,
    1326, -3759, -3759, -3759, 47998,  -144,  1336,  1698, -3759, -3759,
     139,   139,   139, -3759,   139, -3759,   139, -3759,  -167,  1358,
   -3759, -3759,  1359, 47998,  -145,  -140, -3759, -3759,  1365,   838,
   -3759,  1417, 38254, -3759, 47998, -3759, -3759, -3759, -3759,  1640,
   -3759, -3759, -3759,  1870, -3759, 24220, -3759, -3759, -3759,  1270,
   -3759, 47998,  1513, -3759, -3759, -3759, 24220,  1402, 47998, -3759,
   24220, 24220,   202,   767,  1182, 47998, 47998,  1831, -3759,  2025,
   38254,  1620, -3759,   846,  1012,  1467,  2023, -3759,  1440, -3759,
   47998, 47998, 47998, -3759, -3759, -3759, 43735,  1046,  1451,  1471,
    1482, 16184, -3759,  1503,  1527,  1564, 11136,  1566,  1570,  1583,
    1591,  1603,  1606,  1625,  1636,  1638,  1643,  1649,  1676,  1682,
    1689,  1692,  1692,  1695,  1699,  1714,  1726,  1091,  1732, -3759,
    1744,  1756,  1773, -3759, -3759,  1775,  1779,  1784, -3759,  1786,
    1795,  1798, 11767,  1803,  1806,  1808, -3759, 21146,  1811,  1822,
    1828,  1830,  1834,  1848,  1852,  1859,  1872, -3759, -3759, 11136,
    1695, -3759, -3759,  1876, -3759,  1898,  1910,  1912,  1929,  1932,
    1942,  1946,  1952,  1955,  1965,  1968,  1989,  1991,  1998,  2014,
    1695, -3759,  1584,  2017,  2029,  1704,  2035, -3759,  2056, -3759,
     234,  2060,  1692,  1695,  1695,  2065,  2080,  2086,  2088,  2101,
   16184, 16184, 16184, 11136, -3759, 47998, -3759, 47998,  1644,  2262,
   -3759,  2435, 16184,   197, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  1436,  1568, -3759, -3759, -3759, -3759, -3759,  2105,  1488,
    1945, 47998, 47998, 47998,  1743, 47998, 47998, 41299,  1659, 47998,
   38254, -3759,  1512,  1596,  4409,  1820,  1793,  1501, -3759, -3759,
   -3759, -3759, -3759,  1877, -3759, -3759,  1753, -3759,  1899, -3759,
   -3759,   143, -3759,   209, -3759, -3759, -3759, -3759, -3759, -3759,
    2002,  1665, -3759, -3759,   108, -3759, -3759, 47998, -3759, -3759,
   -3759, -3759,  2099,  1928, -3759, -3759, -3759,   196,  2316,   239,
   24220, -3759,  1866, 11136,  1411, -3759,  -157, -3759, -3759,  2312,
   -3759, -3759, 38254, 24220, -3759, -3759, -3759, 21761, -3759, -3759,
    2448, -3759,  1921, -3759, -3759,  1568,  3482, -3759,  1820,  2260,
   -3759,  2378,  2290,   767,  2176, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  2136,  2678, -3759, -3759, -3759,
   -3759,  2593, -3759,  2318, -3759,   -16, -3759,  2172,  2317,   -16,
   38863,  2538,   173, -3759,   297, -3759,  2617, -3759, -3759, -3759,
   -3759, -3759,  2300,  2283, -3759, -3759,   325,  2660, -3759,  2646,
   -3759,    79, -3759, -3759,  2329, -3759,  2538,   -16,   173, -3759,
    2547,  2669,   782,   444, -3759, -3759,  1299, -3759, -3759,  2749,
   -3759, -3759, 24220, -3759, -3759, -3759,  2099, -3759, -3759, -3759,
    2221, -3759,  2489,  2332, -3759, -3759,    83, -3759,  2233,   -36,
    2707, -3759,   723, 39472, -3759, -3759, -3759,  2746,  2758,  1692,
    2259, -3759, -3759, -3759,  2880, -3759, -3759,  2270,  2793,  2793,
    2793,  2904, -3759, -3759, -3759, -3759, -3759, -3759,  2453,  2314,
   -3759,  1513, 24220,  2683,  2301, -3759, -3759,  2552, 11136, -3759,
   -3759,  4017,   178, -3759, -3759,   155, -3759,  2886,  2513, -3759,
   -3759, -3759, -3759,  2774, -3759, -3759,  2880,  2838,  2793,  2742,
    2336, -3759, -3759, -3759, -3759, -3759, -3759,   216, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,   219, -3759, -3759, -3759, -3759,
   -3759,  1513, -3759, 24220, -3759, -3759, -3759, 24220, -3759,  2338,
   -3759,  2334, -3759, 11136, 11136,   348,  2899,  2967,  2967,  2967,
    1644,  2380, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11136,
   11136, 11136, 11136, 11136, 11136,  1174,  2354, -3759, -3759,  1115,
   -3759,  2359, 11136, 11136,  2455, 11136,  1568, 11136, 25446, -3759,
    3617, 11136,  1025,  2857, 11136, 11136, 11136, 11136,  2701, 11136,
   11136, 11136, 25446,  2995,  2379, -3759,  2374,  1212, 11136, 11136,
    1489, 11136, 11136, 11136, 11136, 11136, -3759, -3759, 11136, 11136,
   11136, 11136, 16184, 11136, 11136, 11136, 11136, 11136, 11136,  2967,
    2967, 11136, 11136,  1507, -3759, 11136,  1568,   989,   989, 11136,
    1568,  7981, 11136, -3759, -3759, -3759,  2382, -3759, -3759, -3759,
   25446,  2967,  2967, 11136, 11136,  2899,  2899,  2899,   240,  2386,
     828, 11136, 26672,  2381, -3759, -3759, -3759, -3759, 11136, 11136,
   11136, -3759, 16184, -3759, -3759,  1552, -3759, -3759, -3759, 12398,
   16184, 16184,  2388, 16184, 16184, 16184, 16184, 16184,  2753, 16184,
   16184, 16815, 17446, 16184, 16184, 16184, 16184,  1178,  2899, 41299,
   16184, 11136, -3759, -3759, 47998, -3759, -3759, -3759,  2390, 24220,
    1659, -3759, -3759,   -66,  2862, -3759, -3759,  2397, 24220, -3759,
    2394, -3759,  2751, -3759, -3759,  2754,  2759,  2762, -3759, -3759,
   -3759, -3759, -3759,  2986,  2766, -3759, -3759,  2771, -3759, -3759,
   -3759, -3759,  2407, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    2522, -3759, -3759, -3759,  2424, -3759, 38254,  2424, -3759, -3759,
    2424, -3759, -3759,  2424,   791,  4930, -3759, -3759, 47998, -3759,
   48607, -3759, -3759, 21761,  -144, -3759, -3759, 13029, -3759, -3759,
   -3759,  2779,   277,  2432, -3759, 24220, -3759,  1644, -3759,    76,
      76,  2679,   795, 41299, -3759, -3759,   152,  2437,  2515,  2439,
   -3759,  2521, 24220, 24220, -3759, -3759, -3759, -3759,  3060,   879,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2444,  2915,  2449, 38254,   911, -3759, 47998,
   -3759,  1614, -3759, -3759, -3759,  2456, -3759, 11136, -3759,  2463,
   -3759,   889,  2834, -3759,  -144, 11136, -3759,  2460,  1440, 47998,
   47998, 47998, 24220, 47998, 24220, -3759,   733,   733, -3759, 35209,
   -3759, -3759, -3759, -3759,   -16, 47998, 47998,   -16, 38254, -3759,
     173, 47998,   -16, -3759,  2852,  2571, -3759, -3759, -3759,  2918,
   -3759, -3759,  2910,  2473, -3759,  2834, -3759, -3759,   173, -3759,
   -3759, 24220, -3759, -3759,   173, -3759,   173,   173,   -16,   -16,
    2531, -3759, -3759,  2479, -3759,  2531,  2627, -3759,  1075,   139,
    2724, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,    70, -3759, -3759, -3759, -3759, -3759, -3759, -3759,    91,
   -3759, -3759, -3759,   332,  2978, -3759, 41299,  2757,  1030,   890,
    2757,  1442,  -144,   800, -3759,   800, -3759,  3292,  2755,   212,
   24220, -3759,  2488, 44344, 24220, -3759, -3759, -3759,  1123,  2490,
    2491,  1644,  2963,  2965,  2971,  2972,  2974,  2975,  2976,  2977,
    2979,  2983,  2985,  2987,  2989,  2991,  2992,  2994,  2999,  3005,
    2499, -3759, -3759, -3759, -3759, 24220, -3759, -3759, -3759, -3759,
    2579, -3759, -3759, -3759, -3759,  1573, -3759, -3759, -3759,    94,
    2195,  2560,  2587,   182, 38254,  2993, 47998, 47998,  1440, 47998,
   47998, -3759, -3759,   926,  2809,  2812,  2820,  2557, -3759, -3759,
   -3759,  -207, 47998,  2997, 29728, -3759,   300,   584, -3759,  2967,
    2563, -3759,  2565,  2568,  2569, 11136,    36,   272,   744,  1554,
     755,   931,   356,   380, -3759,  1420,   408,   440,   459,  1067,
     467,   263, -3759,  2570,  2578, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2574, -3759, -3759, -3759,   469,   582,  1092,
    1104,  2575,  2576, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  3014, -3759,  1490, -3759, -3759, -3759, -3759,
    2581, -3759, -3759,  1152,   588,   719,   268,  2591,  1505,   757,
    1578,  1611,  2586, 25446, 47998,  2967,  2580,  1156,  1198,  2967,
    2589,   777,  1229,  1646,  1670,  1683,  1245,  1269,   801,  1727,
    2962,  1281,   805,   832,   834,   874,  1286,  2595,  2604,   887,
     288,  2967,  2606,   306,  2585,  2590,  1328,  9243,  9874, 10505,
     244,   922, -3759,  2607, -3759,  2374,  2608,  2609,   346,  1330,
   -3759, 11136, -3759, -3759,   910,   663,  2645,   151,   908, -3759,
    2765, 47998,  1790,   146, -3759, -3759, -3759, -3759, -3759, -3759,
     861, -3759,  2614, -3759,  2615,  2028,  2618, 11136,   200,  2618,
    3133,  1491,  1491, 16184,   804,  1867, 11767,  1909, 11767,  1909,
    2618,  2618,  2618, -3759, 16184,  2619, 16184, 16184, -3759,  2899,
    1644,  2616,  1119, 47998, -3759,   -66, -3759, -3759, -3759, -3759,
     802, 38254,   102, 24220, 41299,  2622, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  3490, 24220, -3759, 47998, -3759,  2696,
   -3759, -3759, -3759, 22374, 22374, -3759, 22374, -3759, -3759,    48,
     241,  3011,  2650, -3759, -3759, -3759, 29117,  1644, -3759, 24220,
   -3759,  3016,   -39, 24220,  2488, -3759,  2628, -3759, -3759, -3759,
   -3759, -3759,  2040,  2734, -3759,  2629, -3759, 11136,  -144, -3759,
   38254, 38254, 24220, 24220,    28, -3759,  1956, -3759, -3759, -3759,
    3482, 18077,  3054,  3067, 22374, 22374, 22374, -3759, -3759, -3759,
   -3759, -3759,  1162,  1644, -3759,  2630, -3759, -3759, -3759, -3759,
   -3759, 44953,   112, -3759, -3759,  -144,  3070, -3759,  1644,  2636,
   47998, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  3096, -3759,  2816,   -11, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,   -16, -3759, -3759, -3759, -3759,
   -3759,  2861,  2538,  2660,  3070,   -16,   173, 24220,   -16,   -16,
   -3759, -3759,  1671, -3759,  1299, -3759, -3759, -3759, -3759, 47998,
    2744,  2804, -3759,  2649, -3759, -3759, 24220, -3759,  2651, -3759,
    3091,  3239,  2538, -3759, -3759, -3759,   802,   802,  2950, -3759,
    -144,  2785,  2786,  2787,  2789,  2794,  2840, -3759, -3759,  -144,
    -144, -3759, -3759,   802, -3759,  1368, -3759, -3759, -3759, -3759,
    -144,  -144,  -144,  -144,  2430,  -144,  -144,  1747, -3759, -3759,
     802,   802, -3759,   229, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  1002, -3759,  2892,  3222,  2919,   802,   802,  3222,   802,
    2921,  2924,   802,   802,  2763,  3176,   802,  3071,  2797,  2495,
    3072,   802, -3759,  2798,  3194,   802,   802,   802,   802,  3222,
    2945,  3287,   802,   802, -3759,   802,  2948,  2952,   165,  2953,
    2955,   802,   854, 47998,   802,   802,  2956,   802, -3759, -3759,
    5389, -3759, -3759, -3759, -3759, -3759, -3759,   752, 22990, -3759,
   -3759,   802,   516, -3759,  2912, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2717, -3759, -3759,
   11136,  2720,  2430,  -144,  -144,  1313,  -144,  2430,  -144,  -144,
    -144,  -144,  -144,  2430,  2430,  -144,  1332,  -144,  2430,  4017,
   -3759, -3759, -3759, -3759,   181,   802,   802,   802,   802, -3759,
    2246, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, 41299,
    3073,  2039,   -94, -3759, -3759, 41299, -3759, 47998, -3759,  1556,
   47998,  2721,   522,  4219,   816,   816, -3759, 24220, 24220, 24220,
   47998,  2768,  2650, 29728, -3759, -3759,  1075, -3759,  2718, 13660,
   -3759,  2728, -3759, 11136, -3759, -3759, -3759,   385, 11136, 11136,
    3203,  2255, -3759, 40081, -3759, -3759, -3759, 11136, 11136, -3759,
   11136, 11136, 11136, 11136, -3759, 11136, 40081,  2255, 11136, -3759,
    2731, -3759,  3121,  3123, -3759, -3759, -3759, -3759, 11136, -3759,
   11136, 11136, -3759, 11136, 11136, 11136, 11136, -3759, 11136, -3759,
   -3759, 16184, -3759,  2729,  2735, -3759, -3759, -3759,  2737, -3759,
   11136, -3759, -3759, -3759, -3759, -3759, -3759, 11136, -3759, 11136,
   -3759, 11136, 11136, 11136, 11136, -3759, -3759, -3759, 14291, 11136,
   11136,  2738, -3759, -3759, 11136, 11136, 11136, -3759, 11136,   169,
   11136,  1083, 11136,  1262, 11136, -3759, 11136, -3759, -3759, -3759,
   -3759, 11136, -3759,  1791, -3759, -3759,  2431, -3759,   910,  2739,
   -3759, -3759,  1614, -3759, -3759,  2733,  2736,  2740, 41299, 11136,
   -3759, -3759, -3759, -3759, -3759, -3759, 16184,   415,  2741, 16184,
   -3759,  3133,  2701,  2701,  2212, 11136,   200,  3133, 11136,  2748,
    2743, -3759, 11136, 47998, -3759, -3759, -3759, -3759, -3759, -3759,
   41299, -3759, -3759, -3759, -3759,   102, -3759,  2394, -3759,  2488,
   -3759, -3759,  1812, -3759, 38254,  2745, -3759,  2752,  2821,  2828,
    2829, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2538,  1956, -3759, -3759,  2760, -3759, -3759,
    2552,  2843,  2777,  3110,  3300, -3759, -3759, 47998, 16184, -3759,
    3343,  2767,  2770, 47998,  1644, -3759,  2844, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,   448, -3759, -3759,  2772,  2772,
   19918, -3759, -3759, -3759,  3234,  1001,  1001,  1001, -3759, -3759,
   -3759, -3759,  3030, 38254,  3208,  3210,  3211,   723, -3759,   501,
   -3759,  1170,  3165,  2538, -3759,  3216, 41908, -3759, 30337, -3759,
    2782,  3162,  2784,   802, 34600,   962, 27284, 35818, -3759, -3759,
    1313, -3759,   266, -3759, 36427,  3242, 36427, 36427, -3759,  3059,
   -3759, -3759, -3759, -3759,  2650,   173, -3759, -3759, -3759,  2796,
   -3759, -3759,  1011,  3172,  3177, -3759,  3052,  1077,  3052,  1011,
    1011, 25446,  1075,  2112, -3759,  2430,  3108, -3759, -3759, -3759,
   40690, 37036, -3759, -3759, -3759, -3759,  3318, -3759,  3322,   225,
   -3759, -3759,  2373,   890, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1442,
    2373,  2373,   800, -3759,   119, -3759, -3759, -3759, -3759, -3759,
   26059,  1116, -3759,   637, -3759, 26059, -3759,  1123,  1123, -3759,
   26059,  1116,  1313,  2430, 26059,  2430, 45562,  1116,  -144,  -144,
    1904,   802,  2430, -3759, -3759,  3187, 47998,  3188, 26059, 26059,
   -3759, 41299, -3759,   802,   907,  2430,  1313,  1313, 26059,  1116,
   25446,  2399,  2472, -3759,  -144,  1116, -3759, -3759, -3759, -3759,
   24220,  1116,  1116,  2219, -3759, -3759, -3759,  2430,  2472, 45562,
   -3759, -3759,  6269, -3759, -3759, -3759, 19305, 47998,   320,   492,
   -3759,  2807, 32773,   869,   296,  2895,   252,  2823,  2826, 46171,
    1644,  2430, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  -144,  2040,  2373,  2373,  2195,
   -3759,  3081,  3249,   802, -3759,   339, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  2917, -3759,   129,  3008,  2832,
   -3759, -3759,   313, -3759, -3759,   951, 24220, 18692, -3759,  3074,
   -3759,  3408, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  2831,  1075,  3093,  1361,  2650,  2847, -3759, 11767,  1339,
   -3759,  1644, 11136,  1644,  1497, -3759,  2845,  2845,  2845, -3759,
    2851, -3759, -3759,  2845,  3230,  2845,  3233,  2849, -3759,  2855,
   -3759,  1817,   474, -3759,  1825,  1371,  1558,  1466,  2856,  2863,
    1436, -3759, 11136, 11136,  1473,  1475,  -116,   956,   963,   417,
   -3759,  1477,  2981, -3759, -3759,  1538,  1540,  1546,  1562,  1024,
    1581,  1901, 11767,  1595,   883,   442, -3759,  1600,  1034,  1049,
    1608, 11136,  1628, 11136,  1633, 11136,  1654,  1667,  1673, -3759,
    2136,  2431, -3759, -3759,  2865, -3759, -3759, -3759, -3759, -3759,
    2859,  1644,  2867, -3759, -3759, 11136, -3759,   197, -3759, -3759,
   16184,   446,  2868, -3759,  1644, -3759, -3759,  2871,  1436, -3759,
   -3759, -3759, -3759, -3759,  2897, -3759, 47998,   599,  2882, 30946,
   38254, 38254, 38254,  2858, 11136, -3759, -3759,  3141, 24220, -3759,
    3278, -3759, -3759, -3759, -3759, -3759,  2878,  2883, -3759, -3759,
   -3759,  3133,  3241,  3129, -3759, -3759,  2889, 38254, -3759,  2678,
   25446, -3759,  2898, -3759,  2898,  1335,  2890,  1917, -3759, -3759,
   -3759,  2875,  2176, 18077,  3334,  2397, 38254, 38254, 38254, -3759,
    2650,  2650,   771,  2958,  3285, -3759, -3759, -3759, -3759, 46780,
   -3759, -3759, -3759, -3759,  1129, 47998,  3267, 47998,  8612, -3759,
   -3759,  3461, 11136, 38254,    20,   908,   802, -3759, -3759, -3759,
   -3759, -3759, -3759,  2538, -3759, -3759, -3759, -3759, 36427, -3759,
   -3759, -3759,  2538, -3759,   -16,  1671,   636,   663, -3759,  1981,
   -3759, -3759, -3759,  3288,  1011,  3052,  3052,  3290,  3174,   754,
    2914, -3759,   802, -3759, -3759, -3759,  2678, -3759, -3759, 11136,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1002, -3759, -3759,
   -3759, -3759,  2923,  3293,  3298,  1123, -3759, 26059, -3759, -3759,
   26059, 26059,    92, 45562, -3759, -3759, -3759, -3759, -3759, -3759,
    2916, -3759, -3759,  2040, -3759, -3759, 37036,  -144, -3759, 26059,
    2916, -3759, -3759,   174, -3759,  -144, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, 45562,  2925, -3759,   304, -3759, -3759,
   -3759, -3759, -3759,  1804, -3759, 45562, -3759, -3759, 45562, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    2926,  2446,  2227, -3759,  2913,  2929, -3759, -3759, -3759, -3759,
   47998, -3759, -3759, 24220, -3759, -3759, -3759,  5688, 47998, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3153, -3759,
   11136, 11136,  3198, 47998,  3199, -3759,  3473, 47998,  3543, 45562,
   -3759,  2938, -3759,  2939, -3759,  1925, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2942, 47998,  2373,  2039, -3759, -3759, -3759,
   -3759,  -144,   951, -3759, -3759, -3759, -3759,  3209,  3212, 47998,
   -3759, -3759, -3759, -3759,  3082, -3759, 24220,  3525, -3759,  3113,
   -3759,  2951,   919,  5183, -3759,  2961,  2966,  2968, 29728,  2650,
    3325, -3759, -3759,  2701, -3759,  1644, 11136,   969, -3759, -3759,
     176, -3759,  1582, -3759, -3759, -3759,  2980, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  2392, -3759, -3759, -3759,  2255, -3759,
   -3759, -3759,  2990,  2701,  2701, -3759, -3759,  3127, -3759, 11136,
   11136, -3759, 11136, -3759,   938,  2996,  3004, -3759, -3759, -3759,
   -3759, 11136, -3759, -3759,  2701, -3759, 11136, -3759, -3759, 11136,
   -3759, 11136, 11136, -3759,  1677, -3759,  1697, -3759,  1759, -3759,
   -3759, -3759,  2456, -3759, -3759,   828, 47998, -3759, -3759,  1933,
   -3759, -3759, 11136, -3759, 41908, -3759, -3759,  3180, -3759, -3759,
    3410, -3759, -3759, -3759,  -151,  -151,  -151, 14922,  1644,  3463,
   -3759, -3759, -3759,  3278,  3355, -3759,    78, -3759, 47998,  2998,
    1016, -3759,  1975, -3759, -3759, -3759,  2136,  2988, -3759,   802,
   14922,  2772,  3113, -3759, -3759,  1335, 25446, 30337, -3759, -3759,
   38254,  2397,  2397,  2397,  2538,  3414,  2843,  2843, -3759, 27896,
   -3759, -3759,  3146, -3759, -3759, 31555, -3759,  1736, -3759, -3759,
   16184,  1744, -3759,  1644, -3759, 40690, -3759,  1644,   802,  3003,
    3007, -3759, -3759, 47389, 11136, -3759, -3759, -3759, -3759, -3759,
    1614,  1622, -3759,  1075, -3759,  1011, -3759,  3372,  3373,  1011,
   -3759, -3759, -3759, 25446,  2650, 14922, -3759,   254,  2136,  1644,
    3006,   304, -3759,   -89, 11136, 26059, -3759, -3759, -3759,  3009,
   -3759, -3759,  3499,  3504, -3759, 26059,  1573, 47998, -3759,  3461,
   -3759, -3759, -3759, -3759,  5688, -3759, 25446, -3759, -3759, -3759,
   -3759, -3759, 47998, -3759, 24220, -3759, 19305, -3759,  3012, -3759,
    2845,  2845,  2845, -3759, -3759, -3759,  2845, -3759,  2851,  3243,
   -3759,  2851,  2851, -3759, -3759, -3759, -3759, -3759,   176,  1801,
   -3759, -3759,   176, -3759, -3759, -3759,   147,  1415,  2851, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759,  2845,  2845,  2845, -3759,
   -3759,   176,  2845, -3759,  2845, -3759,  2440, -3759,  1844,   136,
    2845,  2845,  2845,  2980,  3019, -3759,  1644,  2701,  3552, -3759,
   -3759,  3159,  -144,  3500, -3759,  1980, -3759,  3015, -3759, 46171,
   -3759,  2430,  1442, -3759, -3759, -3759, -3759,  3157,    -1, -3759,
    3195,  3028,  3033, -3759, -3759,  -144,  3029,  3031, -3759, -3759,
   -3759, -3759,  3646, -3759, 47998, 47998, 47998,  2718, -3759, 37645,
   -3759,  -221,  1644,  3038,  3039,  3041,  3046,  3641,   131, -3759,
    3643, 40081, -3759, -3759, -3759,  1982,  3327, -3759, -3759,  2845,
   -3759,  2851, -3759, -3759, -3759,  3618, -3759, -3759,  2845,  3440,
     176, -3759, -3759,  3056, -3759,  3057,  3058,   139,  3062,  1765,
    1062,  1995,  3362,  3437, -3759,  3282, -3759,  1769,  1138,  1771,
    1776,  1889,  1923, -3759, -3759, -3759,  1500,   663, -3759, -3759,
    2001, -3759,  3418,  3329,   179,  3097,  3097,  3097,  1744,  1644,
    2031, -3759, -3759, -3759, -3759,  3460, -3759, -3759,  3075,  3076,
   47998, -3759,  3129,  2456, 25446, 14922,  3077,  3079, -3759,   -36,
   -3759, -3759,  3078,  2397, -3759,  3662,  3505, -3759, -3759, 41299,
    3086, -3759, -3759,  3384, -3759,   113,  3301, -3759, -3759, -3759,
      20,  3181,  3183,   802,  1644, -3759, -3759,  2649,  2436,  3135,
    1011,  1011,  2780,  3140, 11136, 11136,  3104, -3759,  3093, -3759,
   -3759,   724,  2456, 11136, -3759,  2040,  3129, -3759,  1963,  3106,
    3107, 47998,  3114,  3115, -3759,  2969,   320, -3759, -3759, -3759,
   -3759,  1116, -3759, -3759,  2916,   448,  3116, -3759, 47998,  3421,
   -3759, -3759, -3759, -3759,  1216, -3759,  3122,  1216,  1216, -3759,
    2318, -3759,  3142,   176, -3759, -3759,  3150, -3759, -3759, -3759,
    1216,  3132,   176, -3759, -3759, -3759, -3759,  1216, -3759, 41299,
    -144,  2944,  3736, -3759,  3184, -3759,  3633,  3509,  3744, -3759,
    2872, -3759,  3513,  3412,   802, -3759,   176, -3759, -3759,  3735,
   -3759,   176,  3735,  1216,  1216, 47998, -3759, -3759, -3759, -3759,
   -3759, -3759, 47998, -3759,  1096, -3759, -3759, -3759,  2042,  -144,
   -3759, -3759, -3759,  3147,  3145, -3759, -3759, -3759,   296, -3759,
   47998,  5688, -3759, -3759, -3759,  5389, -3759,  1107,  2068,   304,
    3151,  2081,  2093,  3607,  3324, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, 40081, -3759,  3735,  3425,  3154, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   11136, -3759, -3759,  3459,  3615, -3759, -3759, -3759, -3759, -3759,
   -3759,  1170,  1170, -3759, -3759, -3759,  3774, -3759,  3254,  3255,
   -3759, -3759,  3257, -3759, -3759,   105,  2433, -3759, -3759, -3759,
   -3759, 14922,  3544,  3266, -3759, -3759, 47998,  3214, -3759, -3759,
    1500, -3759, -3759, -3759, -3759, 11136, -3759,  3093,  1904, -3759,
   27896, -3759, -3759, -3759, -3759, -3759,  3171,  3175,  8612,   828,
   -3759,  3219, -3759, -3759, -3759,  3221,  1644,  1644, 47998,  3325,
   -3759, -3759,  1123,  1123, -3759,   724,  1500,   304, -3759,  2098,
   -3759, 47998, 47998,  2139, 47998, 47998,  1001,  1001,  1001,  1332,
    1332, -3759, -3759, -3759,   320, -3759,  3566, -3759, -3759,  2145,
   -3759,   740,  3447, -3759, -3759, -3759, -3759,  1216, -3759,   139,
   -3759, -3759, -3759, -3759, -3759,   139, -3759, -3759, -3759, -3759,
    1692, -3759, -3759, -3759,  3462,  3223, -3759,  3185, -3759, -3759,
   -3759, 33382, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3303,
   -3759, 54088, -3759, -3759,  -167,  3215, -3759, -3759, -3759,   116,
   47998, 24220,  3198,  3366, -3759,  3461, -3759,   -36,  3074,  3113,
   -3759,   250, 47998, -3759,  3466,    87,  1519, -3759,  3645, -3759,
   -3759,  3190,  1994, -3759, -3759, -3759, -3759,  3685, -3759, -3759,
   -3759, -3759, -3759,   195,  3456,  2430,  2430,  2430,  -104,  2433,
   -3759, -3759,  3250, 24220, 16184,  3308,  2152, -3759, -3759,  1456,
    3383, -3759,  -220,   304, 11136,  2538, 37036, -3759, -3759, -3759,
   -3759, -3759, -3759, 11136,  3201, 11136,  3202,  2154, -3759, -3759,
    3640,  3640, -3759, -3759, -3759, -3759,  2174,  2188, -3759,  2217,
    2238, -3759, -3759, -3759,  3204, -3759, 47998, -3759, -3759, -3759,
     204, -3759, -3759,  2248, -3759,  2250, -3759,  1692, -3759, -3759,
   -3759, -3759, -3759, -3759, 11136,  3682,  3238, 47998,   985, -3759,
   55306, 55306, 47998, -3759, -3759, -3759, -3759,  5031, -3759, -3759,
     -56, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  3809, -3759,  3205, -3759, -3759,  3217,  1000, -3759,
   -3759, -3759,  5688,  3652,   252, -3759, -3759, -3759, -3759,   919,
    3218,  2176,  -144,   802, -3759,   250, -3759, -3759, -3759,   802,
     304,  3220,  3470, -3759,    87, -3759, -3759, -3759,  1519, -3759,
   -3759, -3759, -3759, -3759,  3782, -3759, -3759, -3759, -3759, -3759,
   -3759,  1377, -3759, -3759, 25446, -3759, -3759,  2040, -3759, -3759,
   47998, -3759,  3313,   802,   802,  3717,  3718,   802,   802,   802,
     802,  3229,  3383, -3759,  3698, -3759, -3759, 11136, -3759, -3759,
    1644,  3455, -3759,  3787,   663,  1644, 47998,  1644, 47998, -3759,
   47998,  1234, -3759, -3759,  3442, -3759,   250, -3759, -3759,  3129,
   -3759,   608,   608,   176,   139,   176, -3759,  3240,  1644, 11136,
   -3759, 11136,  3260, -3759, -3759,  3677, 47998, -3759, -3759, -3759,
   -3759, 11136, -3759, 54088, 54088, -3759, -3759, -3759, -3759,  3839,
     -36,  3812,  3510,  3814,  3532, -3759, -3759,  3473,  5688, -3759,
   -3759, -3759, -3759,  2430, -3759, 33991, -3759, -3759,   183, -3759,
   -3759, -3759, -3759, -3759,  3251, -3759,   802,  1904,  3244, -3759,
    3308, -3759,  3252, -3759,  -144,  -144,   802,   802,  2442,  2442,
    2040, 41299,  3363, -3759, -3759,   802,   304, 47998, -3759,   824,
    3619, -3759,  2252,  2261, -3759,  3840, -3759,  3842,  3263,  3264,
   -3759,   250, -3759,    87,  1519,  2272, -3759,  3888, -3759,   149,
    3533,  3534, -3759, -3759, -3759,   644,  1644,  1644, -3759,    47,
   -3759, -3759,  3657,  3743, 11136,  1644, 51043,  3269, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, 54697, 11136, -3759,   -56,  3809, -3759,  3531, -3759,  3535,
   -3759, -3759, -3759,  3764, 54088, -3759,  3760, -3759,   -36, -3759,
   -3759, -3759, -3759, -3759, -3759, 25446, 14922, -3759, -3759, -3759,
    3279, -3759, -3759,    -5, -3759, -3759,  -144,  -144, -3759, -3759,
   -3759, -3759, -3759,  2275, -3759, 41299, -3759, -3759,  3858,  3860,
    3754,  3862,   824, -3759,  -117, -3759, -3759, -3759, -3759, -3759,
   46171, 46171, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3335,
    3778, -3759, -3759,    60,  3312, 11136, 54088, -3759,  3759, -3759,
    3691,  1604,  3636,  3291, -3759,  3284,  1443,  3799, 55306, 55306,
   -3759, -3759, -3759, -3759,  3777, -3759, -3759, -3759, -3759, -3759,
    3474, -3759,  2287, -3759, 15553, -3759, -3759, -3759, -3759, -3759,
   41299, -3759,  3363, -3759,  3304,   139,   139,  3881,   139, -3759,
    3883,  3885,  -117, -3759,  3305,  2294,   608,   608,  -144,  3689,
   -3759,    60, -3759, -3759,    50, -3759,  1644, 51652,  3882, 47998,
   -3759, -3759, -3759, -3759, 11136, -3759, 42517, 52261,  3311, -3759,
   -3759, -3759,  3488, -3759,  3532,  3728,  3787, -3759,  3279, -3759,
    3326, -3759,  3133,  3383, -3759, -3759,  3323, -3759, -3759,   139,
   -3759,   139,   139, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, 11136, -3759,  3798,  3415, -3759,  3328, -3759, 54088,  2045,
   54088, -3759, -3759,  3750,  3330,  1579, -3759,  3331, -3759, -3759,
   54088,  3914,  3619, -3759, 15553,  3338, -3759, 11136,  3339,  3333,
   -3759, -3759, -3759, -3759,  1644,  3910, 54088, 47998, 49216,  3530,
   52870,  3779, 47998,  5688,  3780,  3781, -3759, 54088, -3759,   139,
    3747, -3759, -3759,  1644, -3759, -3759,  3434, -3759, 49825, -3759,
    1940, -3759,  3374, -3759, -3759,  3848,  2506, -3759, -3759, -3759,
    3623,  3354, -3759, -3759, 54088, 54088, -3759, -3759, -3759, 32164,
   11136, -3759, -3759, -3759, -3759, -3759,   723,    42, 20531,  3512,
   50434, 53479, -3759, -3759, -3759, 28508, -3759, -3759, -3759,  3792,
   -3759,  1644, -3759, -3759, -3759, -3759, -3759, 41299,  2307, -3759,
   -3759, 25446, -3759, 32164, -3759, -3759, -3759, -3759, 23605,  3357,
   -3759,   802, -3759, -3759, 25446, -3759, -3759, 14922, -3759, -3759
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3759, -3759, -3759, -3759, -3759,   100, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  1733, -3759, -3759, -3759, -3759, -3759,
    1943, -3759,   678, -1780, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,   681,  1565,  3341, -3759,   418, -3759,    86, -3759,
   -3759, -3759, -2841,   -40,  -224, -3759, -3759,   410,    22,  3010,
    -223, -3758, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,   428,   425, -3759, -3759,   238, -3759, -3759, -1797, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  -415,  -367,  1792,
   -3759, -3759, -3759,  3965, -3759,  3436, -3759,  1260,  2204, -3759,
   -3759, -3759,  -483,   256, -3759,   258, -3759,   259, -3759,   261,
   -3759,   264,   265,   267,   269, -3759,   270, -3759, -3759,  -371,
   -3759, -3759, -3759, -3759,   271, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  -240, -3759, -3759,   -80, -3759, -3759,  -231,   273,
   -3759,  -183,   279, -3759,   280, -3759,   -97, -3759,   -92, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  3018, -3759, -3759, -3759, -2218, -3759, -3759, -2327,  2582,
   -3759, -1765, -3759, -3759, -1729, -3759, -3759, -1744,   937, -3759,
   -3759,  1217,   337, -3759, -1366, -1851, -1845, -3759, -3759, -3759,
   -1968, -1963,  -777,  2308, -1178, -2130, -3759, -3759, -3759, -3759,
     126, -3759, -3759, -2523,  2041,  2583, -3759,  2577, -3759, -3759,
    1148, -3759, -3759,  1323,  1754, -3759,   928,  2750, -1240, -3759,
   -3759, -3759, -3759, -3759, -3759,    98,   245,     1, -3759, -3311,
     640, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -2520,
   -3759, -3759, -3759,  -268, -3759, -3759,  -175, -3759, -3759,  -225,
   -3759,    97, -2269, -3759, -3759, -3759, -3759,  2553, -1298, -3759,
    3560, -3759,  -557,   491,  2077, -2392, -1376, -3759,  -903,  -898,
   -2425, -3759, -3759, -3759, -3286,  1099,  1518, -3759,   842,  2089,
   -1865, -3759, -3759, -3759, -3759, -3759,  1589, -3759, -3759,   884,
   -3759,   876, -3759, -3759, -3759, -3759,  -160, -3759,   235, -2671,
   -3759, -3759, -3759, -2752,  1072,   849, -3759, -3759, -3759,  -383,
   -2727,  -613, -3759,   382, -2346, -2369,   817, -3759, -3759,   572,
   -3689, -3759,  -569, -2060, -2347,    56, -3759, -3759,   593, -3060,
     958, -3759, -3759, -3759, -3041, -1693, -3759,   130, -3759, -3759,
   -3759, -3759, -3122, -3759, -3759, -1444, -1980, -3759, -3759,  4114,
    4115, -1022, -2605, -3652,    34,    43, -3759, -3759, -3759,  2597,
   -1120,   211,   215,   222,  2072,  -716,   368, -2284, -3759,   423,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759,  2153,  -528, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -2354,   946, -3759, -3759,  1662,
   -3759, -3759, -3759, -1819,  3200, -3759, -3759, -3759, -3759,  3536,
   -2134, -3203, -3759, -3759, -3759, -3759, -3759, -3759,  1829, -3759,
   -3759,  2284,  2747, -3759, -3759, -3759, -3759, -3759, -3759,   675,
    1856, -3759, -3759, -3759, -3759, -3759, -3759,   959,  2661, -3759,
   -3759, -3759,   -15, -3759, -3759, -3759, -3759,  2375, -3759, -3759,
   -3759, -3759,  2704, -3759, -3759, -3759, -3759, -3759, -3759,  1461,
   -3759,  1890, -3759, -1431, -3759, -3759,  1069,  -975,  1854,  -590,
    1985,   431, -3759,  3598, -3759, -3759, -3759, -1656, -2371, -3759,
    3296,  -958, -2247,  2376,  -549, -1806,  1114,  -351,  -677,  3648,
   -3759, -1140, -1133, -3759, -3759,  -643, -3759, -3759, -3759, -3759,
   -3759,  2078,  2106,  -641, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  1522, -3759, -3759, -3759, -3759,
   -1717, -3759, -3759, -3759, -3759, -3759,  2012, -3759, -2028, -3759,
   -3759,  -413, -3759,  3103, -3759, -3759, -3759, -2257, -1890,  1835,
    1047, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -2302, -3759, -3759, -3759, -3759, -3759,  2019, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -1551, -3759, -1824,   388, -3759,   540,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,    46,   929,    49,
   -2101, -1095,  1799, -3759, -3759, -1264,  3144, -2027, -3759, -3759,
   -3759,  2005, -3759, -3759, -3759, -3759, -3759,  1021, -2518, -1384,
   -3759, -3759, -3069,  -907, -2234,  -860, -3759, -1344,  1439,   553,
   -3759, -1730, -1074,  -464, -2254, -2462, -3759,  1750, -3759, -3759,
   -3759, -3759,  -115, -3759, -3759, -3759,   579,  1911, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  -543,  -730,
   -3759,  2161,  1496, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  2964,  2932,  1972, -3759, -3759, -2271, -3759, -3759,
    1939, -3759,   835, -1984, -1783,  1130, -3759, -3759,  1132, -3132,
   -3759, -3759, -3759, -3759, -3759, -3759,  1071, -3759,   110,  3679,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2725, -1049,  3601,
   -3759, -3759, -3759, -3759, -3759, -3759,  2396, -3759, -3759, -3759,
   -3759, -3759, -3759,  2894,  3697,  -571, -1280, -3759,  -771,  2869,
    2401,  -878, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  2519,  1042, -3759, -3759, -3759,
   -3759,  2954, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  1161,    -4, -3759,   104,   -48, -3759,    39, -3759,
   -3759, -3759, -3759, -3759,  -136, -3759, -3759,  -141,  -660,  -963,
   -1350,   763, -1769, -1999,  1160,  2943, -3309,  -693, -1158, -1160,
   -1894,    38, -3759, -3759,  3000,   122,   933,  -198,    -6, -2339,
    -122,  -580, -3759, -1542, -3759, -3759, -3759, -3759,  2476, -3759,
   -3759, -3759, -3759,  1532, -3759, -3759, -3759,  1147, -3759,   871,
     645, -3759, -3759,   206, -3759,  2539, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    2982,  3758,  3438, -3759,  3043, -3759, -3759, -3759, -3759, -3759,
     527, -3759,   750, -2213, -1206, -3759, -3759,  2808,   918, -3759,
    1629,  -147,  -444, -3759, -3759,   525, -3759, -3759,   316,  3763,
    3443, -3759, -3759, -3759, -3759, -3759, -2694,  -883, -3759, -3313,
   -2745, -1666, -3759, -3759, -2116, -2939, -3759, -3759, -1045, -3759,
   -3759, -3759, -3759, -1848, -3759, -3759, -3759,    25,  3826,  3827,
   -3759, -3759,  -168, -3759,   612, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  3686, -3759, -3759, -3759, -3759,  3688, -3759, -3759,
   -3759, -3759, -3759,  3690, -3759, -3759, -3759, -3759, -3759,  1738,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2563
static const yytype_int16 yytable[] =
{
     492,  1033,   619,   863,   951,   535,   947,  1444,   978,  1650,
    1674,  1353,  1673,   534,   551,  1098,   540,  2346,  2347,  2211,
    1446,   559,  1545,  1627,  1125,  1583,   554,  2512,   490,  1858,
    1076,  1233,   991,   566,  2027,  1857,   569,  1106,  1782,  1409,
     566,  1375,  2330,  1535,  1536,  2024,  2884,  2541,   588,  2715,
    2945,  2746,  1695,  2619,  2834,  1739,  3002,  1902,  3138,  1703,
     538,  1381,  3182,  3469,  1592,  2593,  2628,  1705,  1706,  1410,
    1791,  1709,  1710,  1711,  1712,  3010,  1714,  1715,  1717,  1719,
    1720,  1721,  1722,  1723,  1451,  1167,  1381,  2818,  2442,  1452,
     608,  2000,  1156,  1927,  2329,  1160,  2676,  1022,  1025,  2629,
    2437,  1063,  2378,  2561,  1047,  1055,  2438,   791,  2562,  2767,
    1865,  3299,  2880,   611,  2510,   492,  3664,   492,   618,   624,
    2755,  2702,  3802,  2400,  2401,  2809,   137,  1286,  1875,  1175,
    1176,  1177,  3474,  2819,   607,  2450,  1878,  1879,  1217,  2454,
    2412,  1218,  4258,   613,  1940,   615,  3397,  1324,  2979,  1786,
    2469,  1905,  3601,  2252,  2062,   642,   633,  2430,  2431,  3489,
    2478,  2858,  1184,  1185,  3697,  3699,  2342,  1184,  1185,  3922,
    3548,   912,   913,  2452,  2453,   967,  2455,  1411,  2433,  2458,
    2459,  2414,  1797,  2462,  2487,  1184,  1185,  2108,  2471,  3004,
     912,   913,  2474,  2475,  2476,  2477,  3672,  3347,  4206,  2481,
    2482,  4206,  2484,  2310,  2425, -2373,  2595,  3516,  2493,  1278,
    3348,  2497,  2498,  1507,  2500,   499,  2848,  3509,  3514,  1448,
    2558,  3515,  1448,  4035,  3349,  2252,  2559,  4023,  2977,  2072,
    1236, -2510,  1427,  3570,   550,   912,   913,  3212,  3020,  3021,
    3525,   558,  3571,  3638,  3027,  2292,  3029,  3547,  -860,   855,
    1364,  -527,  3950,  3209,  1940,  1901,  1184,  1185,  1026,  3638,
    1184,  1185, -2442, -1934,  3025, -1472,  3286,   845,  1219,  1287,
    1163,  1219,  2545,  2546,  2547,  2548,  4141,  4197,   546,  1184,
    1185,  1929,  3370,  3713,  1184,  1185,  1295,  1736,  1184,  1185,
    3404,  2111,  1318,  3662,  2565,  1406,  1286,  3475,   597,  3357,
    2844,  2845,  2522,  3329,  1184,  1185,  4235,  2532,   262,  1448,
     264,  4413,  1455,  2538,  2539, -2373,  1184,  1185,  2543,  2950,
   -1779,  1281,  1184,  1185,  3227, -1780,  2488,  1299,  2930,  3613,
    1508,  2550,  3922,  1434,  1509, -2510,  4001,  1379,  -528,  3923,
     634,  2015,  2068,   657,  4092,  1510,  2394,  2803,  2366,  4147,
    3570,  1923,   968,  1503,  2837,   543,  3823,   568,  2672,  3571,
    1548,  2661,  1184,  1185,  1940,  1382,  2229,  1386,  3126,  2778,
    2782,  2784,  1184,  1185,  3821,  3572, -1673,  2293,   579,  1137,
    3169,   136,  4024,   647,  1528,  3975,  3976,  1528, -1757,  4250,
    2954,   912,   913,   547,   136,  1391,  1184,  1185, -2374,  1154,
    2146,  1184,  1185,  1906,   262,  2955,   264,  3595,  3170,  3977,
    3843,  1529,  1168,  1169,  1530,  1591,  1383,  2970,  2971,   848,
    4251,  2055, -1673,  3082,  1184,  1185,  1941,  3639,  2093,  1125,
    2794,  1184,  1185,  1184,  1185,   495,  2194,  3228,  1287,  4192,
    2311,  1901, -1432,  3639,  2566,  2984,   580,  1164,  2354,  2761,
     567,   635,   544,  1735,  2016,  3198,  1184,  1185,  1184,  1185,
     598,  1923,  1184,  1185,  3918,  2951,  1898,  2838,  2861,  1472,
    1511,   262,  3732,   264,  3133,  1184,  1185,  1313,  1524, -1432,
    2179,  3736, -1779,  1184,  1185,  1184,  1185, -1780,  1062,  1549,
    1184,  1185,  3572,  3034,  1525,  1526,  1527,  4414, -1757,   618,
    2355,   624,  3923,  2931,  4198,  3752,  1860,  3512, -2374,  1863,
    3754,  3853,  3186,  1221,  1867,  2553,  3951,  3330,   804,  3811,
    3783,  1186,   624,  1300,  1187,  2468,  4141,  3640,   856,  3219,
    1435,   843,  1737,   847,  1351,   618,  1941,   853,  3476,  1186,
    1880,  1881,  1187,  3141,  3142,  3143,  1451,  4025,  2253,  2985,
     871,  1452,  1700,  3286,  1027,  2852,  2862,  1739,  3171,  1927,
    2866, -1472,  1708,  1324,  2817,  3213,  3357,  1512,  3012,  1220,
    2294,  1923,  1220,  3208,  2882,  2883,  3210,  3211,   963,  1729,
    2231,  1903,  1736,  2437,  2893,  2436,  1365,  2561,  1407,  2438,
    1504,  2234,  2562,  1324,  2237,  3221,  2374,   981,  1184,  1185,
    1184,  1185,  2513,  3480,  1184,  1185,   618,  1296,   995,  2312,
    1186,  3333,  2510,  1187,  1186,   846,  1451,  1187,  2367,   608,
    2253,  1452,  4231,  2310,  2000,   492,  1279,  -198,  3844,  3202,
     608,  4259,  1020,  1186,   608,   608,  1187,  2109,  1186,  1034,
     995,  1187,  1186,  1877,   618,  1187,  1941,  2760,  4108,  3315,
   -2373,  4263,  3634,  1007,  1064,  1065,  1066,  1505,  1186,  4096,
    1071,  1187,  2228,  1005,  4375,  2827,   854,  2846,  4076,  2842,
    1186,  1559,  1560,  1187,  1017,  3673,  1186,   969,  2877,  1187,
    1061, -2373,  1928,  2510,  3641,  1232,  2056,   892,  4095,  2768,
    2885,  3932,  1736, -1472,  2062,  1742,  1759,  3642,  1615,  3602,
    2852,  1798,  3009,  1787,  2558,  2557,  1628,   964,  1630, -2442,
    2559,  1126,  2980,  3642,  2489,  3917,  1186,  4136,  2299,  1187,
    1643,  1644,  1645,  2865,  -860,  2867,  1186,  -527,  1649,  1187,
    3327,  1505,  2878,  3144,  3145,  1184,  1185,  3517, -2442,   812,
    3832, -1472,   942,  2067,  3350,  2890,  2356,  1929,  2847,  3222,
    1186,  2899,  2901,  1187,  3979,  1186,  1905,   861,  1187,  1188,
    1184,  1185,  1784,  3017,  1188,   874,  1813,  2917,  2901,  1181,
    2975,  1183,  1165,  1184,  1185,  2050,   548,  2073,  1186,  1804,
    4002,  1187,  1188,  2214,  1505,  1186,  2074,  1186,  1187,  3643,
    1187,  2967,   965,  1184,  1185,  1226,   492,  1228,  1378,   995,
     492,   618,  3174,   492,   618,  1282,  1387,  1505,  1864,  2084,
    1186,  1840,  1186,  1187,  -528,  1187,  1186,  1184,  1185,  1187,
    2972,  1184,  1185,  3083,  1227,  1940,  2853,  1737,  1231,  1186,
    2808,  1235,  1187,  2085,  1392,  4227, -1432,  1186,  3195,  1186,
    1187,  1291,  1187, -2374,  1186,  3314,  2126,  1187,  1184,  1185,
    1184,  1185,   942,  1188,   608,  1414,  1043,  1188,  2432,  2720,
    2311,  4046,  2582,  2746,  3430,  2795,   618,   608,  1680,  1681,
     867,   608,  2195,  3502, -2374,  3207,  1188,  3503,  3494,  3423,
    4101,  1188,  2068,  3459,  1907,  1188, -1472,  3463,  3094,  2986,
    1184,  1185,  2127,  2564,  3500,  3501,  1680,  2145,  1302,  1184,
    1185,  1188,  3025,  1184,  1185,  3025,  3025,  3522,  3523,  3524,
    3434,  1321,  3690,  1188,   618,  3527,  2933,  2180,  3146,  1188,
     650,  3479,  3025,  3553,  3119,   138,  2602,  3433,  3458,  2099,
   -2510,  3915,  3462,  3857,  2183,  2184,  3526,  1737,  1184,  1185,
    2152,   810,  3546,  3549,  3551,  3552,  1201,  1184,  1185,  3691,
    3689,  3472,  1186,  1418,  1186,  1187,   608,  1187,  1186,  1188,
    4097,  1187,  4102,  2247,  4104,  2370,  1887,   872,  2976,  1188,
    2575,  2080,  1184,  1185,  2200,  2201,  2514,  1447,  4178,  1184,
    1185,  3382,  3338,  1036,  2330,  2117,  1763,  2368,  1315,  4179,
    3608,  3187,  3188,  1188,  2494,  2399,  2437,  2373,  1188,  3611,
    2376,  2377,  2438,  2859,  2859,  1794,   608,  4176,  2561,  2118,
    3373,  1847,  1381,  2562,  1858,  3025,  1858,  1858,  2642,   500,
    1264,  1188,  2799,  2800,  4229,  3179,  2583,  1940,  1188,  2312,
    1188,   552,  1923,  4201, -2510,  1419,  2329,  2121,  2854,  2221,
    1184,  1185,  1381,  2684,  2685,  3051,  3052,  1927,  1795,  2597,
    1184,  1185,  4031,  1188,  4098,  1188,  2442,   608,  2707,  1188,
    1690,  1541,  2735,  4032,  3455,  1184,  1185,  1848,  2436,  2122,
    3068,  3069,  1188,  3066,  3091,  3092,  -433,  2990,  1184,  1185,
    1188,  4099,  1188,  1184,  1185,  2236,  2683,  1188,  2123,  1186,
    2886,  1827,  1187,  2387,  3343,  2804,  2125,  1728,  2132,  1184,
    1185,  1532,  1126,  2469,   875,  1539,  1814,  1941,  1184,  1185,
    2215,   118,  1597,   589,  1186,  3191,  1126,  1187,  2331,  1028,
    1184,  1185,  1923,  2247,  3858,  2558,  2000,  1186,  1888,  2824,
    1187,  2559,  1889,  1204,  4306,  4307,   868,  2688,  2689,  1984,
    1616,  2211,  1230,  1617,  3329,  3425,  3147,  1186,  1928,  3825,
    1187,  1451,  2783,  1736,   118,   984,  1452,   638,  3682,  3683,
    1674,  2251,  1828,  2887,  1675,  2731,   590,  3468,  1184,  1185,
    2495,  1186,  1184,  1185,  1187,  1186,   618,  4014,  1187,   879,
    2682,  2216,  2238,  2062,  3450,  1987,  1548,  1415,    43,  2557,
    2692,  1796,  2991,  4180,  1764,  1188,  2285,  1188,  1029,   584,
    2255,  1188,  1186,  3100,  1186,  1187,  3180,  1187,  2855,  1601,
    1724,  2133,  2100,   618,  1184,  1185,  2222,  2143,  1732,  2948,
    2306,  2307,  3859,   608,  1548,   556,  3418,  4041,  1524,   120,
     573,  1674,   608,  2822,  1923,  1929,   581,   591,  2298,  4081,
    1576,  4202,  1849,  1736,  1186,  1184,  1185,  1187,   582,  1044,
    3344,  1829,  3048,  1186,   119,  3919,  1187,  1186,   876,  2888,
    1187,  1184,  1185,  2357,  3181,  1049,  1057,  1734,  2949,  3419,
     618,   663,   120,  4033,  2584,  2663,  2248,  3383,  1184,  1185,
    1206,  1207,  1768,  2067,  1771,  1184,  1185,   608,  3113,  2945,
     880,  3605,  1186,  1683,  2563,  1187,   585,  1184,  1185,   608,
    1577,  1186,  1184,  1185,  1187,  4438,  3692,   618,  1602,  1941,
    1416, -2553,  1605,   942,  1815,  1572,   608,   608,  3780,  1606,
    1674,  2510,  2897,  1765,   600,  3345,  1186,  2814,  1578,  1187,
     664,  4015,  1188,  1186,  1909,  1417,  1187,  3192,   121,  2815,
     618,   727,  2510,  1817,  1184,  1185,  1184,  1185,  2144,  1008,
      57,  1825,  2025,  1635,  2339,  1184,  1185,  1188,  3330,  1830,
    2763,  4181,   881,   492,   492,   492,   608,   492,   608,  2992,
    1188,  2068,  2112,  1859,   985,  2207,  2026,  2564,  2217,  1861,
     492,  2502,   618,  2115,  1221,   492,  2148,  1184,  1185,   132,
    1188,  1841,  1842,  1843,  1186,  1845,  1579,  1187,  1737,  1607,
    1045,   986,  2340,   942,  1186,   608,  2160,  1187,  1862,   601,
    1844,  2859,  1846,  1866,  1188,  1044,  1775,  2223,  1188,  1186,
     122,  1725,  1187,  1210,  1211,  1212,  1213,  1214,  1215,  1216,
    2167,   727,  1186,  2224,  2171,  1187,  2248,  1186,  2525,  4085,
    1187,   603, -2562,  1765,  1726,  1188,  2764,  1188,  1858,  1876,
     618,  1919,  1609,  1186,  2665,  1684,  1187,   699,   665,  1184,
    1185,  2172,  1186,  2173,   608,  1187,  2993,  2020,   608,  3678,
     133,  1580,  2969,   651,  1186,   609,  1887,  1187,  2468,  3982,
     592,  2436,  1184,  1185,  4086,  2084,  1837,  1188,  1737,  1184,
    1185,  1184,  1185,  1184,  1185,   626,  1188,  3871,  2526,   608,
    1188,  1548,   593,  2174,  3104,  3105,  3106,   612,  2017,  2085,
    3920,  3067,  2022,  1184,  1185,  1008,  2178,   704,   618,  1548,
     492,   492,  1186,  2082,   492,  1187,  1186, -1757,  2816,  1187,
    3346,  1031,  1032,  1901,   594,  1188,  1071,  2208,  2098,   751,
    1887,  4018,  4019,  3789,  1188,  3011,   123,   614,  2078,  2079,
    3090,  2196,  -433,  1930,  1184,  1185,  1184,  1185,   625,  2116,
    3751,  3763,  1184,  1185,  2570,  1104,  1045,  1618,  1186,  1188,
    1619,  1187,  2316,   631,  1184,  1185,  1188,  3038,  1184,  1185,
    1674,  2967,  3129,  2945,  1939,  3049,  2571,  4275,  2687,  1610,
     595,  3981,  3050,   849,  2527,  1920,   120,  1184,  1185,  1186,
    1923,  3922,  1187,  1727,  1612,  4087,  2945,  2945, -2562,   639,
    2557,  1184,  1185,   716,   124,  1186,  1184,  1185,  1187,   638,
    1184,  1185,  2256,  1471,  1184,  1185,  1818,  1126,  2153,   751,
    1639,  1507,  1186,  1201,   627,  1187,  1928,  1188,  1888,  1186,
    4233,  1286,  1187,  4237,  1184,  1185, -2553,  1188,  1661,  1184,
    1185,  1186,   642,  3061,  1187,  1104,  1186,  1931,  4052,  1187,
    1184,  1185,  1188,  3071,   644,  1106,  1156,  1160,  4354,  2528,
    1184,  1185,   125,  1531,   646,  1188,  1581,   850,  3072,  1308,
    1188,  2720,  1309,  1184,  1185,  2220,   658,  4355,   732,  1184,
    1185,  3620,  2339,  1184,  1185,  2124,  1188,  3723,  1186,  3961,
    1186,  1187,  1888,  1187,   508,  1188,  1889,  3343,  2624,  1186,
    3851,  3852,  1187,  1184,  1185,  2630,  3712,  1188,  1105,  3962,
    2134,  1736,   660,  3764,   649,  1222, -1472,  2244,  2636,  1421,
    1696,  2211,  2135,  4053,  3779,   618,   800,   608,   618, -2553,
     262,  1186,   264,  1582,  1187,   808,  2242,   851,  1508,   608,
    4243,  2261,  1509,  1236,  2243,  1819,  2242,  2267,  2267,  2146,
    2267,  2651,  3712,  1510,  3155,  1188,  3626,  1379,  4333,  1188,
     618,  3923,  2067,   608,   661,  1184,  1185,   608,  2563, -1472,
    2142,  1184,  1185,  1287,  2156,  1184,  1185,  1184,  1185,   662,
    3724,  4151,  1184,  1185,   618,   618,   608,   608,  2564,  3218,
    2316,  2266,  2266,  1422,  2266,  1126,  1184,  1185,  2267,  2267,
    2267,  1188, -1472,  1186,  4168,  4169,  1187,  2290,  1330,  1932,
    1204,  1302,  3347,   805,  1310,  2352,  2157, -1472,   858,  2698,
    1933,   563,  3725, -1472,  2363,  3348,  1186,  1934,   563,  1187,
    1321,  2309,  1188,  1186,   844,  1186,  1187,  1186,  1187,  3349,
    1187,   864,  2266,  2266,  2266, -1472,  3753,  2161,  1188,  3755,
     912,  3510, -1472,  3344,   496,  3347,   866,  1186,   497,  1353,
    1187,   608, -1472,  2165,  2529,  1188,   998,   884,  3348,  4280,
    4280,   942,  1188,  2382, -1472,  4082,  3175,  4083,  1511, -1472,
     608,  2876,  3349,   759,  1188,  3177,  2792,  2166, -1472,  1188,
     886,  1031,  1032,   912,   913,  1184,  1185,  1697,  1186,  2170,
    1186,  1187,  3790,  1187,  2175,  2375,  1186,  3456,  3341,  1187,
    2305,   496,  2318,  2319,   727,   497,  3178,   999,  1186,  1935,
     959,  1187,  1186,  1381,  2393,  1187,  1464,  1465,  3355,  1184,
    1185,  1188,  1381,  1188, -1673,  4045,   577,  2551,  3375,  3376,
     578,  1186,  1188,  2567,  1187,  1268,  2187,  2359,  2202,  1485,
    1486, -1472,  3132,   912,   913,  1186,  1737,  3014,  1187,  3388,
    1186,  2919,   557,  1187,  1186,  1522,  1674,  1187,  1186,  1184,
    1185,  1187,   876, -1472,  1188,  1512,   979,  2496,  2864,  1858,
   -1673,  2620,   980, -1472,   988,  3594,  2596,  2413,  1186,  3037,
     847,  1187,  2511,  1186,  2620,  3518,  1187,   997,  3519,  1201,
    1184,  1185,  2891,  2892,  1186,  1000,  1008,  1187,   802,   803,
    1037,  1936,   806,   807,  1186, -1472,   809,  1187,   811,  1018,
    1269,  1038,  2403,  1674,   118,  2822,  1270,  1186,  3016,  1222,
    1187,  2410,  2411,  1186,   727,  2226,  1187,  1186,  2119,  2120,
    1187,  1201,  2415,  2416,  2417,  2418,  1188,  2426,  2427,  1042,
    2331,  1184,  1185,   618,  1940,  1221,  1674,  1186,  2897,   618,
    1187,  2568,  4156, -1472,   492,  3947,  3948,  3949,  1073,  1188,
    1271,   608,   608,   608,  2591,  2383,  1188,  2594,  1188,  1222,
    1188,  4385,  4386,  1222,  3039, -1472,  2680,  1272,  1074,  1498,
    1499,  3045,  2573,  3046,  1229,  3053,   969,   618,  1698,  1075,
    1188,  1211,  1212,  1213,  1214,  1215,  1216,  1225,  2139,  1221,
     618,  2055,   751,  1224,  1699,  2587,  2588,  2589,  2701,  1186,
    1077,  1286,  1187,  2147,  1221,  1186, -1472,  2113,  1187,  1186,
    4043,  1186,  1187,  3346,  1187,  4271,  1186,  2238,  1104,  1187,
    4058,  1188,  3445,  1188,  1078,  2523,  2524,  3125,  2531,  1188,
    2533,  2534,  2535,  2536,  2537,  1576,  3057,  2540,  3058,  2542,
    1201,  1188,   942,  3446,  3059,  1188,  1236,  1236,  1236,  1240,
    4064,  4065,  2114,  1221,  4068,  4069,  4070,  4071,  3482,  3483,
    3060,  1079, -1472,  1082,  1188,  1760,  1204,  1083,  1761,  2563,
    4349,  1762,  3556,  3168,  3447, -1472,  2149,  1221,  1188,  3062,
    1084,  1155,   618,  1188,  2384,  2553, -1472,  1188,  1085,  3905,
    1001,  1188,  1265,  3065, -1472,  1577, -1472,  4131,  3070,  2690,
    1086,  2385,  2620,  1087,  2786,  2791,  3073,  2699,  1204,  2150,
    1633,  1188,   751,  2386,   618,  1273,  1188,  1267,  3840,  3841,
   -1472, -1472,  1088,  1578, -1472, -1472,  3075,  1188,   618,  1186,
    1276,  3077,  1187,  1089,  1674,  1090,  3129,  1188,  1104, -1472,
    1091,  1923,  3089,  1287,  2162,  1221,  1092,  2055,  2833,  2620,
    1188,  1275,  3079,  4166,  4167,  1002,  1188,  1003,  3011,  2606,
    1188,  2729,  4175,  1186,  1285,  3080,  1187,  2729,  2163,  1221,
   -1472,  3081, -1472,  1093,  2909,  3393,  2910,  2439,  1239,  1094,
    1188,  2164,  1221,  4149,  2751,  2607,  1095, -1472,  2211,  1096,
    2387,  1579,  1099, -1472,  1292,  3394,  1101,   618,  2055,   973,
     974,  1159,   975,  1186,   976,  3214,  1187, -1472,  3905,  3905,
    2772,  1102,  2774,  1206,  1207, -1472,  1941,  2911,   618,  2701,
     618,   618, -1472,  1103,  1201,  2168,  1221,  1204,  1859,  1107,
    1859,  1859, -1472,  1284,  1186,  1298,  3225,  1187,  2912,  3350,
    2608,  1108,  1188,  2609, -1472,  2428,  2429,  3231,  1188, -1472,
    3233,  2610,  1188,  1109,  1188,  1675,  2056,  3395, -1472,  1188,
    3511,  3283,  1736,  3619,   618,   618,  1580,  3625,  2611,  3627,
    1110,  3698,  1111,  2913,  3628, -1757,  1112,   957,   958,  4267,
     961,  1113,  3350,  1114,  3617,  1186,  2465,  1294,  1187,  2669,
    1221,  2316,  1115,  1191,  1192,  1116,  2851,  1923,  1368,  2317,
    1119,  3307,  2388,  1120,  2511,  1121,  2863,  3545,  1127,  2511,
    2705,  2706,  2873,   895,  2511,  3033,  2120,  4435,  2511,  1128,
    2872, -1472,  3245,  3036,  1221,  1129,  2025,  1130,  1193,  -625,
    2872,  1131,  2511,  2511,  2894,   618,  3528,  1200,  2771,  1194,
    2905,  3017,  2511, -1472,  1675,  1132,  2907,  2908,  1923,  1133,
    2026,  3905,  3905, -1472,   608,  1369,  1134,  1211,  1212,  1213,
    1214,  1215,  1216,  2872,  1306,  2389,  2612,  1327,  1576,  1135,
    2511,  2929,  1188,  1138,  1206,  1207,  2947,  3359,  1195,  -618,
    3360,  3529,  1370,  2964,  2269, -1472,  2270,  3629,  3361,  1076,
    1196,  4348,  3530,  4350,  2419,  1139,  2439,  2898,  2906,  3063,
    1221,  1213,  1214,  1215,  1216,  3362,  1188,  1140,  2440,  1141,
    2383,  1204,  2056,  2318,  2319,  3135,  3136,  1197,  1736,  4368,
    1329,  3630,   942,  3310,  3311,  2419,  1142,  4382,  1577,  1143,
    1236,  3399,  1221, -1472,  2334,  2335,  2336,  1576,  3531,  1144,
     608,  2511,   896,  1145,  3905,  2439,  1188,  1201,  3363,  1146,
    2874,  2875,  1147,  2320,  2420, -1472,  1578,  4400,  4401,  3905,
    1316,  3700,  1148,  2056,  2839,  1149,  2613,  2419,  2914,  1736,
    2900,  1581,  3905,  3421,  3422,  1198,  2904,  1188,  3561,  3562,
    3598,  3606,  2421,  3184,  2995,  2420,  1150,  2057,  1151,  3591,
    3592,  1346,  3943,  3621,  1221,  1152, -1472,  1577,  2467,  3635,
    1221,  2419,  4439,  3364,  2946,  -618,  3804,  1737,  3532,  3381,
     503,  1153,  2915,  2421,  1157,   897,  1209,  1210,  1211,  1212,
    1213,  1214,  1215,  1216,  1579,  2940,  1158,  2420,  1188,  3650,
    3651,   262,  1161,   264,  3905,  3935,  3939,  2968,  2057,  2384,
    3766,  2429,  1393,  3795,  3796,  2025,  3905,  3905,  1202,  3400,
    2422,  2731, -1472,  1162,  2465,  2421,  2385,  1166,  1206,  1207,
     895,  2420,  1170,  -781, -1472, -1472,  3781,  3782,  2386,  2026,
    2261,  1203,  1394,  1291,   618,   618,   618,  1171,   942,  3785,
    3782,  2422,   608,  1172, -1472,  1173, -1472,  1184,  1185,  2421,
    1371,  3786,  3782,  2941,  2025,  3905,  3845,  3422,  1174,  1580,
    3365,   618,  1223,  3366,  1675,  3905,  2614,  3805,  3806,  1347,
   -1472, -1472,  3807,  3808, -1472, -1472,  1351,  1126,  2026,  1348,
     618,   618,   618,  2422,  2620,  2423,  3112,  1395,  1354,   942,
    1362,  2058,  1396,  3154,  1204,  3703,  3864,  3848,  3782,  3156,
    3577,  3158,  3864,  3855,  3856,  2387,  3905,   618,  3905,  3603,
    3959,  3960,  3989,  3990,  1031,  1032,  2423,  2422,  3905,  1031,
    1032,  1363,  1859,  1737,  1674,  3533,  4056,  3680,  2942,  1367,
    2615,  3534,  3994,  3782,  3905,  1379,  3905,  1388,  3905,  1389,
    3367,  1390,  2058,  1405,  3935,  3905,  3995,  3782,  3939,   896,
    1593,  1594,  1595,  1596,  1597,  1412,  3905,  1413,  2423,  2616,
    1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  1408,  1910,
    1426,  3535,  3905,  3905,  1737,  3997,  3782,  -618,  2383,  1372,
    1429,  2511,  1430,  1911,  2511,  2511,  1432,  2872,  3905,  3905,
    1205,  1437,  2423,  3905,  1442,  3504,  3998,  3782,  3507,  3508,
     618,  1373,  1454,  2511,  1448,  2549,  4003,  4004,  4005,  4004,
    4186,  3990,  2466,  4059,  2383,  3520,  1458,  2388,  2872,  4187,
    3990,  3153,   897,  1456,  3730,  3731,  2467,  1461,  3528,  2872,
    4195,  3422,  2872,  4241,  4242,  1397,  1462,  3734,  1466,  3536,
    1470,  1206,  1207,  1374,  3737,  4287,  4288,  1469,  1598,  1599,
    1600,  1601,  4305,  3309,  3237,  1208,  1473,   608,   898,   899,
    1474,   901,  3294,   903,  1581,  4427,  4428,  3368,   506,  1475,
    3756,  3757,  1516,  3529,  1517,   904,  1518,   492,  3437,  3438,
    2389,  3304,  1521,  2872,  3530,  -618,  1664,  1665,  3406,  3407,
    2424,   521,  3648,  3649,  1523,  1524,  3369,  1542,  3313,  1544,
    1219,  3238,  2439,  3935,  3939,  3300,  1398,  2384,  3609,  1548,
     672,  1555,  1575,  3324,  2440,  3846,  3847,  1586,  3849,  3850,
     608,  2424,   502,  1165,  2385,  1674,  4170,  4056,  1621,  3220,
    3531,   562,  3337,  2943,  1632,   672,  2386,  3223,  1633,  1634,
    1672,  3537,  1912,  2384,  1682,  1707,  1691,  -618,   522,  1713,
    1602,  1740,  1603,  1604,  1605,  1733,  1741,  3442,  1744,  1747,
    2385,  1606,  1748,  2424,  3326,  1751,  1754,  1749,  1353,  1399,
    1750,  4103,  2386,  2833,  1752,   523,  1106,  1156,  1160,  1753,
    1756,  1757,  1780,  1209,  1210,  1211,  1212,  1213,  1214,  1215,
    1216,  1783,  3706,  3866,  1801,  1792,  1800,  2424,  1802,   699,
    1803,  1186,  1807,  1810,  1187,   503,  1811,  1835,  1812,   524,
    3398,  -618,  1839,  2387,  1913,  1821,   503,  3706,  2772,  1552,
    1553,  1554,  1826,   262,   699,   264,  1868,  1869,  1870,  3826,
    1871,  4292,  1873,  3316,  1201,  3814,  1882,  1573,  1884,  1914,
    -812,  1607,  2729,  1886,  1899,  1908,  2012,  1505,  2029,  2387,
    2030,  2025,   703,  1201,  2031,  -781,  2032,   525,  2049,   704,
    2751,  3432,  2033,  2034,   618,  2035,  2036,  2037,  2038,  1636,
    2039,  3684,  1640,   618,  2040,  2026,  2041,   703,  2042,  2699,
    2043,  1400,  2044,  2045,   704,  2046,  2051,   708,   504,   618,
    2047,  1657,  1658,  1608,  1609,  1662,  2048,  2352,  2069,  2070,
    2087,  1915,  2271,  2088,  3907,   898,   899,   900,   901,   902,
     903,  2089,   708,  1676,  1677,  1401,  2090,  1675,  2077,  2096,
    4006,  2102,   904,  2104,  2272,  2388,  2105,  2106,  2129,  2511,
    2130,  4292,  2131,  2136,  2137,  2169,  2138,  2273,  2155,  2511,
    2140,  2872,  2146,  2151,  2185,  2212,  2771,  2159,  2274,  2186,
    1675,  1031,  1032,  2176,  3054,   716,  2872,  3533,   608,  2620,
    2511,  2388,  2177,  3534,  2182,  2197,  2198,  2199,  1674,  2219,
    4420, -1164,  2225,  1216, -1301,  2264,  2235,  2291,   -65,  3974,
     716,  2257,  2282,   526,  2300,  2297,  2303,  2332,  2389,  2333,
    1916,  1674,  2360,  4431,  2362,  2348,  2364,  2275,  1674,  2276,
    4420,  2365,  2369,  3535,  1674,  1201,  4431,  2391,  2392,  2441,
    2395,  2396,  4297,  4298,   727,  4300,  2398,  2402,  2404,  2405,
    2406,  1204,  2407,  -618,  2389,  3740,  2277,  2408,  1953,   731,
     732,  1610,  2439,  2964,  2409,  1954,  2451,  1955,  2456,   727,
    1204,  2457,  2460,  2461,  1188,  1611,  1612,  3669,  1956,  1957,
     863,   527,  2463,  2470,   731,   732,  2464,  2472,  3590,  3590,
    3590,  2473,  2479,  1859,  2480,  2485,  4341,  2486,  4342,  4343,
    2491,  3536,  2492,  2499,  2519,   618,  2515,  2521,  2574,  1958,
    2552,  2592,   505,  2596,  1959,  1960,  2600,  2278,  2605,  2631,
    2632,  1961,  2633,  2643,  2243,  2644,  2656,  2675,  2677,  2686,
    2710,  2678,  2696,   506,  1962,  2679,  2695,  2711,  2712,   528,
    2708,  2721,  1963,  2724,   506,   529,  2723,  2709,  2725,  2718,
    2732,  4143,  1964,  2737,  2733,  2753,  4379,  1787,  2754,  2741,
    2756,  3974,  2757,  2758,   530,  2340,  1965,  2833,  2339,  2776,
     507,  2279,  2798,  -533,  3658,  2801,   508,  2775,  1675,  2777,
    1448,  4412,  2810,  1966,  3558,  2805,  2812,  2811,  2828,   531,
    1967,  1968,  2835,   618,  1956,  1957,  2836,  1969,  1206,  1207,
    2879,  2881,  2938,  3537,  2953,  1970,   532,  3582,  2973,  -887,
    2957,  1971,   509,  2959,  2974,  2978,  2982,  1206,  1207,  2983,
     510,  1984,  1204,  -618,  1901,  3963,  3008,  -764,  -764,  2097,
    1959,  3028,  3017,  3964,  3030,  3590,  3715,  3031,  3022,  -764,
    1972,  2620,   751,  3032,  3040,  3107,  3707,  4145,  3826,  3708,
    1962,  3041,  3720,  3084,  3086,  3088,  3093,  3965,  1963,  3096,
     757,  3097,  3109,  3114,  3102,   759,  3117,   751,   760,  1308,
    3137,  3707,  3118,   262,  3708,   264,  3121,  3124,  3134,  1973,
     798,  1974,  1965,   618,  1242,   757,  3140,  3131,  3152,  1975,
     759,  3157,  3165,   760,  3151,  3190,  1448,  1331,  3185,  1966,
    3189,  3235, -1757,  3193,  1976,  3217,  3205,  1332,  3442,  3758,
    3204,  3206,  3295,  3234,  3226,  3302,  3762,  1243,  3236,  3298,
    3301,  2101,  3306,  1333,  3709,  3710,  3308,  1971,  3309,  3312,
    3319,  3325,  -443,  3320,  3324,  1334,  1335,  1336,  2316,  3328,
    1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  3334,  3709,
    3710,  1337,  3339,  3335,  3377,  3336,  3402,   618,  1977,  1209,
    1210,  1211,  1212,  1213,  1214,  1215,  1216,  3356,  3385,  1206,
    1207,  3412,  3966,  3403,  1910,  3414,  1978,  3424,  3374,  3435,
    1979,  3443,  3460,  3461,  3384,  1244,  3417,  3484,  1911,   262,
    3451,   264,  3485,  4213,  3452,  3473,  3481,  1974,  2513,  3498,
    3505,  4143,  3557,  3565,  3559,  1975,  3569,  2154,  4213,  1245,
    3818,  2158,  3739,  1246,  3555,  3578,  3579,  3583,  1980,  3584,
    1976,  4223,  3580,  1981,   618,  3586,  3596,  3597,  4140,  3598,
    1982,   798,  1983,  2181,  3599,  3600,   798,  3604,  3610,  1984,
    1985,  3612,  3838,  3607,  3614,  3615,  3616,  1247,  3622,  3967,
    3618,  3767,  3623,  3624,  3636,  3590,  3590,  3637,  3590,  3590,
    3653,  3646,  3654,  3656,  2620,  3663,  1248,  3968,  3651,  3665,
    3671,  1986,   798,  3155,  1977,  3670,  3666,  3674, -1387,  3676,
    1249,  3677,  3974, -1392,  3721,  1987,  1988,  1989,  1990,   798,
    3969,  3688,  1978,  3701,  3702,  3545,  1593,  1594,  1595,  1596,
    1597,  3704,  3705,  3733,  3718,  3873,  4409,  4337,  1991,  3729,
    3743,  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  3735,
    3744,  3745,  3746,  3747,  3912,   608,  3749,  3750,  1250,  3548,
     798,   798,   798,   798,  3769,  3768,  3590,  3787,  3784,  3788,
    4409,  3791,   798,  3606,  4213,  3793,  1982,  1912,  1983,  3794,
    1251,  3797,  3799,  3800,  4327,  3801,  1985,  3812,  3813,  3829,
    1338,  3819,  3834,  3830,  3836,  1992,  3854,   608,  3860,  3913,
    3874,  3868,  3869,  3867,  3916,  3941,  4337,  1339,  3942,  3908,
     618,  1993,  3931,  3944,  3946,  1994,  3954,  3957,  3986,  3988,
    3991,  3999,   815,   816,  1598,  1599,  1600,  1601,  4009,  -309,
    4027,  4029,  4036,  4051,  1995,  4030,  4040,  4358,  4047,  1996,
    4000,  3955,  4048,  4063,  4066,  4067,  4072,  4075,  4077,  1913,
    4079,  4108,  1997,   798,  1991,  4213,  2933,  4213,  4105,  4111,
    -327,  4013,  4158,  3872,  4378,  4137,  4020,  4139,  4138,  4160,
    4155,  1031,  1032,  4172,  1914,  4213,  4437,  4188,  4184,  4189,
    4190,  4191,  1252,  4196,  4199,  4200,   942,  4209,  4210,  4220,
    4222,  1253,  4214,  4221,  4225,  4245,  4231,  4246,  4247,  4248,
    4257,  4256,  3970,  4263,  4268,  4270,  1254,  4213,  4213,  4272,
   -2289,  1992,  4424,   817,  4273,  -887,  4276,  4282,  4299,  4285,
    4301,  4296,  4302,  4304,  1255,  4315,  1602,  1993,  1603,  1604,
    1605,  1994,  4309,  1340,  4328,  4329,  1915,  1606,  1675,  4171,
    4331, -1556,   818,  4345,  3818,  4334,  4346,  4347,  4351,  4352,
    1995,  4359,  4365,  4367,  4356,   819,  4362,  4364,  4371,  4373,
    4376,  4377,  4380,  1256,  1257,  4384,  4390,  4388,  1997,  4397,
    3838,  4398,  3838,  4425,  4084,  4421,  4434,  4022,   820,  3567,
    2703,   821,  2544,  3568,  2843,  1054,  3772,  4146,  1341,  1258,
    4037,  4283,   822,  4284,  3770,  3774,  1460,  3911,  4432,  4392,
    4112,   576,   954,  3139,  2324,  4402,  1342,  3885,   798,  3886,
    3888,  1259,  3889,   823,  4312,  3891,  3892,  1607,  3893,  4207,
    3894,  3895,  3896,  4313,  3899,  1916,  4281,  3003,  4219,  4153,
    3900,  3901,  4218,  2246,  4042,  4039,  3416,  1952,  2503,   824,
    1998,  3230,  2023,  2701,  1520,  3120,   825,  2736,  4061,  3956,
    1790,  4159,  3659,   888,   816,   618,  4361,  4295,  4336,  4074,
    1260,  4177,  2054,   798,   798,   659,  3778,  2501,  3497,  1608,
    1609,  3317,   798,   798,   798,   798,   798,   798,   798,   798,
     798,   798,   798,   798,   798,  3001,   826,  2508,  2935,  3486,
    3490,  4310,   798,   798,  4007,   798,  3371,   798,  3513,  3862,
    3554,   798,  3748,  4157,   798,   798,   798,   798,  4294,   798,
     798,   798,  3738,  3449,  4090,   517,   518,  4193,   798,   798,
    2086,   798,   798,   798,   798,   798,  4044,  4194,   798,   798,
     798,   798,   798,   798,   798,   798,   798,   798,   798,  1675,
    3930,   798,   798,  4050,   817,   798,  4049,  2586,  3865,   798,
    2505,   798,   798,  3488,  2923,  1006,  1428,  4152,  2380,   618,
    3717,  2738,  1885,   798,   798,  3487,  2052,  2308,  2021,  3111,
    2719,   798,  3413,   818,  2964,  2964,  4164,  4165,   798,   798,
     798,  2759,   798,  2674,  3906,   977,   819,  2338,  2623,   798,
     798,   798,  1358,   798,   798,   798,   798,   798,  3401,   798,
     798,   798,   798,   798,   798,   798,   798,  1610,  3095,   820,
     798,   798,   821,  2621,   827,  1631,  2673,  2823,   828,  3993,
    3457,  1611,  1612,   822,   618,  3842,  4254,  3176,  3566,  1574,
    4255,  2693,  3839,  1482,   829,  1956,  1957,  3492,  2918,  3828,
    4383,  2590,   830,  2766,   823,  1805,  2717,  1774,  2744,  3661,
     831,  3428,  3427,  4317,  3467,  4228,   966,  2095,  1072,  2371,
    4325,  1851,   950,  2258,  1874,  2372,  3496,  3415,  -764,  -764,
     824,  1959,  4332,  1809,  4360,   832,  4249,   825,  4238,  4239,
    -764,  4303,  4433,  4436,  3742,  4426,  3431,   798,   833,   834,
    1824,  1962,  2349,  1483,  1484,  1485,  1486,  1487,  1488,  1963,
    1489,  1490,  1491,  1492,  1493,  1494,  1495,  3173,  1496,  1497,
    3453,  3675,  2296,  3831,  1080,   891,  1345,   826,  1767,  1816,
    3945,   893,  2076,  1965,  3953,  3099,  1350,   653,   654,     0,
    1058,  4369,  1059,   835,  1060,     0,  4374,  1448,     0,     0,
    1966,     0,     0,     0,     0,     0,     0,   798,     0,     0,
    1118,     0,     0,     0,     0,   798,     0,     0,     0,     0,
       0,     0,     0,     0,   836,     0,     0,  1136,  1971,     0,
    4308,     0,     0,  4410,     0,     0,     0,     0,     0,     0,
       0,     0,  1675,     0,     0,     0,   837,     0,   838,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   618,     0,     0,     0,  1675,     0,  4410,     0,     0,
       0,  1178,  1675,     0,     0,     0,     0,     0,  1675,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,     0,   264,  1242,     0,  1498,  1499,     0,  1974,     0,
       0,     0,     0,     0,     0,   827,  1975,     0,     0,   889,
       1,     0,     2,     0,     0,     0,     0,  2011,     0,     0,
       0,  1976,     0,     0,     0,   829,  1243,     0,     3,     0,
       0,     0,     4,   830,     0,  2576,     0,     0,     0,     0,
       0,   831,     0,     0,     0,     0,     5,     6,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     8,
       9,  1307,     0,     0,     0,     0,   832,     0,     0,     0,
       0,     0,     0,     0,     0,  1977,     0,     0,     0,   833,
     834,    10,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1978,  1244,     0,     0,     0,     0,     0,
      11,     0,     0,     0,     0,   798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1245,     0,
       0,    12,  1246,     0,   835,     0,     0,     0,     0,    13,
      14,    15,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    16,    17,     0,     0,     0,     0,  1982,     0,  1983,
       0,     0,     0,     0,    18,   836,  1247,  1985,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,     0,
       0,     0,     0,     0,     0,  1248,     0,   837,     0,   838,
       0,     0,     0,     0,    20,     0,     0,     0,     0,  1249,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,     0,     0,     0,     0,    22,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,  1481,   798,   798,   798,
       0,     0,     0,     0,     0,  1991,     0,     0,     0,     0,
       0,   798,     0,    24,     0,    25,     0,  1250,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,   798,     0,  1251,
       0,     0,     0,   798,     0,     0,   798,     0,   798,    27,
       0,  1546,  1547,    28,   798,     0,   798,   798,     0,     0,
    1557,  1558,  1992,     0,  1561,  1562,  1563,  1566,  1567,  1568,
    1569,  1570,  1571,     0,     0,     0,     0,     0,  1993,     0,
    1587,  1588,  1994,  1589,     0,  1590,     0,     0,     0,     0,
       0,     0,  1623,  1624,  1625,  1626,     0,     0,  1629,     0,
       0,  1995,     0,     0,     0,     0,  1637,  1638,     0,  1641,
    1642,     0,     0,     0,     0,     0,  1646,  1647,  1648,  1997,
       0,  1651,  1652,  1653,  1654,  1655,  1656,   798,     0,  1659,
    1660,     0,     0,  1663,     0,     0,     0,  1666,     0,  1670,
    1671,  1252,     0,    29,     0,     0,     0,     0,     0,     0,
    1253,  1678,  1679,     0,     0,     0,     0,     0,     0,  1687,
      30,     0,     0,     0,    31,  1254,  1692,  1693,  1694,     0,
       0,     0,     0,     0,     0,    32,  2577,     0,     0,     0,
       0,     0,     0,  1255,     0,     0,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1730,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,    35,     0,    36,     0,     0,    37,     0,     0,    38,
      39,     0,  1256,  1257,     0,     0,     0,    40,     0,    41,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,  1258,     0,
      44,     0,     0,     0,     0,    45,     0,    46,     0,     0,
      47,     0,     0,     0,     0,     0,     0,   496,     0,     0,
    1259,   497,     0,   816,     0,  1777,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    48,     0,     0,     0,    49,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1260,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2011,     0,     0,     0,    50,  1823,     0,     0,     0,     0,
       0,     0,     0,  1838,     0,     0,    51,     0,     0,     0,
      52,     0,     0,    53,     0,     0,     0,     0,     0,    54,
     798,     0,     0,   817,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,     0,
       0,     0,   818,     0,    56,     0,     4,     0,     0,     0,
       0,     0,     0,     0,    57,   819,     0,     0,     0,     0,
       5,     6,     0,  2011,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     8,     9,     0,     0,     0,   820,   798,
       0,   821,     0,   798,     0,     0,     0,     0,   798,   798,
       0,     0,   822,     0,     0,    10,     0,   798,   798,     0,
     798,   798,   798,   798,     0,   798,     0,     0,   798,     0,
       0,     0,     0,   823,    11,     0,     0,     0,   798,     0,
     798,   798,     0,   798,   798,   798,   798,     0,   798,     0,
       0,   798,     0,     0,     0,    12,     0,     0,     0,   824,
     798,     0,     0,    13,    14,    15,   825,   798,     0,   798,
       0,   798,   798,   798,   798,    16,    17,     0,   798,   798,
     798,     0,     0,     0,   798,   798,   798,     0,   798,     0,
     798,     0,   798,     0,   798,     0,   798,     0,     0,     0,
       0,   798,    19,  2107,     0,     0,   826,     0,     0,  1956,
    1957,     0,     0,     0,     0,     0,     0,     0,    20,   798,
       0,     0,     0,     0,     0,     0,   798,     0,     0,   798,
       0,     0,     0,     0,    21,   798,     0,     0,   798,    22,
       0,     0,   798,    23,     0,  1959,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1962,     0,    24,     0,    25,
       0,     0,     0,  1963,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1965,   798,     0,
       0,     0,     0,    27,     0,     0,     0,    28,     0,     0,
       0,  1448,     0,     0,  1966,  2189,  2191,  2193,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   827,     0,     0,     0,     0,     0,
       0,     0,  1971,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   829,  2227,     0,     0,     0,     0,
       0,     0,   830,     0,  2232,     0,  2233,     0,     0,     0,
     831,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   832,     0,    29,     0,     0,
       0,     0,     0,     0,   262,     0,   264,     0,   833,   834,
       0,     0,  1974,     0,    30,  1956,  1957,     0,    31,     0,
    1975,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,  1976,     0,     0,     0,     0,
      33,     0,     0,     0,     0,  2304,     0,     0,  -764,  -764,
       0,  1959,     0,   835,     0,     0,     0,     0,     0,     0,
    -764,     0,    34,     0,     0,    35,     0,    36,     0,     0,
      37,  1962,     0,    38,    39,     0,     0,     0,     0,  1963,
       0,    40,     0,    41,   836,     0,     0,     0,     0,  1977,
      42,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,  2011,  1965,    44,     0,   837,  1978,   838,    45,
       0,    46,     0,     0,    47,     0,     0,  1448,     0,     0,
    1966,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
       0,     0,     0,    49,     0,     0,     0,     0,  1971,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1982,     0,  1983,     0,     0,     0,     0,     0,     0,
       0,  1985,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2011,     0,     0,     0,     0,     0,     0,    50,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   798,     0,
      51,     0,   798,     0,    52,     0,     0,    53,     0,     0,
     262,     0,   264,    54,     0,     0,     0,     0,  1974,     0,
       0,     0,     0,     0,     0,     0,  1975,     0,     0,     0,
       0,     0,   798,   798,     0,     0,     0,     0,     0,  1991,
       0,  1976,    55,     0,     0,     0,     0,     0,    56,     0,
       0,     0,   798,     0,     0,     0,     0,     0,    57,     0,
       0,   798,     0,   798,     0,   798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2520,     0,
       0,     0,     0,     0,     0,   798,     0,     0,     0,     0,
     798,     0,     0,     0,     0,  1977,  1992,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1993,  1978,   798,     0,  1994,     0,     0,     0,
       0,  3239,  3240,     0,     0,     0,     0,  3241,     0,  3242,
       0,  3243,  3244,     0,     0,  1995,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2599,  3245,     0,
       0,  2601,     0,  1997,     0,     0,  2603,  2604,     0,     0,
       0,     0,     0,     0,     0,  1563,  2622,  1982,  1563,  1983,
    2625,  2626,     0,  2627,     0,     0,     0,  1985,   798,     0,
       0,     0,   798,     0,     0,     0,  2634,     0,  2635,     0,
       0,  2637,  2638,  2639,  2640,     0,  2641,     0,     0,     0,
       0,     0,     0,  3246,     0,     0,  3247,     0,  2645,     0,
       0,     0,     0,     0,  3248,  2646,     0,  2647,     0,  2648,
    2649,  2650,     0,     0,     0,     0,  2653,  2654,  2655,   798,
       0,  3249,  2657,  2658,  2659,     0,  2660,     0,  2662,     0,
    2664,     0,  2666,     0,  2667,  1991,     0,     0,  3250,  2668,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2681,     0,     0,
       0,     0,  3251,     0,  3252,     0,     0,     0,     0,     0,
       0,     0,     0,  2691,     0,     0,  2694,  3253,  3254,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1993,     0,
       0,     0,  1994,     0,     0,     0,     0,     0,     0,  3255,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1995,     0,     0,     0,     0,     0,     0,     0,     0,
     798,   798,     0,     0,     0,     0,     0,     0,  3256,  1997,
       0,     0,     0,     0,     0,     0,     0,  3257,  3258,     0,
    3259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3260,  3261,  3262,  2011,     0,     0,     0,     0,     0,     0,
       0,     0,   910,     0,     0,     0,   798,     0,     0,  3263,
    3264,  3265,   867,   911,     0,     0,  3266,     0,     0,  3267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3268,  3269,   912,   913,   798,
     798,     0,   798,     0,     0,   914,     0,     0,     0,     0,
     915,   798,     0,     0,     0,     0,   798,     0,     0,   798,
       0,   798,   798,     0,     0,     0,     0,     0,     0,     0,
       0,  3270,  3271,     0,     0,     0,     0,   916,     0,   917,
       0,   918,   798,     0,     0,     0,     0,     0,     0,     0,
     919,     0,     0,     0,     0,     0,  3272,   798,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     798,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1757,   920,     0,     0,
       0,     0,   921,     0,     0,   922,     0,  3273,     0,     0,
     798,  3274,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3275,   798,     0,     0,     0,     0,     0,
       0,   923,     0,   924,     0,     0,     0,     0,     0,     0,
     925,     0,   926,     0,     0,   798,     0,     0,     0,     0,
       0,     0,     0,     0,   798,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   927,   928,   929,     0,
       0,     0,     0,     0,     0,     0,     0,  3276,     0,     0,
    3277,     0,     0,  3278,  3279,  3280,  3281,     0,     0,   930,
       0,     0,     0,     0,     0,     0,  3013,     0,     0,     0,
    3015,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   931,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2921,     0,  3282,  3283,     0,
    3043,  3044,  1954,     0,     0,     0,  3544,     0,   932,     0,
       0,     0,     0,     0,     0,  1956,  1957,     0,     0,     0,
    3064,     0,     0,  3284,     0,     0,     0,     0,     0,  3074,
       0,  3076,     0,  3078,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1958,     0,     0,     0,
       0,  1959,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1962,     0,   933,     0,     0,     0,     0,     0,  1963,
       0,     0,  3108,     0,     0,     0,     0,     0,     0,  1964,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   934,
       0,     0,     0,  1965,     0,     0,     0,     0,     0,     0,
     935,   936,     0,     0,   937,   938,     0,  1448,     0,     0,
    1966,     0,     0,     0,     0,     0,     0,  1967,     0,     0,
       0,     0,     0,     0,  2922,   939,     0,     0,     0,     0,
       0,     0,  1970,     0,     0,   798,  3163,     0,  1971,     0,
    3167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1972,   940,     0,
       0,     0,     0,     0,   798,   798,     0,     0,     0,     0,
       0,   941,     0,   798,     0,     0,     0,  3199,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,     0,   264,     0,     0,     0,     0, -2319,  1974,     0,
       0,   942,     0,     0,     0,     0,  1975,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   943,
     944,  1976,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3544,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   945,     0,
       0,     0,     0,     0,     0,  1977,     0,     0,     0, -2319,
       0,     0,     0,     0,     0,  2011,     0,   946,     0,     0,
       0,     0,     0,  1978,     0,     0,     0,  1979,  3296,  3297,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     798,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1981,     0,     0,     0,     0,     0,     0,  1982,     0,  1983,
       0,   798,     0,     0,     0,     0,     0,  1985,     0,     0,
       0,     0,     0,     0,  3342,   798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   798,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3379,  3380,     0,
       0,     0,     0,  1988,     0,     0,     0,     0,     0,  3387,
       0,     0,     0,     0,  3389,     0,     0,  3390,     0,  3391,
    3392,     0,     0,     0,     0,  1991,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3409,     0,     0,     0,     0,
       0,  3903,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3409,     0,
       0,  3929,  1992,     0,     0,  3929,  3929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1993,     0,
       0,     0,  1994,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   798,     0,     0,     0,     0,     0,
       0,  1995,  3454,     0,   798,     0,     0,     0,     0,     0,
       0,     0,     0,   798,     0,   798,     0,     0,     0,  1997,
       0,     0,     0,  3409,     0,     0,     0,     0,     0,     0,
       0,     0,  3478,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   798,     0,     0,     0,     0,     0,
    3903,  3903,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3929,     0,     0,     0,     0,
       0,     0,     0,     0,  3929,     0,     0,     0,  3929,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   798,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   798,
       0,   798,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   798,     0,  3903,  3903,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4154,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3409,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3929,     0,  3929,  3929,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3686,  3687,   798,     0,  3903,     0,     0,     0,
       0,  3199,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3903,   798,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3903,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   798,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   798,  3903,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3903,  3903,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   798,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3903,  3792,     0,
       0,     0,     0,     0,   798,     0,     0,  3903,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3409,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   798,     0,  3199,     0,     0,     0,     0,  3903,     0,
    3903,     0,     0,     0,     0,     0,  3163,     0,     0,     0,
    3903,     0,     0,     0,   798,     0,     0,   798,     0,     0,
       0,     0,     0,     0,     0,     0,  3903,     0,  3903,     0,
    3903,     0,     0,     0,     0,     0,     0,  3903,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3903,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3903,  3903,     0,     0,     0,     0,
     798,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3903,  3903,     0,     0,     0,  3903,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   798,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3980,     0,     0,     0,     0,     0,     0,     0,
       0,  3985,     0,  3987,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4008,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3199,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4106,     0,  4107,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4115,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4211,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3409,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4363,   139,     0,   668,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   669,     0,   148,   149,   150,   151,   152,   670,
     154,     0,   155,     0,     0,   671,   156,   672,   673,   674,
     157,   675,     0,   158,   159,   160,  1667,   161,     0,   162,
     163,     0,     0,   164,   676,   677,   165,   166,  4411,   167,
     678,   679,   169,   170,     0,   171,   172,   173,   174,   175,
     680,   177,     0,   681,   179,   682,   683,   684,   685,   686,
     687,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   688,   200,     0,
     201,   689,   690,   202,     0,  3409,   203,   691,   692,     0,
     204,   693,   694,     0,   205,   206,   207,   695,   696,   697,
       0,     0,     0,     0,   698,   210,   699,     0,     0,   700,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   701,     0,   236,   237,   238,   702,   703,
     239,   240,     0,   241,   242,   243,   704,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     705,   251,   706,   253,     0,   254,     0,   707,     0,   255,
     256,   257,     0,   258,   708,     0,   259,   260,     0,     0,
       0,   709,   262,   263,   264,   710,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   711,   270,   271,
     712,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   713,     0,
    1668,   281,     0,   714,   282,   283,     0,     0,     0,     0,
       0,   715,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   716,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   717,   306,   307,   308,   309,   718,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     719,   317,     0,     0,   720,   319,   721,   320,     0,   321,
     722,   723,   724,   725,   726,   326,   327,   328,   329,   330,
       0,   727,   331,   332,     0,     0,   333,   334,   335,   336,
     728,   729,   730,   337,   338,     0,   731,   732,     0,   339,
     340,   733,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   734,   350,     0,   351,   352,   353,   354,   735,
     356,   357,   358,   359,   736,   737,   362,   738,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   739,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,   740,
     741,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,   742,   397,   398,   399,   400,   401,   743,   403,
     404,   405,   406,     0,   744,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   745,   746,   432,   433,     0,   434,   435,   747,   437,
     438,   439,   748,   749,   440,   441,   442,   443,   750,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,   751,
     451,   452,     0,   752,   753,   754,   755,     0,     0,     0,
       0,  1669,   457,   458,   459,     0,   756,   757,   758,   461,
     462,   463,   759,   464,   465,   760,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     761,   474,   475,     0,     0,   762,   763,   764,   765,   476,
       0,     0,   477,   766,     0,   767,   478,   479,   480,   481,
     482,   768,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   769,     0,     0,     0,
       0,   770,   771,     0,     0,     0,     0,   772,   773,     0,
       0,   774,   775,     0,     0,   776,   777,   139,     0,   668,
     141,   142,   143,   144,  3159,     0,   145,     0,     0,     0,
     146,     0,     0,   669,     0,   148,   149,   150,   151,   152,
     670,   154,     0,   155,     0,     0,  3160,   156,   672,   673,
     674,   157,   675,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   676,   677,   165,   166,     0,
     167,   678,   679,   169,   170,     0,   171,   172,   173,   174,
     175,   680,   177,     0,   681,   179,   682,   683,   684,   685,
     686,   687,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   688,   200,
       0,   201,   689,   690,   202,     0,     0,   203,   691,   692,
       0,   204,   693,   694,     0,   205,   206,   207,   695,   696,
     697,     0,     0,     0,     0,   698,   210,   699,     0,     0,
    3161,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   701,     0,   236,   237,   238,   702,
     703,   239,   240,     0,   241,   242,   243,   704,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   705,   251,   706,   253,     0,   254,     0,   707,     0,
     255,   256,   257,     0,   258,   708,     0,   259,   260,     0,
       0,     0,   709,   262,   263,   264,   710,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   711,   270,
     271,   712,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   713,
       0,     0,   281,     0,   714,   282,   283,     0,     0,     0,
       0,     0,   715,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   716,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   717,   306,   307,   308,   309,
     718,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   719,   317,     0,     0,   720,   319,   721,   320,     0,
     321,   722,   723,   724,   725,   726,   326,   327,   328,   329,
     330,     0,   727,   331,   332,     0,     0,   333,   334,   335,
     336,   728,   729,   730,   337,   338,     0,   731,   732,     0,
     339,   340,   733,  3162,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   734,   350,     0,   351,   352,   353,   354,
     735,   356,   357,   358,   359,   736,   737,   362,   738,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   739,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
     740,   741,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,   742,   397,   398,   399,   400,   401,   743,
     403,   404,   405,   406,     0,   744,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,   745,   746,   432,   433,     0,   434,   435,   747,
     437,   438,   439,   748,   749,   440,   441,   442,   443,   750,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
     751,   451,   452,     0,   752,   753,   754,   755,     0,     0,
       0,     0,     0,   457,   458,   459,     0,   756,   757,   758,
     461,   462,   463,   759,   464,   465,   760,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   761,   474,   475,     0,     0,   762,   763,   764,   765,
     476,     0,     0,   477,   766,     0,   767,   478,   479,   480,
     481,   482,   768,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   769,     0,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     668,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   669,     0,   148,   149,   150,   151,
     152,   670,   154,     0,   155,     0,     0,   671,   156,   672,
     673,   674,   157,   675,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   676,   677,   165,   166,
       0,   167,   678,   679,   169,   170,     0,   171,   172,   173,
     174,   175,   680,   177,     0,   681,   179,   682,   683,   684,
     685,   686,   687,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   688,
     200,     0,   201,   689,   690,   202,     0,     0,   203,   691,
     692,     0,   204,   693,   694,     0,   205,   206,   207,   695,
     696,   697,     0,     0,     0,     0,   698,   210,   699,     0,
       0,   700,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   701,     0,   236,   237,   238,
     702,   703,   239,   240,     0,   241,   242,   243,   704,     0,
     244,     0,     0,     0,   245,  2188,   246,     0,   247,     0,
     248,   249,   705,   251,   706,   253,     0,   254,     0,   707,
       0,   255,   256,   257,     0,   258,   708,     0,   259,   260,
       0,     0,     0,   709,   262,   263,   264,   710,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   711,
     270,   271,   712,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     713,     0,     0,   281,     0,   714,   282,   283,     0,     0,
       0,     0,     0,   715,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   716,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   717,   306,   307,   308,
     309,   718,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   719,   317,     0,     0,   720,   319,   721,   320,
       0,   321,   722,   723,   724,   725,   726,   326,   327,   328,
     329,   330,     0,   727,   331,   332,     0,     0,   333,   334,
     335,   336,   728,   729,   730,   337,   338,     0,   731,   732,
       0,   339,   340,   733,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   734,   350,     0,   351,   352,   353,
     354,   735,   356,   357,   358,   359,   736,   737,   362,   738,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   739,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,   740,   741,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,   742,   397,   398,   399,   400,   401,
     743,   403,   404,   405,   406,     0,   744,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   745,   746,   432,   433,     0,   434,   435,
     747,   437,   438,   439,   748,   749,   440,   441,   442,   443,
     750,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,   751,   451,   452,     0,   752,   753,   754,   755,     0,
       0,     0,     0,     0,   457,   458,   459,     0,   756,   757,
     758,   461,   462,   463,   759,   464,   465,   760,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   761,   474,   475,     0,     0,   762,   763,   764,
     765,   476,     0,     0,   477,   766,     0,   767,   478,   479,
     480,   481,   482,   768,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,     0,   769,     0,
       0,     0,     0,   770,   771,     0,     0,     0,     0,   772,
     773,     0,     0,   774,   775,     0,     0,   776,   777,   139,
       0,   668,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   669,     0,   148,   149,   150,
     151,   152,   670,   154,     0,   155,     0,     0,   671,   156,
     672,   673,   674,   157,   675,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   676,   677,   165,
     166,     0,   167,   678,   679,   169,   170,     0,   171,   172,
     173,   174,   175,   680,   177,     0,   681,   179,   682,   683,
     684,   685,   686,   687,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     688,   200,     0,   201,   689,   690,   202,     0,     0,   203,
     691,   692,     0,   204,   693,   694,     0,   205,   206,   207,
     695,   696,   697,     0,     0,     0,     0,   698,   210,   699,
       0,     0,   700,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   701,     0,   236,   237,
     238,   702,   703,   239,   240,     0,   241,   242,   243,   704,
       0,   244,     0,     0,     0,   245,  2190,   246,     0,   247,
       0,   248,   249,   705,   251,   706,   253,     0,   254,     0,
     707,     0,   255,   256,   257,     0,   258,   708,     0,   259,
     260,     0,     0,     0,   709,   262,   263,   264,   710,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     711,   270,   271,   712,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   713,     0,     0,   281,     0,   714,   282,   283,     0,
       0,     0,     0,     0,   715,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   716,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   717,   306,   307,
     308,   309,   718,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   719,   317,     0,     0,   720,   319,   721,
     320,     0,   321,   722,   723,   724,   725,   726,   326,   327,
     328,   329,   330,     0,   727,   331,   332,     0,     0,   333,
     334,   335,   336,   728,   729,   730,   337,   338,     0,   731,
     732,     0,   339,   340,   733,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   734,   350,     0,   351,   352,
     353,   354,   735,   356,   357,   358,   359,   736,   737,   362,
     738,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   739,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,   740,   741,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,   742,   397,   398,   399,   400,
     401,   743,   403,   404,   405,   406,     0,   744,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,   745,   746,   432,   433,     0,   434,
     435,   747,   437,   438,   439,   748,   749,   440,   441,   442,
     443,   750,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,   751,   451,   452,     0,   752,   753,   754,   755,
       0,     0,     0,     0,     0,   457,   458,   459,     0,   756,
     757,   758,   461,   462,   463,   759,   464,   465,   760,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   761,   474,   475,     0,     0,   762,   763,
     764,   765,   476,     0,     0,   477,   766,     0,   767,   478,
     479,   480,   481,   482,   768,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   769,
       0,     0,     0,     0,   770,   771,     0,     0,     0,     0,
     772,   773,     0,     0,   774,   775,     0,     0,   776,   777,
     139,     0,   668,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   669,     0,   148,   149,
     150,   151,   152,   670,   154,     0,   155,     0,     0,   671,
     156,   672,   673,   674,   157,   675,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   676,   677,
     165,   166,     0,   167,   678,   679,   169,   170,     0,   171,
     172,   173,   174,   175,   680,   177,     0,   681,   179,   682,
     683,   684,   685,   686,   687,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   688,   200,     0,   201,   689,   690,   202,     0,     0,
     203,   691,   692,     0,   204,   693,   694,     0,   205,   206,
     207,   695,   696,   697,     0,     0,     0,     0,   698,   210,
     699,     0,     0,   700,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   701,     0,   236,
     237,   238,   702,   703,   239,   240,     0,   241,   242,   243,
     704,     0,   244,     0,     0,     0,   245,  2192,   246,     0,
     247,     0,   248,   249,   705,   251,   706,   253,     0,   254,
       0,   707,     0,   255,   256,   257,     0,   258,   708,     0,
     259,   260,     0,     0,     0,   709,   262,   263,   264,   710,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   711,   270,   271,   712,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   713,     0,     0,   281,     0,   714,   282,   283,
       0,     0,     0,     0,     0,   715,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   716,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   717,   306,
     307,   308,   309,   718,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   719,   317,     0,     0,   720,   319,
     721,   320,     0,   321,   722,   723,   724,   725,   726,   326,
     327,   328,   329,   330,     0,   727,   331,   332,     0,     0,
     333,   334,   335,   336,   728,   729,   730,   337,   338,     0,
     731,   732,     0,   339,   340,   733,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   734,   350,     0,   351,
     352,   353,   354,   735,   356,   357,   358,   359,   736,   737,
     362,   738,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   739,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,   740,   741,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,   742,   397,   398,   399,
     400,   401,   743,   403,   404,   405,   406,     0,   744,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   745,   746,   432,   433,     0,
     434,   435,   747,   437,   438,   439,   748,   749,   440,   441,
     442,   443,   750,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,   751,   451,   452,     0,   752,   753,   754,
     755,     0,     0,     0,     0,     0,   457,   458,   459,     0,
     756,   757,   758,   461,   462,   463,   759,   464,   465,   760,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   761,   474,   475,     0,     0,   762,
     763,   764,   765,   476,     0,     0,   477,   766,     0,   767,
     478,   479,   480,   481,   482,   768,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,     0,
     769,     0,     0,     0,     0,   770,   771,     0,     0,     0,
       0,   772,   773,     0,     0,   774,   775,     0,     0,   776,
     777,   139,     0,   668,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   669,     0,   148,
     149,   150,   151,   152,   670,   154,     0,   155,     0,     0,
     671,   156,   672,   673,   674,   157,   675,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   676,
     677,   165,   166,     0,   167,   678,   679,   169,   170,     0,
     171,   172,   173,   174,   175,   680,   177,     0,   681,   179,
     682,   683,   684,   685,   686,   687,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   688,   200,     0,   201,   689,   690,   202,     0,
       0,   203,   691,   692,     0,   204,   693,   694,     0,   205,
     206,   207,   695,   696,   697,     0,     0,     0,     0,   698,
     210,   699,     0,     0,   700,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   701,     0,
     236,   237,   238,   702,   703,   239,   240,     0,   241,   242,
     243,   704,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   705,   251,   706,   253,     0,
     254,     0,   707,     0,   255,   256,   257,     0,   258,   708,
       0,   259,   260,     0,     0,     0,   709,   262,   263,   264,
     710,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   711,   270,   271,   712,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   713,     0,     0,   281,     0,   714,   282,
     283,     0,     0,     0,     0,     0,   715,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   716,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   717,
     306,   307,   308,   309,   718,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   719,   317,     0,     0,   720,
     319,   721,   320,     0,   321,   722,   723,   724,   725,   726,
     326,   327,   328,   329,   330,     0,   727,   331,   332,     0,
       0,   333,   334,   335,   336,   728,   729,   730,   337,   338,
       0,   731,   732,     0,   339,   340,   733,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   734,   350,     0,
     351,   352,   353,   354,   735,   356,   357,   358,   359,   736,
     737,   362,   738,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   739,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   740,   741,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,   742,   397,   398,
     399,   400,   401,   743,   403,   404,   405,   406,     0,   744,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   745,   746,   432,   433,
       0,   434,   435,   747,   437,   438,   439,   748,   749,   440,
     441,   442,   443,   750,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,   751,   451,   452,     0,   752,   753,
     754,   755,     0,     0,     0,     0,     0,   457,   458,   459,
       0,   756,   757,   758,   461,   462,   463,   759,   464,   465,
     760,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   761,   474,   475,     0,     0,
     762,   763,   764,   765,   476,     0,     0,   477,   766,     0,
     767,   478,   479,   480,   481,   482,   768,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
       0,   769,     0,     0,     0,     0,   770,   771,     0,     0,
       0,     0,   772,   773,     0,     0,   774,   775,     0,     0,
     776,   777,   139,     0,   668,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   669,     0,
     148,   149,   150,   151,   152,   670,   154,     0,   155,     0,
       0,   671,   156,   672,   673,   674,   157,   675,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     676,   677,   165,   166,     0,   167,   678,   679,   169,   170,
       0,   171,   172,   173,   174,   175,   680,   177,     0,   681,
     179,   682,   683,   684,   685,   686,   687,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   688,   200,     0,   201,   689,   690,   202,
       0,     0,   203,   691,   692,     0,   204,   693,   694,     0,
     205,   206,   207,   695,   696,   697,     0,     0,     0,     0,
     698,   210,   699,     0,     0,   700,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   701,
       0,   236,   237,   238,   702,   703,   239,   240,     0,   241,
     242,   243,   704,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   705,   251,   706,   253,
       0,   254,     0,   707,     0,   255,   256,   257,     0,   258,
     708,     0,   259,   260,     0,     0,     0,   709,   262,   263,
     264,   710,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   711,   270,   271,   712,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   713,     0,     0,   281,     0,   714,
     282,   283,     0,     0,     0,     0,     0,   715,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   716,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     717,   306,   307,   308,   309,   718,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   719,   317,     0,     0,
     720,   319,   721,   320,     0,   321,   722,   723,   724,   725,
     726,   326,   327,   328,   329,   330,     0,   727,   331,   332,
       0,     0,   333,   334,   335,   336,   728,   729,   730,   337,
     338,     0,   731,   732,     0,   339,   340,   733,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   734,   350,
       0,   351,   352,   353,   354,   735,   356,   357,   358,   359,
     736,   737,   362,   738,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   739,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,   740,   741,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,   742,   397,
     398,   399,   400,   401,   743,   403,   404,   405,   406,     0,
     744,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   745,   746,   432,
     433,     0,   434,   435,   747,   437,   438,   439,   748,   749,
     440,   441,   442,   443,   750,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,   751,   451,   452,     0,   752,
     753,   754,   755,     0,     0,     0,     0,     0,   457,   458,
     459,     0,   756,   757,   758,   461,   462,   463,   759,   464,
     465,   760,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   761,   474,   475,     0,
       0,   762,   763,   764,   765,   476,     0,     0,   477,   766,
       0,   767,   478,   479,   480,   481,   482,   768,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,     0,   769,     0,     0,     0,     0,   770,   771,     0,
       0,     0,     0,   772,  1117,     0,     0,   774,   775,     0,
       0,   776,   777,   139,     0,   668,   141,   142,   143,   144,
    1701,     0,   145,     0,     0,     0,  1702,     0,     0,   669,
       0,   148,   149,   150,   151,   152,   670,   154,     0,   155,
       0,     0,   671,   156,   672,   673,   674,   157,   675,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   676,   677,   165,   166,     0,   167,   678,   679,   169,
     170,     0,   171,   172,   173,   174,   175,   680,   177,     0,
     681,   179,   682,   683,   684,   685,   686,   687,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   688,   200,     0,   201,   689,   690,
     202,     0,     0,   203,   691,   692,     0,   204,   693,   694,
       0,   205,   206,   207,   695,   696,   697,     0,     0,     0,
       0,   698,   210,   699,     0,     0,   700,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     701,     0,   236,   237,   238,   702,   703,   239,   240,     0,
     241,   242,   243,   704,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   705,   251,   706,
     253,     0,   254,     0,   707,     0,   255,   256,   257,     0,
     258,   708,     0,   259,   260,     0,     0,     0,   709,   262,
     263,   264,   710,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   711,   270,   271,   712,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   713,     0,     0,   281,     0,
     714,   282,   283,     0,     0,     0,     0,     0,   715,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   716,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   717,   306,   307,   308,   309,   718,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   719,   317,     0,
       0,   720,   319,   721,   320,     0,   321,   722,   723,   724,
     725,   726,   326,   327,   328,   329,   330,     0,   727,   331,
     332,     0,     0,   333,   334,   335,   336,   728,     0,   730,
     337,   338,     0,   731,   732,     0,   339,   340,   733,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   734,
     350,     0,   351,   352,   353,   354,   735,   356,   357,   358,
     359,   736,   737,   362,   738,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   739,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,   740,   741,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,   742,
     397,   398,   399,   400,   401,   743,   403,   404,   405,   406,
       0,   744,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,   745,   746,
     432,   433,     0,   434,   435,   747,   437,   438,   439,   748,
     749,   440,   441,   442,   443,   750,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,   751,   451,   452,     0,
     752,   753,   754,   755,     0,     0,     0,     0,     0,   457,
     458,   459,     0,   756,   757,   758,   461,   462,   463,   759,
     464,   465,   760,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   761,   474,   475,
       0,     0,   762,   763,   764,   765,   476,     0,     0,   477,
     766,     0,   767,   478,   479,   480,   481,   482,   768,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,     0,   769,     0,     0,     0,     0,   770,   771,
       0,     0,     0,     0,   772,   773,     0,     0,   774,   775,
       0,     0,   776,   777,   139,     0,   668,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     669,     0,   148,   149,   150,   151,   152,   670,   154,     0,
     155,     0,     0,   671,   156,   672,   673,   674,   157,   675,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   676,   677,   165,   166,     0,   167,   678,   679,
     169,   170,     0,   171,   172,   173,   174,   175,   680,   177,
       0,   681,   179,   682,   683,   684,   685,   686,   687,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   688,   200,     0,   201,   689,
     690,   202,     0,     0,   203,   691,   692,     0,   204,   693,
     694,     0,   205,   206,   207,   695,   696,   697,     0,     0,
       0,     0,   698,   210,   699,     0,     0,   700,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   701,     0,   236,   237,   238,   702,   703,   239,   240,
       0,   241,   242,   243,   704,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   705,   251,
     706,   253,     0,   254,     0,   707,     0,   255,   256,   257,
       0,   258,   708,     0,   259,   260,     0,     0,     0,   709,
     262,   263,   264,   710,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   711,   270,   271,   712,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   713,     0,     0,   281,
       0,   714,   282,   283,     0,     0,     0,     0,     0,   715,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     716,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   717,   306,   307,   308,   309,   718,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   719,   317,
       0,     0,   720,   319,   721,   320,     0,   321,   722,   723,
     724,   725,   726,   326,   327,   328,   329,   330,     0,   727,
     331,   332,     0,     0,   333,   334,   335,   336,   728,   729,
     730,   337,   338,     0,   731,   732,     0,   339,   340,   733,
       0,   342,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     734,   350,     0,   351,   352,   353,   354,   735,   356,   357,
     358,   359,   736,   737,   362,   738,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   739,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,   740,   741,   391,
       0,   392,     0,   393,   394,     0,   395,   396,     0,     0,
     742,   397,   398,   399,   400,   401,   743,   403,   404,   405,
     406,     0,   744,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   745,
     746,   432,   433,     0,   434,   435,   747,   437,   438,   439,
     748,   749,   440,   441,   442,   443,   750,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,   751,   451,   452,
       0,   752,   753,   754,   755,     0,     0,     0,     0,     0,
     457,   458,   459,     0,   756,   757,   758,   461,   462,   463,
     759,   464,   465,   760,   466,   467,     0,   468,   469,     0,
       0,   470,     0,     0,   471,     0,   472,     0,  1776,   474,
     475,     0,     0,   762,   763,   764,   765,   476,     0,     0,
     477,   766,     0,   767,   478,   479,   480,   481,   482,   768,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   769,     0,     0,     0,     0,   770,
     771,     0,     0,     0,     0,   772,   773,     0,     0,   774,
     775,     0,     0,   776,   777,   139,     0,   668,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   669,     0,   148,   149,   150,   151,   152,   670,   154,
       0,   155,     0,     0,   671,   156,   672,   673,   674,   157,
     675,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,   676,   677,   165,   166,     0,   167,   678,
     679,   169,   170,     0,   171,   172,   173,   174,   175,   680,
     177,     0,   681,   179,   682,   683,   684,   685,   686,   687,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   688,   200,     0,   201,
     689,   690,   202,     0,     0,   203,   691,   692,     0,   204,
     693,   694,     0,   205,   206,   207,   695,   696,   697,     0,
       0,     0,     0,   698,   210,   699,     0,     0,   700,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   701,     0,   236,   237,   238,   702,   703,   239,
     240,     0,   241,   242,   243,   704,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   705,
     251,   706,   253,     0,   254,     0,   707,     0,   255,   256,
     257,     0,   258,   708,     0,   259,   260,     0,     0,     0,
     709,   262,   263,   264,   710,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   711,   270,   271,  2598,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   713,     0,     0,
     281,     0,   714,   282,   283,     0,     0,     0,     0,     0,
     715,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   716,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   717,   306,   307,   308,   309,   718,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   719,
     317,     0,     0,   720,   319,   721,   320,     0,   321,   722,
     723,   724,   725,   726,   326,   327,   328,   329,   330,     0,
     727,   331,   332,     0,     0,   333,   334,   335,   336,   728,
     729,   730,   337,   338,     0,   731,   732,     0,   339,   340,
     733,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   734,   350,     0,   351,   352,   353,   354,   735,   356,
     357,   358,   359,   736,   737,   362,   738,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     739,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   740,   741,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,   742,   397,   398,   399,   400,   401,   743,   403,   404,
     405,   406,     0,   744,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
     745,   746,   432,   433,     0,   434,   435,   747,   437,   438,
     439,   748,   749,   440,   441,   442,   443,   750,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,   751,   451,
     452,     0,   752,   753,   754,   755,     0,     0,     0,     0,
       0,   457,   458,   459,     0,   756,   757,   758,   461,   462,
     463,   759,   464,   465,   760,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   761,
     474,   475,     0,     0,   762,   763,   764,   765,   476,     0,
       0,   477,   766,     0,   767,   478,   479,   480,   481,   482,
     768,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,     0,   769,     0,     0,     0,     0,
     770,   771,     0,     0,     0,     0,   772,   773,     0,     0,
     774,   775,     0,     0,   776,   777,   139,     0,   668,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   669,     0,   148,   149,   150,   151,   152,   670,
     154,     0,   155,     0,     0,   671,   156,   672,   673,   674,
     157,   675,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   676,   677,   165,   166,     0,   167,
     678,   679,   169,   170,     0,   171,   172,   173,   174,   175,
     680,   177,     0,   681,   179,   682,   683,   684,   685,   686,
     687,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   688,   200,     0,
     201,   689,   690,   202,     0,     0,   203,   691,   692,     0,
     204,   693,   694,     0,   205,   206,   207,   695,   696,   697,
       0,     0,     0,     0,   698,   210,   699,     0,     0,   700,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   701,     0,   236,   237,   238,   702,   703,
     239,   240,     0,   241,   242,   243,   704,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     705,   251,   706,   253,     0,   254,     0,   707,     0,   255,
     256,   257,     0,   258,   708,     0,   259,   260,     0,     0,
       0,   709,   262,   263,   264,   710,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   711,   270,   271,
    2652,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   713,     0,
       0,   281,     0,   714,   282,   283,     0,     0,     0,     0,
       0,   715,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   716,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   717,   306,   307,   308,   309,   718,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     719,   317,     0,     0,   720,   319,   721,   320,     0,   321,
     722,   723,   724,   725,   726,   326,   327,   328,   329,   330,
       0,   727,   331,   332,     0,     0,   333,   334,   335,   336,
     728,   729,   730,   337,   338,     0,   731,   732,     0,   339,
     340,   733,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   734,   350,     0,   351,   352,   353,   354,   735,
     356,   357,   358,   359,   736,   737,   362,   738,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   739,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,   740,
     741,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,   742,   397,   398,   399,   400,   401,   743,   403,
     404,   405,   406,     0,   744,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   745,   746,   432,   433,     0,   434,   435,   747,   437,
     438,   439,   748,   749,   440,   441,   442,   443,   750,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,   751,
     451,   452,     0,   752,   753,   754,   755,     0,     0,     0,
       0,     0,   457,   458,   459,     0,   756,   757,   758,   461,
     462,   463,   759,   464,   465,   760,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     761,   474,   475,     0,     0,   762,   763,   764,   765,   476,
       0,     0,   477,   766,     0,   767,   478,   479,   480,   481,
     482,   768,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   769,     0,     0,     0,
       0,   770,   771,     0,     0,     0,     0,   772,   773,     0,
       0,   774,   775,     0,     0,   776,   777,   139,     0,   668,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   669,     0,   148,   149,   150,   151,   152,
     670,   154,     0,   155,     0,     0,   671,   156,   672,   673,
     674,   157,   675,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   676,   677,   165,   166,     0,
     167,   678,   679,   169,   170,     0,   171,   172,   173,   174,
     175,   680,   177,     0,   681,   179,   682,   683,   684,   685,
     686,   687,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   688,   200,
       0,   201,   689,   690,   202,     0,     0,   203,   691,   692,
       0,   204,   693,   694,     0,   205,   206,   207,   695,   696,
     697,     0,     0,     0,     0,   698,   210,   699,     0,     0,
    3408,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   701,     0,   236,   237,   238,   702,
     703,   239,   240,     0,   241,   242,   243,   704,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   705,   251,   706,   253,     0,   254,     0,   707,     0,
     255,   256,   257,     0,   258,   708,     0,   259,   260,     0,
       0,     0,   709,   262,   263,   264,   710,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   711,   270,
     271,   712,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   713,
       0,     0,   281,     0,   714,   282,   283,     0,     0,     0,
       0,     0,   715,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   716,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   717,   306,   307,   308,   309,
     718,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   719,   317,     0,     0,   720,   319,   721,   320,     0,
     321,   722,   723,   724,   725,   726,   326,   327,   328,   329,
     330,     0,   727,   331,   332,     0,     0,   333,   334,   335,
     336,   728,   729,   730,   337,   338,     0,   731,   732,     0,
     339,   340,   733,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   734,   350,     0,   351,   352,   353,   354,
     735,   356,   357,   358,   359,   736,   737,   362,   738,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   739,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
     740,   741,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,   742,   397,   398,   399,   400,   401,   743,
     403,   404,   405,   406,     0,   744,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,   745,   746,   432,   433,     0,   434,   435,   747,
     437,   438,   439,   748,   749,   440,   441,   442,   443,   750,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
     751,   451,   452,     0,   752,   753,   754,   755,     0,     0,
       0,     0,     0,   457,   458,   459,     0,   756,   757,   758,
     461,   462,   463,   759,   464,   465,   760,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   761,   474,   475,     0,     0,   762,   763,   764,   765,
     476,     0,     0,   477,   766,     0,   767,   478,   479,   480,
     481,   482,   768,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   769,     0,     0,
       0,     0,   770,   771,     0,     0,     0,     0,   772,   773,
       0,     0,   774,   775,     0,     0,   776,   777,   139,     0,
     668,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   669,     0,   148,   149,   150,   151,
     152,   670,   154,     0,   155,     0,     0,   671,   156,   672,
     673,   674,   157,   675,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   676,   677,   165,   166,
       0,   167,   678,   679,   169,   170,     0,   171,   172,   173,
     174,   175,   680,   177,     0,   681,   179,   682,   683,   684,
     685,   686,   687,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   688,
     200,     0,   201,   689,   690,   202,     0,     0,   203,   691,
     692,     0,   204,   693,   694,     0,   205,   206,   207,   695,
     696,   697,     0,     0,     0,     0,   698,   210,   699,     0,
       0,   700,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   701,     0,   236,   237,   238,
     702,   703,   239,   240,     0,   241,   242,   243,   704,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   705,   251,   706,   253,     0,   254,     0,   707,
       0,   255,   256,   257,     0,   258,   708,     0,   259,   260,
       0,     0,     0,   709,   262,   263,   264,   710,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   711,
     270,   271,   712,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     713,     0,     0,   281,     0,   714,   282,   283,     0,     0,
       0,     0,     0,   715,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   716,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   717,   306,   307,   308,
     309,   718,   310,   311,  4289,     0,     0,     0,   312,   313,
     314,   315,   719,   317,     0,     0,   720,   319,   721,   320,
       0,   321,   722,   723,   724,   725,   726,   326,   327,   328,
     329,   330,     0,   727,   331,   332,     0,     0,   333,   334,
     335,   336,   728,     0,   730,   337,   338,     0,   731,   732,
       0,   339,   340,   733,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   734,   350,     0,   351,   352,   353,
     354,   735,   356,   357,   358,   359,   736,   737,   362,   738,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   739,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,   740,   741,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,   742,   397,   398,   399,   400,   401,
     743,   403,   404,   405,   406,     0,   744,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   745,   746,   432,   433,     0,   434,   435,
     747,   437,   438,   439,   748,   749,   440,   441,   442,   443,
     750,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,   751,   451,   452,     0,   752,   753,   754,   755,     0,
       0,     0,     0,     0,   457,   458,   459,     0,   756,   757,
     758,   461,   462,   463,   759,   464,   465,   760,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   761,   474,   475,     0,     0,   762,   763,   764,
     765,   476,     0,     0,   477,   766,     0,   767,   478,   479,
     480,   481,   482,   768,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,     0,   769,     0,
       0,     0,     0,   770,   771,     0,     0,     0,     0,   772,
     773,     0,     0,   774,   775,     0,     0,   776,   777,   139,
       0,   668,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   669,     0,   148,   149,   150,
     151,   152,   670,   154,     0,   155,     0,     0,   671,   156,
     672,   673,   674,   157,   675,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   676,   677,   165,
     166,     0,   167,   678,   679,   169,   170,     0,   171,   172,
     173,   174,   175,   680,   177,     0,   681,   179,   682,   683,
     684,   685,   686,   687,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     688,   200,     0,   201,   689,   690,   202,     0,     0,   203,
     691,   692,     0,   204,   693,   694,     0,   205,   206,   207,
     695,   696,   697,     0,     0,     0,     0,   698,   210,   699,
       0,     0,   700,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   701,     0,   236,   237,
     238,   702,   703,   239,   240,     0,   241,   242,   243,   704,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   705,   251,   706,   253,     0,   254,     0,
     707,     0,   255,   256,   257,     0,   258,   708,     0,   259,
     260,     0,     0,     0,   709,   262,   263,   264,   710,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     711,   270,   271,   712,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   713,     0,     0,   281,     0,   714,   282,   283,     0,
       0,     0,     0,     0,   715,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   716,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   717,   306,   307,
     308,   309,   718,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   719,   317,     0,     0,   720,   319,   721,
     320,     0,   321,   722,   723,   724,   725,   726,   326,   327,
     328,   329,   330,     0,   727,   331,   332,     0,     0,   333,
     334,   335,   336,   728,     0,   730,   337,   338,     0,   731,
     732,     0,   339,   340,   733,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   734,   350,     0,   351,   352,
     353,   354,   735,   356,   357,   358,   359,   736,   737,   362,
     738,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   739,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,   740,   741,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,   742,   397,   398,   399,   400,
     401,   743,   403,   404,   405,   406,     0,   744,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,   745,   746,   432,   433,     0,   434,
     435,   747,   437,   438,   439,   748,   749,   440,   441,   442,
     443,   750,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,   751,   451,   452,     0,   752,   753,   754,   755,
       0,     0,     0,     0,     0,   457,   458,   459,     0,   756,
     757,   758,   461,   462,   463,   759,   464,   465,   760,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   761,   474,   475,     0,     0,   762,   763,
     764,   765,   476,     0,     0,   477,   766,     0,   767,   478,
     479,   480,   481,   482,   768,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   769,
       0,     0,     0,     0,   770,   771,     0,     0,     0,     0,
     772,   773,     0,     0,   774,   775,     0,     0,   776,   777,
     139,     0,   668,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   669,     0,   148,   149,
     150,   151,   152,   670,   154,     0,   155,     0,     0,   671,
     156,   672,   673,   674,   157,   675,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   676,   677,
     165,   166,     0,   167,   678,   679,   169,   170,     0,   171,
     172,   173,   174,   175,   680,   177,     0,   681,   179,   682,
     683,   684,   685,   686,   687,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   688,   200,     0,   201,   689,   690,   202,     0,     0,
     203,   691,   692,     0,   204,   693,   694,     0,   205,   206,
     207,   695,   696,   697,     0,     0,     0,     0,   698,   210,
     699,     0,     0,   700,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   701,     0,   236,
     237,   238,   702,   703,   239,   240,     0,   241,   242,   243,
     704,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   705,   251,   706,   253,     0,   254,
       0,   707,     0,   255,   256,   257,     0,   258,   708,     0,
     259,   260,     0,     0,     0,   709,   262,   263,   264,   710,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   711,   270,   271,  1716,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   713,     0,     0,   281,     0,   714,   282,   283,
       0,     0,     0,     0,     0,   715,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   716,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   717,   306,
     307,   308,   309,   718,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   719,   317,     0,     0,   720,   319,
     721,   320,     0,   321,   722,   723,   724,   725,   726,   326,
     327,   328,   329,   330,     0,   727,   331,   332,     0,     0,
     333,   334,   335,   336,   728,     0,   730,   337,   338,     0,
     731,   732,     0,   339,   340,   733,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   734,   350,     0,   351,
     352,   353,   354,   735,   356,   357,   358,   359,   736,   737,
     362,   738,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   739,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,   740,   741,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,   742,   397,   398,   399,
     400,   401,   743,   403,   404,   405,   406,     0,   744,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   745,   746,   432,   433,     0,
     434,   435,   747,   437,   438,   439,   748,   749,   440,   441,
     442,   443,   750,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,   751,   451,   452,     0,   752,   753,   754,
     755,     0,     0,     0,     0,     0,   457,   458,   459,     0,
     756,   757,   758,   461,   462,   463,   759,   464,   465,   760,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   761,   474,   475,     0,     0,   762,
     763,   764,   765,   476,     0,     0,   477,   766,     0,   767,
     478,   479,   480,   481,   482,   768,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,     0,
     769,     0,     0,     0,     0,   770,   771,     0,     0,     0,
       0,   772,   773,     0,     0,   774,   775,     0,     0,   776,
     777,   139,     0,   668,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   669,     0,   148,
     149,   150,   151,   152,   670,   154,     0,   155,     0,     0,
     671,   156,   672,   673,   674,   157,   675,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   676,
     677,   165,   166,     0,   167,   678,   679,   169,   170,     0,
     171,   172,   173,   174,   175,   680,   177,     0,   681,   179,
     682,   683,   684,   685,   686,   687,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   688,   200,     0,   201,   689,   690,   202,     0,
       0,   203,   691,   692,     0,   204,   693,   694,     0,   205,
     206,   207,   695,   696,   697,     0,     0,     0,     0,   698,
     210,   699,     0,     0,   700,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   701,     0,
     236,   237,   238,   702,   703,   239,   240,     0,   241,   242,
     243,   704,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   705,   251,   706,   253,     0,
     254,     0,   707,     0,   255,   256,   257,     0,   258,   708,
       0,   259,   260,     0,     0,     0,   709,   262,   263,   264,
     710,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   711,   270,   271,  1718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   713,     0,     0,   281,     0,   714,   282,
     283,     0,     0,     0,     0,     0,   715,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   716,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   717,
     306,   307,   308,   309,   718,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   719,   317,     0,     0,   720,
     319,   721,   320,     0,   321,   722,   723,   724,   725,   726,
     326,   327,   328,   329,   330,     0,   727,   331,   332,     0,
       0,   333,   334,   335,   336,   728,     0,   730,   337,   338,
       0,   731,   732,     0,   339,   340,   733,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   734,   350,     0,
     351,   352,   353,   354,   735,   356,   357,   358,   359,   736,
     737,   362,   738,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   739,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   740,   741,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,   742,   397,   398,
     399,   400,   401,   743,   403,   404,   405,   406,     0,   744,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   745,   746,   432,   433,
       0,   434,   435,   747,   437,   438,   439,   748,   749,   440,
     441,   442,   443,   750,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,   751,   451,   452,     0,   752,   753,
     754,   755,     0,     0,     0,     0,     0,   457,   458,   459,
       0,   756,   757,   758,   461,   462,   463,   759,   464,   465,
     760,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   761,   474,   475,     0,     0,
     762,   763,   764,   765,   476,     0,     0,   477,   766,     0,
     767,   478,   479,   480,   481,   482,   768,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
       0,   769,     0,     0,     0,     0,   770,   771,     0,     0,
       0,     0,   772,   773,     0,     0,   774,   775,     0,     0,
     776,   777,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,   672,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,  2325,     0,     0,     0,     0,
     209,   210,   699,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,   703,   239,   240,     0,   241,
     242,   243,   704,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
     708,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   716,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   727,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,   731,   732,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,     0,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,   751,   451,   452,     0,  2326,
     454,   455,  2327,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,   757,   460,   461,   462,   463,   759,   464,
     465,   760,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,     0,   489,     0,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,   776,   777,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,  2440,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,   503,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,  2025,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,  2026,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,  2996,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,     0,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,     0,   350,     0,   351,   352,   353,  2997,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,  -439,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,   506,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,     0,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,   460,
     461,   462,   463,     0,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   489,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,  2507,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,  2440,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,   503,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,  2025,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,  2026,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,     0,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,     0,   350,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   506,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,     0,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,   460,   461,   462,   463,     0,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,     0,
     489,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
    2507,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,     0,
     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,  2316,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,     0,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,   460,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,     0,   489,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,  2745,     0,     0,   146,
       0,     0,   147,   777,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,     0,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,     0,   350,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,     0,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,   460,   461,
     462,   463,     0,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   489,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,     0,  4416,
     145,     0,     0,     0,   146,  4417,   777,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
       0,   489,     0,     0,     0,     0,   139,     0,   140,   141,
     142,   143,   144,  1122,     0,   145,     0,     0,     0,   146,
       0,   777,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,  1323,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,     0,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,     0,   350,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,     0,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,   460,   461,
     462,   463,     0,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,     0,   489,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,   537,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,     0,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,     0,   350,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,     0,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,   460,   461,   462,   463,     0,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   489,
       0,     0,     0,     0,     0,   139,  2265,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,   537,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
       0,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,   460,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,     0,   489,     0,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,  2506,     0,   145,
       0,     0,     0,   146,     0,  2507,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,     0,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,     0,   350,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,     0,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,   460,   461,   462,   463,     0,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,     0,
     489,     0,     0,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  4417,
     777,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
       0,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,   460,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,     0,   489,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   537,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   604,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
       0,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,     0,   350,     0,   351,   352,   605,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,     0,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
       0,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,     0,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
     460,   461,   462,   463,     0,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   473,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,     0,   489,     0,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,   537,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
       0,   489,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,   777,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,     0,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
       0,   350,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,     0,     0,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,     0,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,     0,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,     0,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,   460,   461,   462,   463,
       0,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,   470,     0,     0,   471,     0,   472,     0,   473,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,     0,   489,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2507,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   616,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,     0,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,     0,   350,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,     0,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
     136,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,   460,
     461,   462,   463,     0,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,     0,   489,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  1688,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   616,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,     0,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,     0,   350,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,     0,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,   136,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,   460,   461,   462,   463,     0,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,     0,   489,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,  2785,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   616,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,   136,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
       0,   489,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
    3439,   148,   149,   150,   151,   152,   153,     0,     0,  -329,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3876,     0,   165,   166,     0,   167,     0,     0,     0,
       0,     0,   171,   172,   173,   174,  3877,   176,   177,     0,
     178,   179,     0,     0,     0,     0,     0,     0,     0,   186,
       0,   188,     0,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,     0,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,     0,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,     0,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,     0,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3878,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,     0,   256,   257,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3879,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3880,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3881,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -284,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,  3882,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,     0,     0,   388,     0,   390,  -284,     0,   391,     0,
       0,     0,   393,     0,     0,   395,   396,  3883,     0,     0,
       0,   398,   399,   400,   401,   402,   403,     0,   405,   406,
       0,   407,     0,     0,     0,     0,   409,   410,   411,     0,
       0,     0,     0,   413,     0,     0,     0,   414,     0,     0,
     416,     0,   418,     0,   419,     0,   421,     0,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,     0,   431,     0,     0,
       0,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,     0,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,     0,     0,     0,     0,
     470,     0,     0,   471,     0,     0,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,  -284,     0,     0,     0,   484,     0,     0,   486,     0,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,  4423,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,   989,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   616,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,     0,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,   136,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,   460,   461,   462,   463,     0,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,     0,   489,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,  1166,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,     0,
     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,     0,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,   460,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
    2097,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,     0,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,   460,   461,   462,   463,     0,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   139,   489,   140,   141,   142,   143,   144,     0,  2773,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
     139,   489,   140,   141,   142,   143,   144,     0,  3103,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,     0,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,     0,   350,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,     0,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,   460,   461,   462,   463,     0,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,   139,
     489,   140,   141,   142,   143,   144,     0,  3444,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,  2419,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,  2420,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,  2421,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,  2422,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,  1031,  1032,     0,   337,   338,     0,     0,
    2423,     0,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,     0,   350,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,  4403,   562,
    4404,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,     0,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,   460,   461,   462,   463,  2424,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,   139,   489,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,  1576,     0,
       0,  2939,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,  1577,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,  2940,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,  2941,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,  2942,
       0,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,     0,   350,     0,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,     0,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
       0,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,   136,   451,   452,     0,   453,   454,   455,   456,     0,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
     460,   461,   462,   463,  2943,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   473,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,   139,   489,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,  1576,     0,     0,
    3870,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,  1577,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,  2940,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,  2941,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,  2942,     0,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,     0,   350,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,     0,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
     136,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,   460,
     461,   462,   463,  2943,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,   139,   489,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,  1576,     0,     0,  4150,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,  1577,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,  2940,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,  2941,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,  2942,     0,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,     0,   350,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,     0,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,   136,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,   460,   461,
     462,   463,  2943,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,   139,   489,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,  2618,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,  2779,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,  2247,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,   616,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,  2248,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
       0,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,   136,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,   460,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,   139,   489,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
    1852,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,  1853,     0,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     734,   350,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,     0,     0,
       0,   397,   398,   399,  1854,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,     0,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,     0,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,     0,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,   460,   461,   462,   463,
    1855,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,   470,     0,     0,   471,     0,   472,     0,   473,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,   139,   489,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,  2787,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,  2788,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   616,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,     0,
     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,     0,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,   136,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,   460,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,  1852,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,  1853,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   734,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,   460,   461,   462,   463,  1855,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   139,   489,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
    2618,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,  2779,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   616,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,   136,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
     139,   489,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  1852,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,  1853,     0,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   734,   350,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,     0,   397,   398,   399,
    3593,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,     0,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,   460,   461,   462,   463,  1855,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,   139,
     489,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,   989,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   616,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,     0,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,     0,   350,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,     0,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,   136,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,   460,   461,   462,   463,     0,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,   139,   489,
     140,   141,   142,   143,   144,  1376,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   616,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
       0,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,     0,   350,     0,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,     0,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
       0,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,   136,   451,   452,     0,   453,   454,   455,   456,     0,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
     460,   461,   462,   463,     0,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   473,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,   139,   489,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,   967,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,   968,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,     0,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,     0,   350,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,     0,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
     969,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,   460,
     461,   462,   463,     0,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,   139,   489,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,  2618,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   616,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,     0,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,     0,   350,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,     0,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,   136,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,   460,   461,
     462,   463,     0,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,   139,   489,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,  2830,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,   616,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
       0,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,   136,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,   460,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,   139,   489,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   616,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,     0,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
       0,   350,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,     0,     0,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,     0,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,     0,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,   136,   451,   452,
       0,   453,   454,   455,   456,     0,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,   460,   461,   462,   463,
       0,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,   470,     0,     0,   471,     0,   472,     0,   473,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,   139,   489,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,  2769,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,     0,
     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,     0,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,   136,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,   460,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,  4321,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
    4322,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,     0,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,   460,   461,   462,   463,     0,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   139,   489,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,     0,   350,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,     0,     0,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,     0,     0,   409,   410,   411,   412,     0,     0,
       0,   413,     0,     0,     0,   414,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,     0,     0,
       0,   562,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,     0,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,   460,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,   470,     0,
       0,   471,     0,   472,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,   485,     0,   486,   487,   488,     0,
     139,   489,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,  1067,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,     0,   339,   340,   341,     0,   342,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,     0,   350,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,     0,     0,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,     0,     0,   409,   410,   411,   412,     0,     0,     0,
     413,     0,     0,     0,   414,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,     0,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,   460,   461,   462,   463,     0,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,   470,     0,     0,
     471,     0,   472,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,   485,     0,   486,   487,   488,     0,   139,
     489,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,  2018,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,     0,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,     0,   350,     0,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,     0,     0,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
       0,     0,   409,   410,   411,   412,     0,     0,     0,   413,
       0,     0,     0,   414,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,     0,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,   460,   461,   462,   463,     0,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,   470,     0,     0,   471,
       0,   472,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,   485,     0,   486,   487,   488,     0,   139,   489,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,  2350,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
       0,   339,   340,   341,     0,   342,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,     0,   350,     0,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,     0,     0,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,     0,
       0,   409,   410,   411,   412,     0,     0,     0,   413,     0,
       0,     0,   414,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,     0,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
       0,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,     0,
       0,     0,     0,     0,  2351,   458,   459,     0,     0,     0,
     460,   461,   462,   463,     0,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,   470,     0,     0,   471,     0,
     472,     0,   473,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,   485,     0,   486,   487,   488,     0,   139,   489,   140,
     141,   142,   143,   144,  2868,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,     0,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,     0,   350,     0,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,     0,     0,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,     0,     0,
     409,   410,   411,   412,     0,     0,     0,   413,     0,     0,
       0,   414,     0,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,     0,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,   460,
     461,   462,   463,     0,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,   470,     0,     0,   471,     0,   472,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
     485,     0,   486,   487,   488,     0,   139,   489,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,     0,   339,
     340,   341,     0,   342,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,     0,   350,     0,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,  2960,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
       0,     0,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,     0,     0,   409,
     410,   411,   412,     0,     0,     0,   413,     0,     0,     0,
     414,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,     0,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,   460,   461,
     462,   463,     0,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,   470,     0,     0,   471,     0,   472,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,   485,
       0,   486,   487,   488,     0,   139,   489,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,     0,
       0,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,     0,     0,   409,   410,
     411,   412,     0,     0,     0,   413,     0,     0,     0,   414,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
       0,     0,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,   136,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,   460,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,   470,     0,     0,   471,     0,   472,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,   485,     0,
     486,   487,   488,     0,   139,   489,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,  2350,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,     0,   339,   340,   341,
       0,   342,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
       0,   350,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,     0,     0,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,     0,     0,   409,   410,   411,
     412,     0,     0,     0,   413,     0,     0,     0,   414,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,     0,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,     0,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,     0,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,   460,   461,   462,   463,
       0,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,   470,     0,     0,   471,     0,   472,     0,   473,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,   485,     0,   486,
     487,   488,     0,   139,   489,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,     0,
     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,     0,     0,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,     0,     0,   409,   410,   411,   412,
       0,     0,     0,   413,     0,     0,     0,   414,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,   430,   431,     0,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,   460,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
     470,     0,     0,   471,     0,   472,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,   485,     0,   486,   487,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
    1769,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,  1770,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,     0,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,     0,   350,
       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,     0,     0,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,     0,     0,   409,   410,   411,   412,     0,
       0,     0,   413,     0,     0,     0,   414,     0,   415,   416,
     417,   418,     0,   419,   420,   421,   422,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,     0,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,   460,   461,   462,   463,     0,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,   470,
       0,     0,   471,     0,   472,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,   485,     0,   486,   487,   488,
       0,   139,   489,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,  -329,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,  3876,
       0,   165,   166,     0,   167,     0,     0,     0,     0,     0,
     171,   172,   173,   174,  3877,   176,   177,     0,   178,   179,
       0,     0,     0,     0,     0,     0,     0,   186,     0,   188,
       0,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,     0,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
       0,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
       0,     0,     0,   219,   220,   221,     0,  -299,  -299,   222,
       0,  -299,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  3878,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,     0,   256,   257,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3879,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3880,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3881,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -284,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,  3882,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,     0,
       0,   388,     0,   390,  -284,     0,   391,     0,     0,     0,
     393,     0,     0,   395,   396,  3883,     0,     0,     0,   398,
     399,   400,   401,   402,   403,     0,   405,   406,     0,   407,
       0,     0,     0,     0,   409,   410,   411,     0,     0,     0,
       0,   413,     0,     0,     0,   414,     0,     0,   416,     0,
     418,     0,   419,     0,   421,     0,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,     0,   431,     0,     0,     0,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,     0,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,     0,     0,     0,     0,   470,     0,
       0,   471,     0,     0,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,  -284,
       0,     0,     0,   484,     0,     0,   486,     0,   488,     0,
     139,   489,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3876,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3877,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,  -320,     0,   222,     0,
    -320,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3878,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  3879,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  3880,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  3881,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -284,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,     0,   338,     0,
       0,     0,     0,   339,   340,   341,     0,   342,   343,   344,
    3882,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,     0,     0,
     388,     0,   390,  -284,     0,   391,     0,     0,     0,   393,
       0,     0,   395,   396,  3883,     0,     0,     0,   398,   399,
     400,   401,   402,   403,     0,   405,   406,     0,   407,     0,
       0,     0,     0,   409,   410,   411,     0,     0,     0,     0,
     413,     0,     0,     0,   414,     0,     0,   416,     0,   418,
       0,   419,     0,   421,     0,   423,   424,     0,     0,     0,
       0,     0,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,     0,   431,     0,     0,     0,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,     0,   444,   445,     0,   446,     0,   447,   448,
     449,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,     0,     0,     0,     0,     0,   457,   458,   459,     0,
       0,     0,     0,   461,   462,   463,     0,   464,   465,     0,
     466,   467,     0,     0,     0,     0,     0,   470,     0,     0,
     471,     0,     0,     0,   473,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,   483,  -320,     0,  -284,     0,
       0,     0,   484,     0,     0,   486,     0,   488,     0,   139,
     489,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,     0,     0,  -329,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,     0,     0,     0,     0,   164,  3876,     0,   165,
     166,     0,   167,     0,     0,     0,     0,     0,   171,   172,
     173,   174,  3877,   176,   177,     0,   178,   179,     0,     0,
       0,     0,     0,     0,     0,   186,     0,   188,     0,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
       0,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,     0,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,     0,     0,
       0,   219,   220,   221,     0,  -317,     0,   222,     0,  -317,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3878,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,     0,   256,   257,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3879,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3880,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3881,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -284,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,     0,   338,     0,     0,
       0,     0,   339,   340,   341,     0,   342,   343,   344,  3882,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,     0,     0,   388,
       0,   390,  -284,     0,   391,     0,     0,     0,   393,     0,
       0,   395,   396,  3883,     0,     0,     0,   398,   399,   400,
     401,   402,   403,     0,   405,   406,     0,   407,     0,     0,
       0,     0,   409,   410,   411,     0,     0,     0,     0,   413,
       0,     0,     0,   414,     0,     0,   416,     0,   418,     0,
     419,     0,   421,     0,   423,   424,     0,     0,     0,     0,
       0,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,     0,   431,     0,     0,     0,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,     0,   444,   445,     0,   446,     0,   447,   448,   449,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
       0,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,     0,   461,   462,   463,     0,   464,   465,     0,   466,
     467,     0,     0,     0,     0,     0,   470,     0,     0,   471,
       0,     0,     0,   473,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,   483,  -317,     0,  -284,     0,     0,
       0,   484,     0,     0,   486,     0,   488,     0,   139,   489,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -329,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3876,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3877,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,  4212,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  3878,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  3879,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  3880,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  3881,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -284,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,     0,   338,     0,     0,     0,
       0,   339,   340,   341,     0,   342,   343,   344,  3882,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,     0,     0,   388,     0,
     390,  -284,     0,   391,     0,     0,     0,   393,     0,     0,
     395,   396,  3883,     0,     0,     0,   398,   399,   400,   401,
     402,   403,     0,   405,   406,     0,   407,     0,     0,     0,
       0,   409,   410,   411,     0,     0,     0,     0,   413,     0,
       0,     0,   414,     0,     0,   416,     0,   418,     0,   419,
       0,   421,     0,   423,   424,     0,     0,     0,     0,     0,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,     0,   431,     0,     0,     0,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
       0,   444,   445,     0,   446,     0,   447,   448,   449,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,     0,
       0,     0,     0,     0,   457,   458,   459,     0,     0,     0,
       0,   461,   462,   463,     0,   464,   465,     0,   466,   467,
       0,     0,     0,     0,     0,   470,     0,     0,   471,     0,
       0,     0,   473,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,   483,     0,     0,  -284,     0,     0,     0,
     484,     0,     0,   486,     0,   488,     0,   139,   489,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,     0,     0,  -329,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
       0,     0,     0,     0,   164,  3876,     0,   165,   166,     0,
     167,     0,     0,     0,     0,     0,   171,   172,   173,   174,
    3877,   176,   177,     0,   178,   179,     0,     0,     0,     0,
       0,     0,     0,   186,     0,   188,     0,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,     0,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,     0,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,     0,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,  -322,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3878,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3879,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3880,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3881,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -284,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,     0,   338,     0,     0,     0,     0,
     339,   340,   341,     0,   342,   343,   344,  3882,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,     0,     0,   388,     0,   390,
    -284,     0,   391,     0,     0,     0,   393,     0,     0,   395,
     396,  3883,     0,     0,     0,   398,   399,   400,   401,   402,
     403,     0,   405,   406,     0,   407,     0,     0,     0,     0,
     409,   410,   411,     0,     0,     0,     0,   413,     0,     0,
       0,   414,     0,     0,   416,     0,   418,     0,   419,     0,
     421,     0,   423,   424,     0,     0,     0,     0,     0,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
       0,   431,     0,     0,     0,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,     0,
     444,   445,     0,   446,     0,   447,   448,   449,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,     0,     0,
       0,     0,     0,   457,   458,   459,     0,     0,     0,     0,
     461,   462,   463,     0,   464,   465,     0,   466,   467,     0,
       0,     0,     0,     0,   470,     0,     0,   471,     0,     0,
       0,   473,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,   483,     0,     0,  -284,     0,     0,     0,   484,
       0,     0,   486,     0,   488,     0,   139,   489,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -329,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3876,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3877,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,  4326,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  3878,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  3879,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    3880,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  3881,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -284,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,     0,   338,     0,     0,     0,     0,   339,
     340,   341,     0,   342,   343,   344,  3882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,     0,     0,   388,     0,   390,  -284,
       0,   391,     0,     0,     0,   393,     0,     0,   395,   396,
    3883,     0,     0,     0,   398,   399,   400,   401,   402,   403,
       0,   405,   406,     0,   407,     0,     0,     0,     0,   409,
     410,   411,     0,     0,     0,     0,   413,     0,     0,     0,
     414,     0,     0,   416,     0,   418,     0,   419,     0,   421,
       0,   423,   424,     0,     0,     0,     0,     0,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,     0,
     431,     0,     0,     0,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,     0,   444,
     445,     0,   446,     0,   447,   448,   449,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,     0,     0,     0,
       0,     0,   457,   458,   459,     0,     0,     0,     0,   461,
     462,   463,     0,   464,   465,     0,   466,   467,     0,     0,
       0,     0,     0,   470,     0,     0,   471,     0,     0,     0,
     473,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,   483,     0,     0,  -284,     0,     0,     0,   484,     0,
       0,   486,     0,   488,     0,   139,   489,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,     0,
       0,  -329,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3876,     0,   165,   166,     0,   167,     0,
       0,     0,     0,     0,   171,   172,   173,   174,  3877,   176,
     177,     0,   178,   179,     0,     0,     0,     0,     0,     0,
       0,   186,     0,   188,     0,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,     0,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,     0,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,     0,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,  4372,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  3878,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,     0,   256,
     257,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  3879,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  3880,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  3881,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -284,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,     0,   338,     0,     0,     0,     0,   339,   340,
     341,     0,   342,   343,   344,  3882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,     0,     0,   388,     0,   390,  -284,     0,
     391,     0,     0,     0,   393,     0,     0,   395,   396,  3883,
       0,     0,     0,   398,   399,   400,   401,   402,   403,     0,
     405,   406,     0,   407,     0,     0,     0,     0,   409,   410,
     411,     0,     0,     0,     0,   413,     0,     0,     0,   414,
       0,     0,   416,     0,   418,     0,   419,     0,   421,     0,
     423,   424,     0,     0,     0,     0,     0,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,     0,   431,
       0,     0,     0,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,     0,   444,   445,
       0,   446,     0,   447,   448,   449,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,     0,     0,     0,     0,
       0,   457,   458,   459,     0,     0,     0,     0,   461,   462,
     463,     0,   464,   465,     0,   466,   467,     0,     0,     0,
       0,     0,   470,     0,     0,   471,     0,     0,     0,   473,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
     483,     0,     0,  -284,     0,     0,     0,   484,     0,     0,
     486,     0,   488,     0,   139,   489,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -329,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3876,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3877,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,  -303,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3878,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3879,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3880,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3881,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -284,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,     0,   338,     0,     0,     0,     0,   339,   340,   341,
       0,   342,   343,   344,  3882,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,     0,     0,   388,     0,   390,  -284,     0,   391,
       0,     0,     0,   393,     0,     0,   395,   396,  3883,     0,
       0,     0,   398,   399,   400,   401,   402,   403,     0,   405,
     406,     0,   407,     0,     0,     0,     0,   409,   410,   411,
       0,     0,     0,     0,   413,     0,     0,     0,   414,     0,
       0,   416,     0,   418,     0,   419,     0,   421,     0,   423,
     424,     0,     0,     0,     0,     0,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,     0,   431,     0,
       0,     0,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,     0,   444,   445,     0,
     446,     0,   447,   448,   449,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,     0,     0,     0,     0,     0,
     457,   458,   459,     0,     0,     0,     0,   461,   462,   463,
       0,   464,   465,     0,   466,   467,     0,     0,     0,     0,
       0,   470,     0,     0,   471,     0,     0,     0,   473,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,   483,
       0,     0,  -284,     0,     0,     0,   484,     0,     0,   486,
       0,   488,     0,   139,   489,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,  -329,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3876,     0,   165,   166,     0,   167,     0,     0,     0,
       0,     0,   171,   172,   173,   174,  3877,   176,   177,     0,
     178,   179,     0,     0,     0,     0,     0,     0,     0,   186,
       0,   188,     0,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,     0,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,     0,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,     0,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,     0,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3878,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,     0,   256,   257,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3879,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3880,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3881,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -284,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,     0,   339,   340,   341,     0,
     342,   343,   344,  3882,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,     0,     0,   388,     0,   390,  -284,     0,   391,     0,
       0,     0,   393,     0,     0,   395,   396,  3883,     0,     0,
       0,   398,   399,   400,   401,   402,   403,     0,   405,   406,
       0,   407,     0,     0,     0,     0,   409,   410,   411,     0,
       0,     0,     0,   413,     0,     0,     0,   414,     0,     0,
     416,     0,   418,     0,   419,     0,   421,     0,   423,   424,
       0,     0,     0,     0,     0,     0,   425,   426,     0,   427,
       0,     0,   428,     0,     0,   429,     0,   431,     0,     0,
       0,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,     0,   444,   445,     0,   446,
       0,   447,   448,   449,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,     0,     0,     0,     0,     0,   457,
     458,   459,     0,     0,     0,     0,   461,   462,   463,     0,
     464,   465,     0,   466,   467,     0,     0,     0,     0,     0,
     470,     0,     0,   471,     0,     0,     0,   473,   474,   475,
       0,     0,     0,     0,     0,     0,   476,     0,     0,   477,
       0,     0,     0,   478,   479,   480,   481,   482,   483,     0,
       0,  -284,     0,     0,     0,   484,     0,     0,   486,     0,
     488,     0,   139,   489,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -329,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3876,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3877,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,     0,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  3878,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  3879,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  3880,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  3881,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -284,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,     0,
     338,     0,     0,     0,     0,   339,   340,   341,     0,   342,
     343,   344,  3882,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
       0,     0,   388,     0,   390,  -284,     0,   391,     0,     0,
       0,   393,     0,     0,   395,   396,  3883,     0,     0,     0,
     398,   399,   400,   401,   402,   403,     0,   405,   406,     0,
     407,     0,     0,     0,     0,   409,   410,   411,     0,     0,
       0,     0,   413,     0,     0,     0,   414,     0,     0,   416,
       0,   418,     0,   419,     0,   421,     0,   423,   424,     0,
       0,     0,     0,     0,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,     0,   431,     0,     0,     0,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,     0,   444,   445,     0,   446,     0,
     447,   448,   449,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,     0,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,   462,   463,     0,   464,
     465,     0,   466,   467,     0,     0,     0,     0,     0,   470,
       0,     0,  4215,     0,     0,     0,   473,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,   483,     0,     0,
    -284,     0,     0,     0,   484,     0,     0,   486,     0,   488,
       0,   139,   489,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,     0,
       0,   165,   166,     0,   167,     0,     0,     0,     0,     0,
     171,   172,   173,   174,     0,   176,   177,     0,   178,   179,
       0,     0,     0,     0,     0,     0,     0,   186,     0,   188,
       0,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,     0,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
       0,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
       0,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,     0,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,     0,   256,   257,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,     0,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,     0,
       0,   388,     0,   390,     0,     0,   391,     0,     0,     0,
     393,     0,     0,   395,   396,     0,     0,     0,     0,   398,
     399,   400,   401,   402,   403,     0,   405,   406,     0,   407,
       0,     0,     0,     0,   409,   410,   411,     0,     0,     0,
       0,   413,     0,     0,     0,   414,     0,     0,   416,     0,
     418,     0,   419,     0,   421,     0,   423,   424,     0,     0,
       0,     0,     0,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,     0,   431,     0,     0,     0,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,     0,   444,   445,     0,   446,     0,   447,
     448,   449,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,     0,     0,     0,     0,     0,   457,   458,   459,
       0,     0,     0,     0,   461,   462,   463,     0,   464,   465,
       0,   466,   467,     0,     0,     0,     0,     0,   470,     0,
       0,   471,     0,     0,     0,   473,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,     0,     0,   486,     0,   488,     0,
       0,   489
};

static const yytype_int16 yycheck[] =
{
       6,   644,   124,   552,   575,    20,   575,   982,   598,  1142,
    1170,   894,  1170,    19,    29,   692,    22,  1823,  1824,  1685,
     983,    36,  1071,  1118,   717,  1099,    32,  2011,     6,  1379,
     671,   808,   612,    39,  1478,  1379,    42,   697,  1302,   946,
      46,   919,  1811,  1065,  1066,  1476,  2471,  2046,    54,  2283,
    2512,  2320,  1192,  2113,  2401,  1233,  2579,  1441,  2752,  1199,
      22,   921,  2807,  3195,  1109,  2092,  2126,  1200,  1201,   947,
    1310,  1204,  1205,  1206,  1207,  2593,  1209,  1210,  1211,  1212,
    1213,  1214,  1215,  1216,   987,   762,   946,  2389,  1953,   987,
      96,  1467,   752,  1459,  1811,   755,  2212,   640,   641,  2127,
    1951,   658,  1882,  2071,   653,   654,  1951,   520,  2071,  2343,
    1390,  2952,  2466,   119,  2008,   121,  3429,   123,   124,   125,
    2333,  2255,    17,  1906,  1907,  2382,     4,    19,  1408,   770,
     771,   772,  3201,  2390,    96,  1954,  1416,  1417,   781,  1958,
    1923,   782,    82,   121,    25,   123,  3085,   877,    19,    73,
    1969,  1449,    21,    51,  1520,    17,   131,  1940,  1941,  3219,
    1979,  2445,    16,    17,  3473,  3476,  1822,    16,    17,    82,
      34,    59,    60,  1956,  1957,    36,  1959,   948,  1943,  1962,
    1963,  1925,    30,  1966,    19,    16,    17,   151,  1971,  2581,
      59,    60,  1975,  1976,  1977,  1978,    83,    21,   151,  1982,
    1983,   151,  1985,   175,  1934,   157,  2096,    60,  1991,    66,
      34,  1994,  1995,    58,  1997,     9,  2434,  3258,  3259,   128,
    2071,  3262,   128,  3912,    48,    51,  2071,   283,  2555,    47,
     810,   267,   962,   234,    28,    59,    60,   145,  2607,  2608,
    3281,    35,   243,    64,  2613,   284,  2615,  3288,   157,   209,
     266,   157,   356,  2858,    25,   371,    16,    17,    56,    64,
      16,    17,   157,   365,  2610,   157,  2937,    68,    71,   161,
      36,    71,  2055,  2056,  2057,  2058,  4034,   128,   114,    16,
      17,  1459,  3034,  3486,    16,    17,    90,   353,    16,    17,
     441,    19,   872,  3425,   388,   216,    19,   386,   465,  3026,
    2430,  2431,  2032,   225,    16,    17,   311,  2037,   221,   128,
     223,   269,   989,  2043,  2044,   267,    16,    17,  2048,    23,
     465,   112,    16,    17,    20,   465,   161,    88,     8,  3370,
     175,  2060,    82,   250,   179,   371,   132,   267,   157,   252,
     134,   129,  1520,   511,  3996,   190,  1897,  2374,   359,  4038,
     234,   232,   213,   175,   129,   392,  3665,    41,  2206,   243,
      12,   192,    16,    17,    25,   192,   166,    70,  2739,  2353,
    2354,  2355,    16,    17,  3660,   376,   583,   416,   483,   730,
     360,   538,   438,   505,   168,   605,   606,   168,   159,   506,
     138,    59,    60,   229,   538,    70,    16,    17,   157,   750,
     621,    16,    17,    71,   221,   153,   223,   628,   388,   629,
    3696,   195,   763,   764,   195,  1108,   243,  2547,  2548,   541,
     537,    82,   629,  2670,    16,    17,   307,   248,   635,  1122,
     164,    16,    17,    16,    17,   300,   192,   133,   161,  4091,
     412,   371,   188,   248,   538,   132,   551,   213,   336,  2339,
      40,   135,   489,  1230,   242,  2826,    16,    17,    16,    17,
     627,   232,    16,    17,  3777,   169,  1429,   242,  2448,  1012,
     315,   221,  3513,   223,  2745,    16,    17,   634,   629,   225,
     192,  3522,   627,    16,    17,    16,    17,   627,   656,   141,
      16,    17,   376,    19,  1043,  1044,  1045,   455,   159,   505,
     388,   507,   252,   183,   355,  3546,  1384,  3259,   267,  1387,
    3551,  3714,  2814,   629,  1392,   176,   620,   439,   524,  3651,
    3589,   370,   528,   284,   373,  1969,  4284,   348,   488,  2876,
     447,   537,   598,   635,   570,   541,   307,   543,   627,   370,
    1418,  1419,   373,  2756,  2757,  2758,  1449,   603,   446,   236,
     556,  1449,  1195,  3224,   352,    63,  2450,  1735,   538,  1925,
    2454,   284,  1203,  1293,  2388,   473,  3293,   412,  2595,   372,
     609,   232,   372,  2857,  2468,  2469,  2860,  2861,   584,  1220,
    1713,  1441,   353,  2434,  2478,  1951,   602,  2555,   509,  2434,
     412,  1724,  2555,  1323,  1727,  2879,  1876,   603,    16,    17,
      16,    17,    86,  3208,    16,    17,   612,   411,   614,   581,
     370,  3003,  2506,   373,   370,   416,  1519,   373,   629,   625,
     446,  1519,   627,   175,  2000,   631,   483,   628,  3697,  2847,
     636,   571,   638,   370,   640,   641,   373,   601,   370,   645,
     646,   373,   370,  1414,   650,   373,   307,   146,   601,  2976,
     602,   601,  3397,   631,   660,   661,   662,   629,   370,    51,
     666,   373,  1707,   625,  4353,  2395,   544,  2432,  3977,  2413,
     370,  1084,  1085,   373,   636,   562,   370,   538,  2461,   373,
     655,   633,  1459,  2577,   505,   807,   347,   549,  3999,  2345,
    2473,   604,   353,   416,  2060,  1238,  1276,   518,  1111,   568,
      63,   549,  2592,   627,  2555,  2071,  1119,   585,  1121,   604,
    2555,   717,   583,   518,   549,  3775,   370,  4030,  1792,   373,
    1133,  1134,  1135,  2453,   633,  2455,   370,   633,  1141,   373,
    2999,   629,  2462,  2760,  2761,    16,    17,   590,   633,   533,
    3679,   633,   513,  1520,   568,  2475,   634,  1925,   629,  2883,
     370,  2481,  2482,   373,  3823,   370,  2054,   551,   373,   613,
      16,    17,  1305,   627,   613,   559,  1346,  2497,  2498,   775,
    2553,   777,   538,    16,    17,  1505,   612,   595,   370,  1322,
     576,   373,   613,   632,   629,   370,   604,   370,   373,   610,
     373,  2521,   586,    16,    17,   801,   802,   803,   920,   805,
     806,   807,  2786,   809,   810,   596,   509,   629,  1388,   559,
     370,  1368,   370,   373,   633,   373,   370,    16,    17,   373,
    2549,    16,    17,  2671,   802,    25,   189,   598,   806,   370,
    2381,   809,   373,   583,   509,  4148,   582,   370,  2822,   370,
     373,   847,   373,   602,   370,  2975,   583,   373,    16,    17,
      16,    17,   513,   613,   860,    73,    10,   613,   629,  2290,
     412,  3930,    46,  3132,  3135,   599,   872,   873,   628,   629,
      34,   877,   628,  3242,   633,  2855,   613,  3246,  3232,  3126,
    4002,   613,  2060,  3185,  1453,   613,   609,  3189,  2694,   576,
      16,    17,   629,  2071,  3240,  3241,   628,   629,   860,    16,
      17,   613,  3248,    16,    17,  3251,  3252,  3276,  3277,  3278,
    3144,   873,   188,   613,   920,  3284,   424,   629,   147,   613,
     510,  3205,  3268,  3292,  2730,   229,   541,  3140,  3185,   629,
     267,  3772,  3189,   193,   628,   629,  3282,   598,    16,    17,
    1633,   531,  3288,  3289,  3290,  3291,   142,    16,    17,   225,
    3468,  3198,   370,   509,   370,   373,   962,   373,   370,   613,
     352,   373,  4003,   161,  4005,  1872,   465,   557,   629,   613,
     448,  1528,    16,    17,   628,   629,   460,   983,   154,    16,
      17,    43,  3009,   646,  2753,   629,   195,  1865,   866,   165,
    3359,  2815,  2816,   613,   140,  1902,  2847,  1875,   613,  3368,
    1878,  1879,  2847,  2447,  2448,   210,  1012,  4076,  2976,   629,
    3038,   278,  1872,  2976,  2364,  3361,  2366,  2367,  2151,   607,
     814,   613,  2366,  2367,  4156,  2805,   210,    25,   613,   581,
     613,   627,   232,   389,   371,   591,  2753,   629,   401,   178,
      16,    17,  1902,   628,   629,   628,   629,  2413,   253,  2098,
      16,    17,    52,   613,   446,   613,  2921,  1063,  2264,   613,
    1182,  1067,  2302,    63,  3180,    16,    17,   334,  2434,   629,
     628,   629,   613,   190,   628,   629,   157,   126,    16,    17,
     613,   473,   613,    16,    17,  1726,  2226,   613,   629,   370,
     183,   202,   373,   339,   125,  2375,   629,  1219,   629,    16,
      17,  1063,  1108,  2922,   130,  1067,   195,   307,    16,    17,
     202,    11,   123,    31,   370,   361,  1122,   373,  1811,   352,
      16,    17,   232,   161,   384,  2976,  2502,   370,   627,  2393,
     373,  2976,   631,   329,  4256,  4257,   300,  2232,  2233,   387,
     115,  2807,   805,   118,   225,  3129,   375,   370,  1925,  3667,
     373,  2054,   190,   353,    11,   317,  2054,   635,  3460,  3461,
    2320,  1741,   273,   256,  1170,  2298,    84,  3194,    16,    17,
     316,   370,    16,    17,   373,   370,  1182,   192,   373,   300,
    2225,   273,  1731,  2549,  3168,   433,    12,   405,   465,  2555,
    2235,  1313,   241,   369,   403,   613,  1776,   613,   431,   392,
    1743,   613,   370,   604,   370,   373,   570,   373,   571,   220,
      32,   629,   628,  1219,    16,    17,   355,   629,  1224,   350,
    1800,  1801,   482,  1229,    12,   459,   210,  3921,   629,   129,
     368,  2391,  1238,  2391,   232,  2413,   483,   155,  1787,  3984,
     125,   597,   509,   353,   370,    16,    17,   373,   532,   403,
     281,   362,  2636,   370,   111,  3778,   373,   370,   284,   352,
     373,    16,    17,  1832,   628,   653,   654,  1229,   399,   253,
    1276,   225,   129,   273,   458,   192,   474,   339,    16,    17,
     476,   477,  1288,  2060,  1290,    16,    17,  1293,  2719,  3751,
     411,  3351,   370,   465,  2071,   373,   489,    16,    17,  1305,
     185,   370,    16,    17,   373,  4437,   582,  1313,   319,   307,
     528,   168,   323,   513,   403,   141,  1322,  1323,  3587,   330,
    2480,  3215,  2480,   532,     0,   356,   370,   250,   213,   373,
     284,   346,   613,   370,  1456,   553,   373,   583,   195,   262,
    1346,   340,  3236,  1349,    16,    17,    16,    17,   629,   503,
     627,  1357,   229,   141,   192,    16,    17,   613,   439,   470,
     190,   537,   483,  1369,  1370,  1371,  1372,  1373,  1374,   418,
     613,  2549,   628,  1379,   536,   465,   253,  2555,   470,  1385,
    1386,   629,  1388,   628,   629,  1391,   629,    16,    17,   273,
     613,  1369,  1370,  1371,   370,  1373,   281,   373,   598,   410,
     554,   563,   240,   513,   370,  1411,   629,   373,  1386,   157,
    1372,  2855,  1374,  1391,   613,   403,  1294,   556,   613,   370,
     277,   243,   373,   619,   620,   621,   622,   623,   624,   625,
     629,   340,   370,   572,   629,   373,   474,   370,   125,   205,
     373,   398,   596,   532,   266,   613,   276,   613,  2798,  1411,
    1456,   421,   463,   370,   192,   627,   373,   125,   412,    16,
      17,   629,   370,   629,  1470,   373,   515,  1473,  1474,  3453,
     354,   356,  2546,   373,   370,   161,   465,   373,  2922,  3826,
     398,  2847,    16,    17,   250,   559,  1364,   613,   598,    16,
      17,    16,    17,    16,    17,   225,   613,  3751,   185,  1505,
     613,    12,   420,   629,  2710,  2711,  2712,   161,  1470,   583,
    3779,   628,  1474,    16,    17,   503,   629,   185,  1524,    12,
    1526,  1527,   370,  1529,  1530,   373,   370,   159,   451,   373,
     561,   349,   350,   371,   452,   613,  1542,   627,  1544,   538,
     465,  3880,  3881,  3603,   613,  2594,   403,   205,  1526,  1527,
    2690,   629,   633,   111,    16,    17,    16,    17,   532,   628,
    3544,   465,    16,    17,     8,   564,   554,   542,   370,   613,
     545,   373,   465,   168,    16,    17,   613,    19,    16,    17,
    2740,  3311,  2740,  4045,  1462,   629,    30,   144,  2229,   600,
     508,  3825,   629,   130,   281,   565,   129,    16,    17,   370,
     232,    82,   373,   425,   615,   371,  4068,  4069,   596,   549,
    2976,    16,    17,   281,   471,   370,    16,    17,   373,   635,
      16,    17,  1744,  1011,    16,    17,    12,  1633,  1634,   538,
     141,    58,   370,   142,   364,   373,  2413,   613,   627,   370,
    4160,    19,   373,  4163,    16,    17,   503,   613,   141,    16,
      17,   370,    17,   629,   373,   564,   370,   215,   281,   373,
      16,    17,   613,   629,   224,  2325,  2326,  2327,    89,   356,
      16,    17,   529,  1061,   205,   613,   561,   214,   629,   268,
     613,  3112,   271,    16,    17,  1691,   532,   108,   356,    16,
      17,   629,   192,    16,    17,   628,   613,   481,   370,   243,
     370,   373,   627,   373,   535,   613,   631,   125,  2121,   370,
    3709,  3710,   373,    16,    17,  2128,  3485,   613,   627,   263,
     628,   353,   229,   627,   507,   792,   104,  1733,  2141,   430,
     178,  3397,   628,   356,   627,  1741,   224,  1743,  1744,   596,
     221,   370,   223,   628,   373,   528,   627,   284,   175,  1755,
    4175,  1757,   179,  2333,   635,   141,   627,  1763,  1764,   621,
    1766,  2174,  3531,   190,   635,   613,   628,   267,  4288,   613,
    1776,   252,  2549,  1779,   229,    16,    17,  1783,  2555,   157,
     628,    16,    17,   161,   628,    16,    17,    16,    17,   229,
     574,  4045,    16,    17,  1800,  1801,  1802,  1803,  2976,  2873,
     465,  1763,  1764,   504,  1766,  1811,    16,    17,  1814,  1815,
    1816,   613,   190,   370,  4068,  4069,   373,  1779,   885,   377,
     329,  1783,    21,   205,   413,  1831,   628,   205,   240,  2242,
     388,    39,   616,   211,  1840,    34,   370,   395,    46,   373,
    1802,  1803,   613,   370,   365,   370,   373,   370,   373,    48,
     373,    47,  1814,  1815,  1816,   233,  3549,   628,   613,  3552,
      59,    60,   240,   281,   528,    21,   192,   370,   532,  2752,
     373,  1877,   250,   628,   561,   613,     6,   588,    34,  4218,
    4219,   513,   613,  1889,   262,  3986,  2793,  3988,   315,   267,
    1896,  2460,    48,   561,   613,  2802,  2360,   628,   276,   613,
     473,   349,   350,    59,    60,    16,    17,   355,   370,   628,
     370,   373,  3605,   373,   628,  1877,   370,  3181,  3013,   373,
    1798,   528,   587,   588,   340,   532,  2804,    57,   370,   487,
     604,   373,   370,  2793,  1896,   373,   999,  1000,   356,    16,
      17,   613,  2802,   613,   583,  3929,   508,  2069,  3043,  3044,
     512,   370,   613,  2075,   373,   454,   628,  1835,   628,   288,
     289,   339,   627,    59,    60,   370,   598,   628,   373,  3064,
     370,  2499,   579,   373,   370,  1038,  3136,   373,   370,    16,
      17,   373,   284,   361,   613,   412,   628,  1993,  2452,  3339,
     629,  2113,   633,   371,   577,  3339,   635,   629,   370,   628,
     635,   373,  2008,   370,  2126,   590,   373,   367,   593,   142,
      16,    17,  2476,  2477,   370,   145,   503,   373,   522,   523,
     189,   579,   526,   527,   370,   403,   530,   373,   532,   627,
     529,     6,  1910,  3193,    11,  3193,   535,   370,   541,  1106,
     373,  1919,  1920,   370,   340,    17,   373,   370,   628,   629,
     373,   142,  1930,  1931,  1932,  1933,   613,  1935,  1936,   439,
    2753,    16,    17,  2069,    25,   629,  3226,   370,  3226,  2075,
     373,  2077,  4056,   451,  2080,  3805,  3806,  3807,   627,   613,
     579,  2087,  2088,  2089,  2090,   104,   613,  2093,   613,  1156,
     613,   151,   152,  1160,   628,   473,  2218,   596,   627,   428,
     429,   628,  2080,   628,   361,   628,   538,  2113,   556,   627,
     613,   620,   621,   622,   623,   624,   625,   172,   628,   629,
    2126,    82,   538,   635,   572,  2087,  2088,  2089,  2250,   370,
     627,    19,   373,   628,   629,   370,   514,   583,   373,   370,
    3923,   370,   373,   561,   373,   541,   370,  2696,   564,   373,
    3956,   613,   416,   613,   627,  2033,  2034,  2737,  2036,   613,
    2038,  2039,  2040,  2041,  2042,   125,   628,  2045,   628,  2047,
     142,   613,   513,   437,   628,   613,  2756,  2757,  2758,   583,
    3963,  3964,   628,   629,  3967,  3968,  3969,  3970,  3210,  3211,
     628,   627,   570,   627,   613,  1277,   329,   627,  1280,  2976,
     155,  1283,  3297,  2783,   468,   583,   628,   629,   613,   628,
     627,   627,  2218,   613,   233,   176,   104,   613,   627,  3761,
     350,   613,   402,   628,   602,   185,   604,  4024,   628,    17,
     627,   250,  2354,   627,  2356,  2357,   628,  2243,   329,   628,
     629,   613,   538,   262,  2250,   368,   613,   454,  3692,  3693,
     628,   629,   627,   213,   632,   633,   628,   613,  2264,   370,
     361,   628,   373,   627,  3424,   627,  3424,   613,   564,   157,
     627,   232,  2685,   161,   628,   629,   627,    82,  2400,  2401,
     613,   528,   628,  4066,  4067,   415,   613,   417,  3337,    34,
     613,  2297,  4075,   370,   629,   628,   373,  2303,   628,   629,
     188,   628,   190,   627,    85,   628,    87,    80,   812,   627,
     613,   628,   629,  4043,  2320,    60,   627,   205,  3984,   627,
     339,   281,   627,   211,   225,   628,   627,  2333,    82,   591,
     592,   627,   594,   370,   596,  2863,   373,   225,  3880,  3881,
    2346,   627,  2348,   476,   477,   233,   307,   128,  2354,  2471,
    2356,  2357,   240,   627,   142,   628,   629,   329,  2364,   627,
    2366,  2367,   250,   361,   370,    49,  2894,   373,   149,   568,
     115,   627,   613,   118,   262,   628,   629,  2905,   613,   267,
    2908,   126,   613,   627,   613,  2391,   347,   628,   276,   613,
     589,   590,   353,   628,  2400,  2401,   356,   628,   143,   628,
     627,  3475,   627,   184,   628,   159,   627,   578,   579,  4206,
     581,   627,   568,   627,  3377,   370,   189,   489,   373,   628,
     629,   465,   627,   161,   162,   627,  2441,   232,   111,   473,
     627,  2959,   451,   627,  2440,   627,  2451,   593,   627,  2445,
     628,   629,  2457,    12,  2450,   628,   629,  4431,  2454,   627,
    2456,   339,    60,   628,   629,   627,   229,   627,   196,    19,
    2466,   627,  2468,  2469,  2479,  2471,    26,    32,  2346,   207,
    2485,   627,  2478,   361,  2480,   627,  2491,  2492,   232,   627,
     253,  4023,  4024,   371,  2490,   168,   627,   620,   621,   622,
     623,   624,   625,  2499,   628,   514,   241,    49,   125,   627,
    2506,  2507,   613,   627,   476,   477,  2512,   115,   246,    63,
     118,    71,   195,  2519,  1764,   403,  1766,   628,   126,  3160,
     258,  4318,    82,  4320,   125,   627,    80,   128,  2490,   628,
     629,   622,   623,   624,   625,   143,   613,   627,    92,   627,
     104,   329,   347,   587,   588,   628,   629,   285,   353,  4346,
     629,   628,   513,   628,   629,   125,   627,  4363,   185,   627,
    3140,   628,   629,   451,  1814,  1815,  1816,   125,   128,   627,
    2576,  2577,   141,   627,  4116,    80,   613,   142,   186,   627,
    2458,  2459,   627,   627,   185,   473,   213,  4384,  4385,  4131,
     278,   628,   627,   347,   221,   627,   341,   125,   379,   353,
     128,   561,  4144,   628,   629,   343,  2484,   613,   628,   629,
     628,   629,   213,   632,  2576,   185,   627,   422,   627,  3335,
    3336,   361,   628,   628,   629,   627,   514,   185,   401,   628,
     629,   125,  4438,   241,  2512,   189,   203,   598,   198,  3052,
     194,   627,   423,   213,   627,   214,   618,   619,   620,   621,
     622,   623,   624,   625,   281,   213,   627,   185,   613,   628,
     629,   221,   627,   223,  4206,  3785,  3786,  2545,   422,   233,
     628,   629,    12,  3631,  3632,   229,  4218,  4219,   243,  3092,
     281,  3814,   570,   627,   189,   213,   250,   627,   476,   477,
      12,   185,   627,   253,   582,   583,   628,   629,   262,   253,
    2706,   266,    42,  2709,  2710,  2711,  2712,   627,   513,   628,
     629,   281,  2718,   627,   602,   627,   604,    16,    17,   213,
     403,   628,   629,   281,   229,  4267,   628,   629,   627,   356,
     338,  2737,   627,   341,  2740,  4277,   481,   304,   305,   361,
     628,   629,   309,   310,   632,   633,   570,  2753,   253,   459,
    2756,  2757,  2758,   281,  2876,   356,  2718,    97,   622,   513,
     167,   566,   102,  2769,   329,  3481,  3729,   628,   629,  2775,
    3319,  2777,  3735,   628,   629,   339,  4318,  2783,  4320,  3348,
     628,   629,   628,   629,   349,   350,   356,   281,  4330,   349,
     350,   473,  2798,   598,  3954,   355,  3954,   361,   356,   627,
     545,   361,   628,   629,  4346,   267,  4348,   190,  4350,   509,
     418,   528,   566,   167,  3934,  4357,   628,   629,  3938,   141,
     119,   120,   121,   122,   123,   278,  4368,   158,   356,   574,
     618,   619,   620,   621,   622,   623,   624,   625,   509,    82,
      91,   401,  4384,  4385,   598,   628,   629,   401,   104,   532,
     629,  2857,   363,    96,  2860,  2861,   524,  2863,  4400,  4401,
     425,   628,   356,  4405,   157,  3248,   628,   629,  3251,  3252,
    2876,   554,   114,  2879,   128,   629,   628,   629,   628,   629,
     628,   629,   387,  3957,   104,  3268,     6,   451,  2894,   628,
     629,  2769,   214,   634,  3507,  3508,   401,   627,    26,  2905,
     628,   629,  2908,   628,   629,   245,   113,  3520,     4,   469,
     596,   476,   477,   596,  3527,   628,   629,   464,   217,   218,
     219,   220,   628,   629,  2930,   490,   243,  2933,   497,   498,
     629,   500,  2938,   502,   561,   628,   629,   545,   492,   387,
    3553,  3554,    56,    71,   431,   514,   172,  2953,  3146,  3147,
     514,  2957,   114,  2959,    82,    63,  1157,  1158,  3105,  3106,
     561,   111,  3406,  3407,   222,   629,   574,   629,  2974,   635,
      71,  2933,    80,  4093,  4094,  2953,   316,   233,  3361,    12,
      36,   601,   628,  2989,    92,  3701,  3702,   628,  3704,  3705,
    2996,   561,   111,   538,   250,  4155,  4070,  4155,   141,  2877,
     128,   495,  3008,   561,     9,    36,   262,  2885,   629,   635,
     628,   571,   255,   233,   628,   627,   635,   571,   168,   266,
     319,   159,   321,   322,   323,   635,   629,  3149,   634,   278,
     250,   330,   278,   561,  2996,    49,   629,   278,  3921,   379,
     278,  4004,   262,  3165,   278,   195,  3706,  3707,  3708,   278,
     528,   627,   273,   618,   619,   620,   621,   622,   623,   624,
     625,   629,   118,  3740,   549,   386,   629,   561,   629,   125,
     549,   370,    12,   629,   373,   194,   161,   243,   629,   229,
    3086,   189,   622,   339,   327,   629,   194,   118,  3094,  1077,
    1078,  1079,   629,   221,   125,   223,   244,   526,   180,  3668,
     190,  4234,   629,  2981,   142,  3654,   575,  1095,   629,   352,
     229,   410,  3118,   486,   390,   137,   361,   629,   628,   339,
     629,   229,   178,   142,   161,   253,   161,   277,   629,   185,
    3136,  3137,   161,   161,  3140,   161,   161,   161,   161,  1127,
     161,   361,  1130,  3149,   161,   253,   161,   178,   161,  3155,
     161,   491,   161,   161,   185,   161,   577,   213,   277,  3165,
     161,  1149,  1150,   462,   463,  1153,   161,  3173,   608,   582,
     361,   414,   161,   361,  3764,   497,   498,   499,   500,   501,
     502,   361,   213,  1171,  1172,   525,   629,  3193,   195,   192,
    3867,   628,   514,   628,   183,   451,   628,   628,   628,  3205,
     622,  4334,   628,   628,   628,   243,   192,   196,   628,  3215,
     629,  3217,   621,   627,   629,   570,  3094,   628,   207,   629,
    3226,   349,   350,   628,   243,   281,  3232,   355,  3234,  3351,
    3236,   451,   628,   361,   628,   628,   628,   628,  4398,   474,
    4398,   627,   627,   625,   628,   549,   627,   231,   398,  3820,
     281,   629,   602,   403,   520,   627,   627,   203,   514,   192,
     503,  4421,   192,  4421,   628,   635,   170,   256,  4428,   258,
    4428,   455,   411,   401,  4434,   142,  4434,   473,   629,   387,
     629,   190,  4245,  4246,   340,  4248,    47,   337,   503,   503,
     503,   329,   503,   401,   514,   351,   285,   503,     6,   355,
     356,   600,    80,  3309,   464,    13,   387,    15,   387,   340,
     329,   387,   549,   137,   613,   614,   615,  3439,    26,    27,
    3869,   471,   251,   251,   355,   356,   529,   529,  3334,  3335,
    3336,   137,   387,  3339,    47,   387,  4299,   385,  4301,  4302,
     387,   469,   387,   387,   627,  3351,   434,   627,   627,    57,
     277,   583,   471,   635,    62,    63,   628,   346,   155,   628,
     239,    69,   239,   628,   635,   628,   628,   628,   635,   628,
     549,   635,   629,   492,    82,   635,   628,   549,   549,   529,
     635,   538,    90,   273,   492,   535,   609,   635,    88,   629,
      47,  4034,   100,   549,   627,   161,  4359,   627,   368,   627,
     192,  3972,   192,   192,   554,   240,   114,  3529,   192,   247,
     529,   400,   170,   532,  3420,   356,   535,   635,  3424,   635,
     128,  4396,   250,   131,  3302,   629,   374,   250,   320,   579,
     138,   139,   114,  3439,    26,    27,   114,   145,   476,   477,
     253,   253,   635,   571,   549,   153,   596,  3325,   367,   157,
     627,   159,   571,   627,   205,   538,   448,   476,   477,   627,
     579,   387,   329,   571,   371,    82,   635,    59,    60,   622,
      62,   241,   627,    90,   241,  3481,  3491,   628,   627,    71,
     188,  3603,   538,   628,   628,   627,   542,  4036,  4057,   545,
      82,   628,  3498,   628,   635,   628,   628,   114,    90,   628,
     556,   604,   361,   225,   622,   561,   628,   538,   564,   268,
     635,   542,   629,   221,   545,   223,   387,   628,   628,   227,
     520,   229,   114,  3529,    34,   556,   192,   629,   243,   237,
     561,   264,    71,   564,   576,   361,   128,    55,   250,   131,
     250,   628,   159,   629,   252,   629,   253,    65,  3670,  3555,
     627,   253,   399,   627,   629,    82,  3562,    67,   629,   361,
     361,  1549,    19,    81,   620,   621,   628,   159,   629,   627,
     361,   489,    47,   361,  3580,    93,    94,    95,   465,   628,
     618,   619,   620,   621,   622,   623,   624,   625,   627,   620,
     621,   109,   267,   627,   467,   627,   416,  3603,   306,   618,
     619,   620,   621,   622,   623,   624,   625,   627,   604,   476,
     477,   148,   229,   203,    82,   260,   324,   629,   628,   205,
     328,   475,   250,   250,   628,   135,   628,   128,    96,   221,
     627,   223,   128,  4116,   627,   629,   627,   229,    86,   627,
     397,  4284,   483,   628,   144,   237,   489,  1635,  4131,   159,
    3656,  1639,  3530,   163,   635,   460,   628,   628,   366,   628,
     252,  4144,   629,   371,  3670,    19,   628,   628,   136,   628,
     378,   671,   380,  1661,   628,    34,   676,    34,    60,   387,
     388,   241,  3688,   356,   628,   628,   628,   197,   326,   306,
     628,  3569,   255,   411,   276,  3701,  3702,   368,  3704,  3705,
     240,   604,   627,   627,  3826,   628,   216,   324,   629,    47,
     326,   419,   712,   635,   306,   629,   211,   416,   583,   538,
     230,   538,  4293,   583,   303,   433,   434,   435,   436,   729,
     347,   627,   324,   627,   627,   593,   119,   120,   121,   122,
     123,   627,   627,   593,   628,  3751,  4389,  4296,   456,   627,
      14,   618,   619,   620,   621,   622,   623,   624,   625,   627,
     576,   128,   253,    19,  3770,  3771,   253,   355,   278,    34,
     770,   771,   772,   773,   629,   628,  3782,   170,   627,   455,
    4423,   356,   782,   629,  4267,   326,   378,   255,   380,   174,
     300,    17,   538,   538,  4277,   538,   388,   253,   532,   628,
     318,   587,   583,   628,   583,   513,   240,  3813,   361,  3771,
     507,   588,   627,   351,   448,   170,  4365,   335,   628,   604,
    3826,   529,   356,   138,   368,   533,   576,   519,   627,   627,
     190,   627,    12,    13,   217,   218,   219,   220,   156,   601,
      31,   636,   190,    61,   552,   628,   628,  4330,   628,   557,
    3856,  3813,   382,   540,   137,   137,   627,   159,   403,   327,
      73,   601,   570,   863,   456,  4348,   424,  4350,   628,   192,
      31,  3877,   628,  3751,  4357,    63,  3882,    63,   368,   627,
     629,   349,   350,   520,   352,  4368,  4435,    47,   269,    47,
     627,   627,   402,     5,   361,   361,   513,   240,   155,   368,
     136,   411,   633,   368,   144,    47,   627,    47,   154,    47,
     132,   576,   529,   601,   155,   224,   426,  4400,  4401,   283,
     636,   513,  4405,   103,   633,   633,   127,   150,    47,   455,
      47,   627,    47,   628,   444,    53,   319,   529,   321,   322,
     323,   533,   253,   461,   633,   457,   414,   330,  3954,  4071,
     222,   628,   132,   155,  3960,   629,   541,   629,   208,   629,
     552,    47,   629,    53,   633,   145,   628,   628,   438,   190,
     190,   190,   225,   483,   484,   541,   128,   603,   570,   356,
    3986,   627,  3988,   191,  3990,   473,   629,  3887,   168,  3311,
    2257,   171,  2049,  3312,  2429,   654,  3578,  4037,   516,   509,
    3914,  4225,   182,  4226,  3576,  3580,   996,  3769,  4423,  4376,
    4016,    46,   576,  2753,  1810,  4386,   534,  3761,  1018,  3761,
    3761,   531,  3761,   203,  4264,  3761,  3761,   410,  3761,  4109,
    3761,  3761,  3761,  4264,  3761,   503,  4219,   629,  4135,  4045,
    3761,  3761,  4134,  1735,  3922,  3919,  3118,  1465,  2007,   229,
    1467,  2903,  1475,  4175,  1036,  2732,   236,  2303,  3960,  3814,
    1310,  4060,  3422,    12,    13,  4071,  4334,  4242,  4293,  3972,
     580,  4077,  1519,  1073,  1074,   515,  3585,  2000,  3236,   462,
     463,  2982,  1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,
    1090,  1091,  1092,  1093,  1094,  2577,   276,  2008,  2509,  3215,
    3224,  4261,  1102,  1103,  3869,  1105,  3034,  1107,  3259,  3727,
    3293,  1111,  3540,  4057,  1114,  1115,  1116,  1117,  4240,  1119,
    1120,  1121,  3529,  3165,  3994,    11,    11,  4093,  1128,  1129,
    1533,  1131,  1132,  1133,  1134,  1135,  3925,  4094,  1138,  1139,
    1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  4155,
    3782,  1151,  1152,  3938,   103,  1155,  3934,  2085,  3735,  1159,
    2007,  1161,  1162,  3217,  2502,   629,   966,  4045,  1884,  4175,
    3495,  2315,  1425,  1173,  1174,  3216,  1515,  1802,  1474,  2718,
    2290,  1181,  3113,   132,  4190,  4191,  4064,  4065,  1188,  1189,
    1190,  2337,  1192,  2208,  3763,   597,   145,  1821,  2120,  1199,
    1200,  1201,   906,  1203,  1204,  1205,  1206,  1207,  3094,  1209,
    1210,  1211,  1212,  1213,  1214,  1215,  1216,   600,  2696,   168,
    1220,  1221,   171,  2117,   404,  1122,  2207,  2392,   408,  3841,
    3183,   614,   615,   182,  4240,  3695,  4190,  2798,  3309,  1095,
    4191,  2236,  3689,   226,   424,    26,    27,  3226,  2498,  3670,
    4365,  2090,   432,  2342,   203,  1323,  2284,  1293,  2319,  3424,
     440,  3131,  3130,  4269,  3193,  4155,   587,  1542,   667,  1873,
    4276,  1377,   575,  1754,  1405,  1874,  3234,  3116,    59,    60,
     229,    62,  4286,  1329,  4332,   465,  4182,   236,  4166,  4167,
      71,  4252,  4428,  4434,  3531,  4417,  3136,  1297,   478,   479,
    1357,    82,  1826,   286,   287,   288,   289,   290,   291,    90,
     293,   294,   295,   296,   297,   298,   299,  2785,   301,   302,
    3173,  3450,  1783,  3678,   676,   567,   888,   276,  1285,  1347,
    3803,   568,  1524,   114,  3809,  2706,   893,   511,   511,    -1,
     654,  4347,   654,   523,   654,    -1,  4352,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    -1,  1357,    -1,    -1,
     712,    -1,    -1,    -1,    -1,  1365,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   554,    -1,    -1,   729,   159,    -1,
    4258,    -1,    -1,  4389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4398,    -1,    -1,    -1,   576,    -1,   578,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4417,    -1,    -1,    -1,  4421,    -1,  4423,    -1,    -1,
      -1,   773,  4428,    -1,    -1,    -1,    -1,    -1,  4434,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     221,    -1,   223,    34,    -1,   428,   429,    -1,   229,    -1,
      -1,    -1,    -1,    -1,    -1,   404,   237,    -1,    -1,   408,
      13,    -1,    15,    -1,    -1,    -1,    -1,  1467,    -1,    -1,
      -1,   252,    -1,    -1,    -1,   424,    67,    -1,    31,    -1,
      -1,    -1,    35,   432,    -1,   266,    -1,    -1,    -1,    -1,
      -1,   440,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,   863,    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,   478,
     479,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   324,   135,    -1,    -1,    -1,    -1,    -1,
     103,    -1,    -1,    -1,    -1,  1555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,
      -1,   124,   163,    -1,   523,    -1,    -1,    -1,    -1,   132,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   144,   145,    -1,    -1,    -1,    -1,   378,    -1,   380,
      -1,    -1,    -1,    -1,   157,   554,   197,   388,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,   216,    -1,   576,    -1,   578,
      -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,
      -1,    -1,    -1,    -1,    -1,    -1,  1018,  1667,  1668,  1669,
      -1,    -1,    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,
      -1,  1681,    -1,   236,    -1,   238,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,    -1,    -1,    -1,    -1,    -1,  1707,    -1,   300,
      -1,    -1,    -1,  1713,    -1,    -1,  1716,    -1,  1718,   272,
      -1,  1073,  1074,   276,  1724,    -1,  1726,  1727,    -1,    -1,
    1082,  1083,   513,    -1,  1086,  1087,  1088,  1089,  1090,  1091,
    1092,  1093,  1094,    -1,    -1,    -1,    -1,    -1,   529,    -1,
    1102,  1103,   533,  1105,    -1,  1107,    -1,    -1,    -1,    -1,
      -1,    -1,  1114,  1115,  1116,  1117,    -1,    -1,  1120,    -1,
      -1,   552,    -1,    -1,    -1,    -1,  1128,  1129,    -1,  1131,
    1132,    -1,    -1,    -1,    -1,    -1,  1138,  1139,  1140,   570,
      -1,  1143,  1144,  1145,  1146,  1147,  1148,  1797,    -1,  1151,
    1152,    -1,    -1,  1155,    -1,    -1,    -1,  1159,    -1,  1161,
    1162,   402,    -1,   366,    -1,    -1,    -1,    -1,    -1,    -1,
     411,  1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,  1181,
     383,    -1,    -1,    -1,   387,   426,  1188,  1189,  1190,    -1,
      -1,    -1,    -1,    -1,    -1,   398,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   444,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1221,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   431,    -1,
      -1,   434,    -1,   436,    -1,    -1,   439,    -1,    -1,   442,
     443,    -1,   483,   484,    -1,    -1,    -1,   450,    -1,   452,
      -1,    -1,    -1,    -1,    -1,    -1,   459,    -1,    -1,    -1,
      -1,    -1,   465,    -1,    -1,    -1,    -1,    -1,   509,    -1,
     473,    -1,    -1,    -1,    -1,   478,    -1,   480,    -1,    -1,
     483,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
     531,   532,    -1,    13,    -1,  1297,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   508,    -1,    -1,    -1,   512,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2000,    -1,    -1,    -1,   557,  1357,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1365,    -1,    -1,   569,    -1,    -1,    -1,
     573,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,   582,
    2030,    -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    15,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,    -1,   132,    -1,   617,    -1,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   627,   145,    -1,    -1,    -1,    -1,
      49,    50,    -1,  2083,    -1,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    -1,    -1,    -1,   168,  2099,
      -1,   171,    -1,  2103,    -1,    -1,    -1,    -1,  2108,  2109,
      -1,    -1,   182,    -1,    -1,    84,    -1,  2117,  2118,    -1,
    2120,  2121,  2122,  2123,    -1,  2125,    -1,    -1,  2128,    -1,
      -1,    -1,    -1,   203,   103,    -1,    -1,    -1,  2138,    -1,
    2140,  2141,    -1,  2143,  2144,  2145,  2146,    -1,  2148,    -1,
      -1,  2151,    -1,    -1,    -1,   124,    -1,    -1,    -1,   229,
    2160,    -1,    -1,   132,   133,   134,   236,  2167,    -1,  2169,
      -1,  2171,  2172,  2173,  2174,   144,   145,    -1,  2178,  2179,
    2180,    -1,    -1,    -1,  2184,  2185,  2186,    -1,  2188,    -1,
    2190,    -1,  2192,    -1,  2194,    -1,  2196,    -1,    -1,    -1,
      -1,  2201,   171,  1555,    -1,    -1,   276,    -1,    -1,    26,
      27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,  2219,
      -1,    -1,    -1,    -1,    -1,    -1,  2226,    -1,    -1,  2229,
      -1,    -1,    -1,    -1,   203,  2235,    -1,    -1,  2238,   208,
      -1,    -1,  2242,   212,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,   236,    -1,   238,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,  2298,    -1,
      -1,    -1,    -1,   272,    -1,    -1,    -1,   276,    -1,    -1,
      -1,   128,    -1,    -1,   131,  1667,  1668,  1669,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   424,  1707,    -1,    -1,    -1,    -1,
      -1,    -1,   432,    -1,  1716,    -1,  1718,    -1,    -1,    -1,
     440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   465,    -1,   366,    -1,    -1,
      -1,    -1,    -1,    -1,   221,    -1,   223,    -1,   478,   479,
      -1,    -1,   229,    -1,   383,    26,    27,    -1,   387,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
      -1,    -1,    -1,    -1,    -1,   252,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,  1797,    -1,    -1,    59,    60,
      -1,    62,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,   431,    -1,    -1,   434,    -1,   436,    -1,    -1,
     439,    82,    -1,   442,   443,    -1,    -1,    -1,    -1,    90,
      -1,   450,    -1,   452,   554,    -1,    -1,    -1,    -1,   306,
     459,    -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,
      -1,    -1,  2502,   114,   473,    -1,   576,   324,   578,   478,
      -1,   480,    -1,    -1,   483,    -1,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,
      -1,    -1,    -1,   512,    -1,    -1,    -1,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2581,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2598,    -1,
     569,    -1,  2602,    -1,   573,    -1,    -1,   576,    -1,    -1,
     221,    -1,   223,   582,    -1,    -1,    -1,    -1,   229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,  2632,  2633,    -1,    -1,    -1,    -1,    -1,   456,
      -1,   252,   611,    -1,    -1,    -1,    -1,    -1,   617,    -1,
      -1,    -1,  2652,    -1,    -1,    -1,    -1,    -1,   627,    -1,
      -1,  2661,    -1,  2663,    -1,  2665,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2030,    -1,
      -1,    -1,    -1,    -1,    -1,  2685,    -1,    -1,    -1,    -1,
    2690,    -1,    -1,    -1,    -1,   306,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   529,   324,  2714,    -1,   533,    -1,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    39,    -1,    41,
      -1,    43,    44,    -1,    -1,   552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2099,    60,    -1,
      -1,  2103,    -1,   570,    -1,    -1,  2108,  2109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2117,  2118,   378,  2120,   380,
    2122,  2123,    -1,  2125,    -1,    -1,    -1,   388,  2778,    -1,
      -1,    -1,  2782,    -1,    -1,    -1,  2138,    -1,  2140,    -1,
      -1,  2143,  2144,  2145,  2146,    -1,  2148,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,    -1,   118,    -1,  2160,    -1,
      -1,    -1,    -1,    -1,   126,  2167,    -1,  2169,    -1,  2171,
    2172,  2173,    -1,    -1,    -1,    -1,  2178,  2179,  2180,  2829,
      -1,   143,  2184,  2185,  2186,    -1,  2188,    -1,  2190,    -1,
    2192,    -1,  2194,    -1,  2196,   456,    -1,    -1,   160,  2201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2219,    -1,    -1,
      -1,    -1,   184,    -1,   186,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2235,    -1,    -1,  2238,   199,   200,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2950,  2951,    -1,    -1,    -1,    -1,    -1,    -1,   270,   570,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     312,   313,   314,  3003,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    -1,  3016,    -1,    -1,   331,
     332,   333,    34,    35,    -1,    -1,   338,    -1,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   357,   358,    59,    60,  3049,
    3050,    -1,  3052,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,  3061,    -1,    -1,    -1,    -1,  3066,    -1,    -1,  3069,
      -1,  3071,  3072,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,  3092,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,    -1,    -1,    -1,    -1,    -1,   418,  3107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   158,   159,    -1,    -1,
      -1,    -1,   164,    -1,    -1,   167,    -1,   469,    -1,    -1,
    3160,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,  3174,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
     202,    -1,   204,    -1,    -1,  3195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3204,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,   229,   230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,
     542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,   251,
      -1,    -1,    -1,    -1,    -1,    -1,  2598,    -1,    -1,    -1,
    2602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     6,    -1,   589,   590,    -1,
    2632,  2633,    13,    -1,    -1,    -1,  3286,    -1,   300,    -1,
      -1,    -1,    -1,    -1,    -1,    26,    27,    -1,    -1,    -1,
    2652,    -1,    -1,   615,    -1,    -1,    -1,    -1,    -1,  2661,
      -1,  2663,    -1,  2665,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,   365,    -1,    -1,    -1,    -1,    -1,    90,
      -1,    -1,  2714,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,
     402,   403,    -1,    -1,   406,   407,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,    -1,
      -1,    -1,    -1,    -1,   145,   427,    -1,    -1,    -1,    -1,
      -1,    -1,   153,    -1,    -1,  3425,  2778,    -1,   159,    -1,
    2782,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   470,    -1,
      -1,    -1,    -1,    -1,  3464,  3465,    -1,    -1,    -1,    -1,
      -1,   483,    -1,  3473,    -1,    -1,    -1,  2829,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     221,    -1,   223,    -1,    -1,    -1,    -1,   509,   229,    -1,
      -1,   513,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,
     532,   252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,   591,
      -1,    -1,    -1,    -1,    -1,  3585,    -1,   599,    -1,    -1,
      -1,    -1,    -1,   324,    -1,    -1,    -1,   328,  2950,  2951,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,   380,
      -1,  3651,    -1,    -1,    -1,    -1,    -1,   388,    -1,    -1,
      -1,    -1,    -1,    -1,  3016,  3665,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3678,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3049,  3050,    -1,
      -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,    -1,  3061,
      -1,    -1,    -1,    -1,  3066,    -1,    -1,  3069,    -1,  3071,
    3072,    -1,    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3107,    -1,    -1,    -1,    -1,
      -1,  3761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3130,    -1,
      -1,  3781,   513,    -1,    -1,  3785,  3786,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3814,    -1,    -1,    -1,    -1,    -1,
      -1,   552,  3174,    -1,  3824,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3833,    -1,  3835,    -1,    -1,    -1,   570,
      -1,    -1,    -1,  3195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3874,    -1,    -1,    -1,    -1,    -1,
    3880,  3881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3925,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3934,    -1,    -1,    -1,  3938,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3977,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3996,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4009,
      -1,  4011,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4021,    -1,  4023,  4024,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4048,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4091,    -1,  4093,  4094,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3464,  3465,  4114,    -1,  4116,    -1,    -1,    -1,
      -1,  3473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4131,  4132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4205,  4206,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4218,  4219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4267,  3620,    -1,
      -1,    -1,    -1,    -1,  4274,    -1,    -1,  4277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3651,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4311,    -1,  3665,    -1,    -1,    -1,    -1,  4318,    -1,
    4320,    -1,    -1,    -1,    -1,    -1,  3678,    -1,    -1,    -1,
    4330,    -1,    -1,    -1,  4334,    -1,    -1,  4337,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4346,    -1,  4348,    -1,
    4350,    -1,    -1,    -1,    -1,    -1,    -1,  4357,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4384,  4385,    -1,    -1,    -1,    -1,
    4390,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4400,  4401,    -1,    -1,    -1,  4405,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4437,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3833,    -1,  3835,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3874,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3977,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4009,    -1,  4011,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4021,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4156,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4311,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4337,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    45,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,  4390,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,  4437,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
     259,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,   510,   511,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,   538,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,   550,   551,   552,   553,    -1,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,   584,   585,   586,   587,   588,
      -1,    -1,   591,   592,    -1,   594,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,    -1,
      -1,   620,   621,    -1,    -1,    -1,    -1,   626,   627,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,   510,   511,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,   555,   556,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,   584,   585,   586,   587,
     588,    -1,    -1,   591,   592,    -1,   594,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,
      -1,    -1,   620,   621,    -1,    -1,    -1,    -1,   626,   627,
      -1,    -1,   630,   631,    -1,    -1,   634,   635,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,   510,   511,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,   538,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,   584,   585,   586,
     587,   588,    -1,    -1,   591,   592,    -1,   594,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,
      -1,    -1,    -1,   620,   621,    -1,    -1,    -1,    -1,   626,
     627,    -1,    -1,   630,   631,    -1,    -1,   634,   635,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,   510,   511,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,   538,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,   555,
     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,   584,   585,
     586,   587,   588,    -1,    -1,   591,   592,    -1,   594,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,   615,
      -1,    -1,    -1,    -1,   620,   621,    -1,    -1,    -1,    -1,
     626,   627,    -1,    -1,   630,   631,    -1,    -1,   634,   635,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,   510,   511,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,   538,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,   584,
     585,   586,   587,   588,    -1,    -1,   591,   592,    -1,   594,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,
     615,    -1,    -1,    -1,    -1,   620,   621,    -1,    -1,    -1,
      -1,   626,   627,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,   510,   511,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,   538,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,   555,   556,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
     584,   585,   586,   587,   588,    -1,    -1,   591,   592,    -1,
     594,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
      -1,   615,    -1,    -1,    -1,    -1,   620,   621,    -1,    -1,
      -1,    -1,   626,   627,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,   510,   511,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,   538,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,   584,   585,   586,   587,   588,    -1,    -1,   591,   592,
      -1,   594,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,    -1,   615,    -1,    -1,    -1,    -1,   620,   621,    -1,
      -1,    -1,    -1,   626,   627,    -1,    -1,   630,   631,    -1,
      -1,   634,   635,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,    -1,   109,   110,   111,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,    -1,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,    -1,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,   510,   511,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,   538,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,   584,   585,   586,   587,   588,    -1,    -1,   591,
     592,    -1,   594,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,    -1,   615,    -1,    -1,    -1,    -1,   620,   621,
      -1,    -1,    -1,    -1,   626,   627,    -1,    -1,   630,   631,
      -1,    -1,   634,   635,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,   208,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,    -1,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,   355,   356,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,   510,
     511,   512,   513,    -1,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,   538,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,    -1,   568,   569,    -1,
      -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,
     581,    -1,    -1,   584,   585,   586,   587,   588,    -1,    -1,
     591,   592,    -1,   594,   595,   596,   597,   598,   599,   600,
      -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,
     611,   612,    -1,    -1,   615,    -1,    -1,    -1,    -1,   620,
     621,    -1,    -1,    -1,    -1,   626,   627,    -1,    -1,   630,
     631,    -1,    -1,   634,   635,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,    -1,   109,
     110,   111,    -1,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,   208,   209,
     210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
     510,   511,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,   538,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,   584,   585,   586,   587,   588,    -1,
      -1,   591,   592,    -1,   594,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,    -1,   615,    -1,    -1,    -1,    -1,
     620,   621,    -1,    -1,    -1,    -1,   626,   627,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,   355,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,   510,   511,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,   538,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,   584,   585,   586,   587,   588,
      -1,    -1,   591,   592,    -1,   594,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,    -1,
      -1,   620,   621,    -1,    -1,    -1,    -1,   626,   627,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,   510,   511,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,   555,   556,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,   584,   585,   586,   587,
     588,    -1,    -1,   591,   592,    -1,   594,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,
      -1,    -1,   620,   621,    -1,    -1,    -1,    -1,   626,   627,
      -1,    -1,   630,   631,    -1,    -1,   634,   635,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,    -1,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,    -1,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,   510,   511,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,   538,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,   584,   585,   586,
     587,   588,    -1,    -1,   591,   592,    -1,   594,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,
      -1,    -1,    -1,   620,   621,    -1,    -1,    -1,    -1,   626,
     627,    -1,    -1,   630,   631,    -1,    -1,   634,   635,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,    -1,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,    -1,   355,
     356,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,   438,   439,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,   510,   511,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,   538,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,   555,
     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,   584,   585,
     586,   587,   588,    -1,    -1,   591,   592,    -1,   594,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,   615,
      -1,    -1,    -1,    -1,   620,   621,    -1,    -1,    -1,    -1,
     626,   627,    -1,    -1,   630,   631,    -1,    -1,   634,   635,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,    -1,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,    -1,
     355,   356,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,   510,   511,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,   538,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,   584,
     585,   586,   587,   588,    -1,    -1,   591,   592,    -1,   594,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,
     615,    -1,    -1,    -1,    -1,   620,   621,    -1,    -1,    -1,
      -1,   626,   627,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
      -1,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
      -1,   355,   356,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,   510,   511,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,   538,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,   555,   556,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
     584,   585,   586,   587,   588,    -1,    -1,   591,   592,    -1,
     594,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
      -1,   615,    -1,    -1,    -1,    -1,   620,   621,    -1,    -1,
      -1,    -1,   626,   627,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,   355,   356,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,   538,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,    -1,   615,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,   634,   635,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,   229,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,   253,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,   266,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,    -1,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
      -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,    -1,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,
     558,   559,   560,    -1,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   635,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,   229,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,   253,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,
      -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,   558,   559,   560,    -1,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,
     615,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     635,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,    -1,   615,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,   628,    -1,    -1,    18,
      -1,    -1,    21,   635,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,    -1,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,    -1,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,    -1,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,   628,
      14,    -1,    -1,    -1,    18,   634,   635,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
      -1,   615,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,   627,    -1,    14,    -1,    -1,    -1,    18,
      -1,   635,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,   240,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,    -1,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,    -1,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,    -1,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,    -1,   615,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   635,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,
      -1,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,   557,   558,   559,   560,    -1,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,   615,
      -1,    -1,    -1,    -1,    -1,     5,   622,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   635,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,    -1,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,    -1,   615,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,   627,    -1,    14,
      -1,    -1,    -1,    18,    -1,   635,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,
      -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,   558,   559,   560,    -1,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,
     615,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   634,
     635,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,    -1,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,    -1,   615,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   635,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,   326,
      -1,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,
     347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,    -1,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,    -1,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,   525,   526,
      -1,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,   558,   559,   560,    -1,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   635,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
      -1,   615,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   635,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,
      -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,
      -1,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
      -1,   512,   513,    -1,   515,   516,   517,   518,   519,   520,
      -1,    -1,   523,   524,   525,   526,    -1,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,   558,   559,   560,
      -1,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     591,    -1,    -1,    -1,   595,   596,   597,   598,   599,   600,
      -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,
     611,   612,    -1,    -1,   615,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   635,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,    -1,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
      -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,    -1,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,
     558,   559,   560,    -1,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,    -1,   615,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   634,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,
      -1,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,   538,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,   557,   558,   559,   560,    -1,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,    -1,   615,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   634,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,   538,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
      -1,   615,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
     634,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,    -1,    -1,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
      -1,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,    -1,    -1,    -1,    -1,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,    -1,    -1,   435,    -1,   437,   438,    -1,   440,    -1,
      -1,    -1,   444,    -1,    -1,   447,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,    -1,   460,   461,
      -1,   463,    -1,    -1,    -1,    -1,   468,   469,   470,    -1,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,    -1,
     482,    -1,   484,    -1,   486,    -1,   488,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,    -1,   509,    -1,    -1,
      -1,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,    -1,    -1,    -1,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,   603,    -1,    -1,    -1,   607,    -1,    -1,   610,    -1,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,   629,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,   538,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,    -1,   615,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,   627,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
     622,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,     5,   615,     7,     8,     9,    10,    11,    -1,   622,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
       5,   615,     7,     8,     9,    10,    11,    -1,   622,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,
      -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,   558,   559,   560,    -1,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,     5,
     615,     7,     8,     9,    10,    11,    -1,   622,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,    -1,
     356,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,   557,   558,   559,   560,   561,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,     5,   615,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,   326,
      -1,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,
     347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,    -1,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,    -1,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,   525,   526,
      -1,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,   538,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,   558,   559,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,     5,   615,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,    -1,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
      -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,    -1,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,
     558,   559,   560,   561,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,     5,   615,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,   352,   353,    -1,    -1,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,    -1,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,    -1,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,   538,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,     5,   615,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,    -1,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,   474,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,   538,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,     5,   615,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,
      -1,   352,   353,    -1,    -1,   356,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
      -1,   512,   513,    -1,   515,   516,   517,   518,   519,   520,
      -1,    -1,   523,   524,   525,   526,    -1,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,   558,   559,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     591,    -1,    -1,    -1,   595,   596,   597,   598,   599,   600,
      -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,
     611,   612,    -1,     5,   615,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,   538,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,    -1,   356,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,   558,   559,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,     5,   615,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,   538,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
       5,   615,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,
      -1,   356,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,   558,   559,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,     5,
     615,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,
      -1,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,   538,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,   557,   558,   559,   560,    -1,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,     5,   615,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,   326,
      -1,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,
     347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,    -1,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,    -1,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,   525,   526,
      -1,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,   538,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,   558,   559,   560,    -1,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,     5,   615,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,    -1,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
      -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,    -1,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
     538,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,
     558,   559,   560,    -1,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,     5,   615,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,    -1,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,    -1,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,   538,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,    -1,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,     5,   615,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,    -1,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,   538,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,     5,   615,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,
      -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,
      -1,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
      -1,   512,   513,    -1,   515,   516,   517,   518,   519,   520,
      -1,    -1,   523,   524,   525,   526,    -1,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,   538,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,   558,   559,   560,
      -1,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     591,    -1,    -1,    -1,   595,   596,   597,   598,   599,   600,
      -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,
     611,   612,    -1,     5,   615,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,   538,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,     5,   615,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,
      -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,
       5,   615,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,   192,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,
      -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,   558,   559,   560,    -1,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,
     575,    -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,
      -1,    -1,   607,   608,    -1,   610,   611,   612,    -1,     5,
     615,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,
      -1,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   377,   378,   379,    -1,    -1,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,    -1,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,   508,   509,    -1,    -1,   512,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,   557,   558,   559,   560,    -1,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,
      -1,   577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,
      -1,   607,   608,    -1,   610,   611,   612,    -1,     5,   615,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,   326,
      -1,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,
     347,   348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,   379,    -1,    -1,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,    -1,   512,   513,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,   525,   526,
      -1,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,   558,   559,   560,    -1,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,
     577,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,
     597,   598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,
     607,   608,    -1,   610,   611,   612,    -1,     5,   615,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,
     378,   379,    -1,    -1,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
     398,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,   433,    -1,   435,   436,   437,
      -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,
     448,    -1,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,    -1,   512,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,
     558,   559,   560,    -1,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,
     608,    -1,   610,   611,   612,    -1,     5,   615,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
     379,    -1,    -1,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,    -1,   512,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,    -1,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,
      -1,   610,   611,   612,    -1,     5,   615,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,
      -1,    -1,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,    -1,   512,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,   538,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,    -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,
     610,   611,   612,    -1,     5,   615,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,
      -1,   352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,
      -1,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
      -1,   512,   513,    -1,   515,   516,   517,   518,   519,   520,
      -1,    -1,   523,   524,   525,   526,    -1,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,   558,   559,   560,
      -1,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,   572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     591,    -1,    -1,    -1,   595,   596,   597,   598,   599,   600,
      -1,    -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,
     611,   612,    -1,     5,   615,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,
     512,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,
     572,    -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,   379,    -1,    -1,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,    -1,   512,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,   558,   559,   560,    -1,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,   572,
      -1,    -1,   575,    -1,   577,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
      -1,    -1,    -1,    -1,   607,   608,    -1,   610,   611,   612,
      -1,     5,   615,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,   149,    -1,   151,   152,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,    -1,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,    -1,    -1,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,    -1,
      -1,   435,    -1,   437,   438,    -1,   440,    -1,    -1,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,    -1,   460,   461,    -1,   463,
      -1,    -1,    -1,    -1,   468,   469,   470,    -1,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,    -1,   482,    -1,
     484,    -1,   486,    -1,   488,    -1,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,    -1,   509,    -1,    -1,    -1,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,    -1,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,    -1,    -1,    -1,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,   603,
      -1,    -1,    -1,   607,    -1,    -1,   610,    -1,   612,    -1,
       5,   615,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,   151,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,
     345,   346,   347,   348,    -1,    -1,    -1,    -1,   353,    -1,
      -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,   364,
     365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,    -1,    -1,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,    -1,    -1,
     435,    -1,   437,   438,    -1,   440,    -1,    -1,    -1,   444,
      -1,    -1,   447,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,    -1,   460,   461,    -1,   463,    -1,
      -1,    -1,    -1,   468,   469,   470,    -1,    -1,    -1,    -1,
     475,    -1,    -1,    -1,   479,    -1,    -1,   482,    -1,   484,
      -1,   486,    -1,   488,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,
      -1,    -1,   507,    -1,   509,    -1,    -1,    -1,   513,    -1,
     515,   516,   517,   518,   519,   520,    -1,    -1,   523,   524,
     525,   526,    -1,   528,   529,    -1,   531,    -1,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
     545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,   558,   559,   560,    -1,   562,   563,    -1,
     565,   566,    -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,
     595,   596,   597,   598,   599,   600,   601,    -1,   603,    -1,
      -1,    -1,   607,    -1,    -1,   610,    -1,   612,    -1,     5,
     615,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,   149,    -1,   151,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
     326,    -1,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,
     346,   347,   348,    -1,    -1,    -1,    -1,   353,    -1,    -1,
      -1,    -1,   358,   359,   360,    -1,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,    -1,
      -1,    -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,    -1,    -1,   435,
      -1,   437,   438,    -1,   440,    -1,    -1,    -1,   444,    -1,
      -1,   447,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,    -1,   460,   461,    -1,   463,    -1,    -1,
      -1,    -1,   468,   469,   470,    -1,    -1,    -1,    -1,   475,
      -1,    -1,    -1,   479,    -1,    -1,   482,    -1,   484,    -1,
     486,    -1,   488,    -1,   490,   491,    -1,    -1,    -1,    -1,
      -1,    -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,
      -1,   507,    -1,   509,    -1,    -1,    -1,   513,    -1,   515,
     516,   517,   518,   519,   520,    -1,    -1,   523,   524,   525,
     526,    -1,   528,   529,    -1,   531,    -1,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,
      -1,    -1,   558,   559,   560,    -1,   562,   563,    -1,   565,
     566,    -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
      -1,    -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,
     596,   597,   598,   599,   600,   601,    -1,   603,    -1,    -1,
      -1,   607,    -1,    -1,   610,    -1,   612,    -1,     5,   615,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,   326,
      -1,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,
     347,   348,    -1,    -1,    -1,    -1,   353,    -1,    -1,    -1,
      -1,   358,   359,   360,    -1,   362,   363,   364,   365,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,
     437,   438,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,
     447,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,    -1,   460,   461,    -1,   463,    -1,    -1,    -1,
      -1,   468,   469,   470,    -1,    -1,    -1,    -1,   475,    -1,
      -1,    -1,   479,    -1,    -1,   482,    -1,   484,    -1,   486,
      -1,   488,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,
     507,    -1,   509,    -1,    -1,    -1,   513,    -1,   515,   516,
     517,   518,   519,   520,    -1,    -1,   523,   524,   525,   526,
      -1,   528,   529,    -1,   531,    -1,   533,   534,   535,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,   545,    -1,
      -1,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,   558,   559,   560,    -1,   562,   563,    -1,   565,   566,
      -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,
     597,   598,   599,   600,    -1,    -1,   603,    -1,    -1,    -1,
     607,    -1,    -1,   610,    -1,   612,    -1,     5,   615,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
      -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,   300,   301,   302,    -1,   304,   305,   306,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,    -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,
     348,    -1,    -1,    -1,    -1,   353,    -1,    -1,    -1,    -1,
     358,   359,   360,    -1,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,    -1,    -1,    -1,
      -1,   399,   400,    -1,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,
     438,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,   447,
     448,   449,    -1,    -1,    -1,   453,   454,   455,   456,   457,
     458,    -1,   460,   461,    -1,   463,    -1,    -1,    -1,    -1,
     468,   469,   470,    -1,    -1,    -1,    -1,   475,    -1,    -1,
      -1,   479,    -1,    -1,   482,    -1,   484,    -1,   486,    -1,
     488,    -1,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,
      -1,   509,    -1,    -1,    -1,   513,    -1,   515,   516,   517,
     518,   519,   520,    -1,    -1,   523,   524,   525,   526,    -1,
     528,   529,    -1,   531,    -1,   533,   534,   535,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,
     558,   559,   560,    -1,   562,   563,    -1,   565,   566,    -1,
      -1,    -1,    -1,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,
     598,   599,   600,    -1,    -1,   603,    -1,    -1,    -1,   607,
      -1,    -1,   610,    -1,   612,    -1,     5,   615,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
      -1,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
      -1,    -1,   341,   342,    -1,    -1,   345,   346,   347,   348,
      -1,    -1,    -1,    -1,   353,    -1,    -1,    -1,    -1,   358,
     359,   360,    -1,   362,   363,   364,   365,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,    -1,    -1,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,   438,
      -1,   440,    -1,    -1,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,   453,   454,   455,   456,   457,   458,
      -1,   460,   461,    -1,   463,    -1,    -1,    -1,    -1,   468,
     469,   470,    -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,
     479,    -1,    -1,   482,    -1,   484,    -1,   486,    -1,   488,
      -1,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     499,    -1,   501,    -1,    -1,   504,    -1,    -1,   507,    -1,
     509,    -1,    -1,    -1,   513,    -1,   515,   516,   517,   518,
     519,   520,    -1,    -1,   523,   524,   525,   526,    -1,   528,
     529,    -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,   558,
     559,   560,    -1,   562,   563,    -1,   565,   566,    -1,    -1,
      -1,    -1,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,
      -1,    -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,
     599,   600,    -1,    -1,   603,    -1,    -1,    -1,   607,    -1,
      -1,   610,    -1,   612,    -1,     5,   615,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
      -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
     300,   301,   302,    -1,   304,   305,   306,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,
     320,    -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,    -1,
      -1,   341,   342,    -1,    -1,   345,   346,   347,   348,    -1,
      -1,    -1,    -1,   353,    -1,    -1,    -1,    -1,   358,   359,
     360,    -1,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
      -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,    -1,    -1,    -1,    -1,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,    -1,    -1,   435,    -1,   437,   438,    -1,
     440,    -1,    -1,    -1,   444,    -1,    -1,   447,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,    -1,
     460,   461,    -1,   463,    -1,    -1,    -1,    -1,   468,   469,
     470,    -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,
      -1,    -1,   482,    -1,   484,    -1,   486,    -1,   488,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,
      -1,   501,    -1,    -1,   504,    -1,    -1,   507,    -1,   509,
      -1,    -1,    -1,   513,    -1,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,   524,   525,   526,    -1,   528,   529,
      -1,   531,    -1,   533,   534,   535,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,
      -1,   551,   552,   553,    -1,    -1,    -1,    -1,   558,   559,
     560,    -1,   562,   563,    -1,   565,   566,    -1,    -1,    -1,
      -1,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,   591,    -1,    -1,    -1,   595,   596,   597,   598,   599,
     600,    -1,    -1,   603,    -1,    -1,    -1,   607,    -1,    -1,
     610,    -1,   612,    -1,     5,   615,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,    -1,
     341,   342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,
      -1,    -1,   353,    -1,    -1,    -1,    -1,   358,   359,   360,
      -1,   362,   363,   364,   365,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,    -1,    -1,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,    -1,    -1,   435,    -1,   437,   438,    -1,   440,
      -1,    -1,    -1,   444,    -1,    -1,   447,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,    -1,   460,
     461,    -1,   463,    -1,    -1,    -1,    -1,   468,   469,   470,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,    -1,   484,    -1,   486,    -1,   488,    -1,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,
     501,    -1,    -1,   504,    -1,    -1,   507,    -1,   509,    -1,
      -1,    -1,   513,    -1,   515,   516,   517,   518,   519,   520,
      -1,    -1,   523,   524,   525,   526,    -1,   528,   529,    -1,
     531,    -1,   533,   534,   535,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,   558,   559,   560,
      -1,   562,   563,    -1,   565,   566,    -1,    -1,    -1,    -1,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     591,    -1,    -1,    -1,   595,   596,   597,   598,   599,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,    -1,    -1,   610,
      -1,   612,    -1,     5,   615,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,    -1,    -1,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,    -1,   304,   305,   306,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,    -1,    -1,   341,
     342,    -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,
      -1,   353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,    -1,    -1,    -1,    -1,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,    -1,    -1,   435,    -1,   437,   438,    -1,   440,    -1,
      -1,    -1,   444,    -1,    -1,   447,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,    -1,   460,   461,
      -1,   463,    -1,    -1,    -1,    -1,   468,   469,   470,    -1,
      -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,    -1,
     482,    -1,   484,    -1,   486,    -1,   488,    -1,   490,   491,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,
      -1,    -1,   504,    -1,    -1,   507,    -1,   509,    -1,    -1,
      -1,   513,    -1,   515,   516,   517,   518,   519,   520,    -1,
      -1,   523,   524,   525,   526,    -1,   528,   529,    -1,   531,
      -1,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,   558,   559,   560,    -1,
     562,   563,    -1,   565,   566,    -1,    -1,    -1,    -1,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,
      -1,    -1,    -1,   595,   596,   597,   598,   599,   600,    -1,
      -1,   603,    -1,    -1,    -1,   607,    -1,    -1,   610,    -1,
     612,    -1,     5,   615,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,    -1,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,   326,    -1,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,    -1,    -1,   341,   342,
      -1,    -1,   345,   346,   347,   348,    -1,    -1,    -1,    -1,
     353,    -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,
     363,   364,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,    -1,    -1,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
      -1,    -1,   435,    -1,   437,   438,    -1,   440,    -1,    -1,
      -1,   444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,
     453,   454,   455,   456,   457,   458,    -1,   460,   461,    -1,
     463,    -1,    -1,    -1,    -1,   468,   469,   470,    -1,    -1,
      -1,    -1,   475,    -1,    -1,    -1,   479,    -1,    -1,   482,
      -1,   484,    -1,   486,    -1,   488,    -1,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,
      -1,   504,    -1,    -1,   507,    -1,   509,    -1,    -1,    -1,
     513,    -1,   515,   516,   517,   518,   519,   520,    -1,    -1,
     523,   524,   525,   526,    -1,   528,   529,    -1,   531,    -1,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,   558,   559,   560,    -1,   562,
     563,    -1,   565,   566,    -1,    -1,    -1,    -1,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,
      -1,    -1,   595,   596,   597,   598,   599,   600,    -1,    -1,
     603,    -1,    -1,    -1,   607,    -1,    -1,   610,    -1,   612,
      -1,     5,   615,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,    -1,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,   326,    -1,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,    -1,   341,   342,    -1,
      -1,   345,   346,   347,   348,    -1,    -1,    -1,    -1,   353,
      -1,    -1,    -1,    -1,   358,   359,   360,    -1,   362,   363,
     364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,    -1,    -1,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,    -1,
      -1,   435,    -1,   437,    -1,    -1,   440,    -1,    -1,    -1,
     444,    -1,    -1,   447,   448,    -1,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,    -1,   460,   461,    -1,   463,
      -1,    -1,    -1,    -1,   468,   469,   470,    -1,    -1,    -1,
      -1,   475,    -1,    -1,    -1,   479,    -1,    -1,   482,    -1,
     484,    -1,   486,    -1,   488,    -1,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,   498,   499,    -1,   501,    -1,    -1,
     504,    -1,    -1,   507,    -1,   509,    -1,    -1,    -1,   513,
      -1,   515,   516,   517,   518,   519,   520,    -1,    -1,   523,
     524,   525,   526,    -1,   528,   529,    -1,   531,    -1,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,   545,    -1,    -1,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,    -1,   558,   559,   560,    -1,   562,   563,
      -1,   565,   566,    -1,    -1,    -1,    -1,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,   591,    -1,    -1,
      -1,   595,   596,   597,   598,   599,   600,    -1,    -1,    -1,
      -1,    -1,    -1,   607,    -1,    -1,   610,    -1,   612,    -1,
      -1,   615
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      84,   103,   124,   132,   133,   134,   144,   145,   157,   171,
     187,   203,   208,   212,   236,   238,   254,   272,   276,   366,
     383,   387,   398,   409,   431,   434,   436,   439,   442,   443,
     450,   452,   459,   465,   473,   478,   480,   483,   508,   512,
     557,   569,   573,   576,   582,   611,   617,   627,   638,   641,
     642,   643,   644,   645,   647,   652,   654,   661,   691,   719,
     726,   835,   924,   997,  1040,  1043,  1051,  1054,  1059,  1061,
    1062,  1067,  1070,  1075,  1082,  1094,  1095,  1259,  1261,  1271,
    1274,  1299,  1307,  1318,  1325,  1339,  1342,  1345,  1355,  1361,
    1365,  1370,  1371,  1421,  1438,  1444,  1446,  1453,  1455,  1483,
    1489,  1490,  1491,  1492,  1545,  1553,  1554,  1555,    11,   111,
     129,   195,   277,   403,   471,   529,  1032,  1033,  1514,  1515,
    1516,  1519,   273,   354,  1069,  1484,   538,  1412,   229,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      62,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   109,   113,   114,   115,   118,   123,
     124,   129,   131,   135,   137,   138,   139,   140,   144,   147,
     148,   149,   153,   155,   156,   158,   159,   160,   163,   164,
     166,   167,   168,   169,   170,   171,   174,   175,   176,   179,
     180,   182,   183,   184,   187,   191,   193,   195,   197,   198,
     199,   200,   201,   202,   204,   208,   209,   210,   212,   215,
     216,   220,   221,   222,   223,   226,   227,   228,   230,   232,
     237,   238,   242,   244,   245,   247,   248,   252,   255,   256,
     257,   260,   263,   264,   270,   271,   273,   275,   277,   278,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   300,   301,   302,   304,   305,   306,   307,
     309,   310,   315,   316,   317,   318,   319,   320,   323,   324,
     326,   328,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   341,   342,   345,   346,   347,   348,   352,   353,   358,
     359,   360,   362,   363,   364,   365,   367,   377,   378,   379,
     382,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   398,   399,   400,   402,   404,   405,   406,
     407,   408,   410,   411,   412,   415,   419,   420,   421,   422,
     423,   426,   427,   428,   429,   430,   432,   433,   435,   436,
     437,   440,   442,   444,   445,   447,   448,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   463,   464,   468,
     469,   470,   471,   475,   479,   481,   482,   483,   484,   486,
     487,   488,   489,   490,   491,   498,   499,   501,   504,   507,
     508,   509,   512,   513,   515,   516,   517,   518,   519,   520,
     523,   524,   525,   526,   528,   529,   531,   533,   534,   535,
     536,   539,   540,   542,   543,   544,   545,   551,   552,   553,
     557,   558,   559,   560,   562,   563,   565,   566,   568,   569,
     572,   575,   577,   579,   580,   581,   588,   591,   595,   596,
     597,   598,   599,   600,   607,   608,   610,   611,   612,   615,
     685,  1411,  1415,  1419,  1420,   300,   528,   532,  1440,  1440,
     607,  1485,   111,   194,   277,   471,   492,   529,   535,   571,
     579,   667,   668,   886,   887,   888,   975,   976,   977,  1308,
    1260,   111,   168,   195,   229,   277,   403,   471,   529,   535,
     554,   579,   596,  1270,  1415,  1069,   684,   635,  1408,  1410,
    1415,   653,  1272,   392,   489,  1366,   114,   229,   612,  1376,
    1440,  1069,   627,   836,  1415,  1362,   459,   579,  1440,  1069,
    1275,  1356,   495,   716,   720,   721,  1415,   684,  1485,  1415,
    1098,  1100,  1101,   368,  1423,  1326,   720,   508,   512,   483,
     551,   483,   532,  1320,   392,   489,  1445,  1300,  1415,    31,
      84,   155,   398,   420,   452,   508,  1547,   465,   627,  1096,
       0,   157,   639,   398,   175,   386,  1343,  1408,  1415,   161,
    1008,  1415,   161,   685,   205,   685,   265,  1412,  1415,  1417,
     781,   782,   785,   808,  1415,   532,   225,   364,  1034,  1035,
    1036,   168,  1003,  1514,  1440,  1485,  1076,   692,   635,   549,
    1052,  1063,    17,  1486,   224,   889,   205,  1417,   783,   808,
     684,   373,  1511,  1515,  1516,  1517,  1518,  1519,   532,   887,
     229,   229,   229,   225,   284,   412,  1316,  1317,     7,    21,
      28,    34,    36,    37,    38,    40,    53,    54,    59,    60,
      69,    72,    74,    75,    76,    77,    78,    79,    96,   100,
     101,   106,   107,   110,   111,   116,   117,   118,   123,   125,
     128,   172,   177,   178,   185,   199,   201,   206,   213,   220,
     224,   236,   239,   257,   262,   270,   281,   303,   308,   319,
     323,   325,   329,   330,   331,   332,   333,   340,   349,   350,
     351,   355,   356,   360,   381,   388,   393,   394,   396,   410,
     438,   439,   451,   457,   463,   510,   511,   517,   521,   522,
     527,   538,   542,   543,   544,   545,   555,   556,   557,   561,
     564,   579,   584,   585,   586,   587,   592,   594,   600,   615,
     620,   621,   626,   627,   630,   631,   634,   635,  1116,  1117,
    1118,  1119,  1123,  1130,  1131,  1132,  1133,  1134,  1135,  1143,
    1147,  1158,  1395,  1397,  1399,  1400,  1404,  1406,  1411,  1415,
     224,  1269,  1269,  1269,  1415,   205,  1269,  1269,   808,  1269,
     684,  1269,  1440,   648,  1346,    12,    13,   103,   132,   145,
     168,   171,   182,   203,   229,   236,   276,   404,   408,   424,
     432,   440,   465,   478,   479,   523,   554,   576,   578,  1456,
    1458,  1460,  1461,  1415,   365,    68,   416,   635,  1417,   130,
     214,   284,  1277,  1415,  1412,   209,   488,  1367,   240,  1372,
    1439,  1440,   925,  1111,    47,   837,   192,    34,   300,  1331,
    1363,  1415,   684,  1071,  1440,   130,   284,  1278,  1306,   300,
     411,   483,  1357,  1358,   588,   717,   473,   722,    12,   408,
    1454,  1458,   549,  1486,  1099,    12,   141,   214,   497,   498,
     499,   500,   501,   502,   514,  1105,  1106,  1107,  1510,  1422,
      24,    35,    59,    60,    67,    72,    99,   101,   103,   112,
     159,   164,   167,   193,   195,   202,   204,   228,   229,   230,
     251,   273,   300,   365,   391,   402,   403,   406,   407,   427,
     470,   483,   513,   531,   532,   580,   599,   949,   974,  1327,
    1331,  1332,  1334,  1429,   722,  1045,  1046,  1045,  1045,   604,
    1044,  1045,  1319,  1415,  1412,  1440,  1306,    36,   213,   538,
    1396,  1413,  1546,  1546,  1546,  1546,  1546,  1100,  1096,   628,
     633,  1415,  1341,  1340,   317,   536,   563,   999,   577,   107,
    1417,  1418,  1001,   787,   809,  1415,  1000,   367,     6,    57,
     145,   350,   415,   417,   810,  1408,  1036,   685,   503,  1520,
    1521,  1002,  1060,  1077,  1078,  1079,  1080,  1408,   627,   693,
    1415,   655,  1265,  1266,  1408,  1265,    56,   352,   352,   431,
    1487,   349,   350,  1122,  1415,   786,   809,   189,     6,  1418,
    1471,  1474,   439,    10,   403,   554,   671,  1111,  1513,  1521,
    1529,  1533,  1534,  1540,   671,  1111,  1512,  1521,  1529,  1534,
    1540,  1514,  1519,   889,  1415,  1415,  1415,   192,  1309,  1313,
    1314,  1415,  1316,   627,   627,   627,  1130,   627,   627,   627,
    1116,  1161,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,  1115,  1115,   627,
    1114,   627,   627,   627,   564,   627,  1395,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,  1116,   627,
     627,   627,   627,  1159,  1160,  1404,  1415,   627,   627,   627,
     627,   627,   627,   627,   627,   627,  1116,  1114,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,  1114,   627,  1395,   627,   627,   627,
    1395,   627,   627,    36,   213,   538,   627,  1115,  1114,  1114,
     627,   627,   627,   627,   627,  1130,  1130,  1130,  1116,  1505,
    1506,  1415,  1148,  1415,    16,    17,   370,   373,   613,  1120,
    1121,   161,   162,   196,   207,   246,   258,   285,   343,  1124,
      32,   142,   243,   266,   329,   425,   476,   477,   490,   618,
     619,   620,   621,   622,   623,   624,   625,  1122,  1130,    71,
     372,   629,  1413,   627,   635,   172,  1415,   685,  1415,   361,
     809,   685,  1417,   819,  1332,   685,  1418,  1470,  1264,  1269,
     583,   649,    34,    67,   135,   159,   163,   197,   216,   230,
     278,   300,   402,   411,   426,   444,   483,   484,   509,   531,
     580,  1347,  1351,  1352,  1440,   402,  1459,   454,   454,   529,
     535,   579,   596,   368,  1463,   528,   361,  1465,    66,   483,
    1462,   112,   596,  1464,   361,   629,    19,   161,  1211,  1212,
    1447,  1415,   225,  1031,   489,    90,   411,  1368,    49,    88,
     284,  1378,  1408,  1441,  1442,  1068,   628,  1116,   268,   271,
     413,   838,   840,   634,   646,  1412,   278,  1072,  1418,  1073,
    1074,  1408,  1055,   240,  1266,  1279,  1280,    49,  1359,   629,
    1413,    55,    65,    81,    93,    94,    95,   109,   318,   335,
     461,   516,   534,   723,   725,  1459,   361,   361,   459,  1488,
    1487,   570,  1493,  1494,   622,  1109,  1110,  1111,  1107,  1424,
    1425,  1426,   167,   473,   266,   602,  1338,   627,   111,   168,
     195,   403,   532,   554,   596,  1338,    12,   898,  1417,   267,
    1230,  1232,   192,   243,  1333,  1335,    70,   509,   190,   509,
     528,    70,   509,    12,    42,    97,   102,   245,   316,   379,
     491,   525,  1321,  1322,  1323,   167,   216,   509,   509,  1230,
    1338,  1335,   278,   158,    73,   405,   528,   553,   509,   591,
    1042,   430,   504,  1047,  1048,  1041,    91,  1266,  1031,   629,
     363,  1549,   524,  1550,   250,   447,  1548,   628,  1494,  1496,
    1498,  1499,   157,   640,  1094,  1344,  1396,  1415,   128,   884,
     885,   895,   896,   958,   114,  1115,   634,   686,     6,   788,
     686,   627,   113,   805,   805,   805,     4,   998,  1004,   464,
     596,  1521,  1265,   243,   629,   387,  1088,  1090,  1091,   694,
     695,  1116,   226,   286,   287,   288,   289,   290,   291,   293,
     294,   295,   296,   297,   298,   299,   301,   302,   428,   429,
     656,   657,   660,   175,   412,   629,  1053,    58,   175,   179,
     190,   315,   412,  1064,  1065,  1066,    56,   431,   172,   666,
     788,   114,   805,   222,   629,  1111,  1111,  1111,   168,   195,
     195,  1521,  1408,   978,   979,   978,   978,  1267,  1268,  1408,
    1409,  1415,   629,  1311,   635,  1315,  1116,  1116,    12,   141,
    1153,  1213,  1153,  1153,  1153,   601,  1163,  1116,  1116,  1158,
    1158,  1116,  1116,  1116,  1128,  1129,  1116,  1116,  1116,  1116,
    1116,  1116,   141,  1153,  1213,   628,   125,   185,   213,   281,
     356,   561,   628,  1239,  1242,  1243,   628,  1116,  1116,  1116,
    1116,  1404,  1505,   119,   120,   121,   122,   123,   217,   218,
     219,   220,   319,   321,   322,   323,   330,   410,   462,   463,
     600,   614,   615,  1208,  1209,  1158,   115,   118,   542,   545,
    1210,   141,  1150,  1116,  1116,  1116,  1116,  1208,  1158,  1116,
    1158,  1160,     9,   629,   635,   141,  1153,  1116,  1116,   141,
    1153,  1116,  1116,  1158,  1158,  1158,  1116,  1116,  1116,  1158,
    1119,  1116,  1116,  1116,  1116,  1116,  1116,  1153,  1153,  1116,
    1116,   141,  1153,  1116,  1209,  1209,  1116,    45,   259,   550,
    1116,  1116,   628,  1405,  1406,  1415,  1153,  1153,  1116,  1116,
     628,   629,   628,   465,   627,  1502,  1503,  1116,   634,  1149,
    1417,   635,  1116,  1116,  1116,  1118,   178,   355,   556,   572,
    1122,    12,    18,  1118,  1125,  1119,  1119,   627,  1130,  1119,
    1119,  1119,  1119,   266,  1119,  1119,   239,  1119,   239,  1119,
    1119,  1119,  1119,  1119,    32,   243,   266,   425,  1417,  1130,
    1116,  1136,  1415,   635,  1408,   819,   353,   598,   820,   821,
     159,   629,  1265,  1262,   634,   650,   651,   278,   278,   278,
     278,    49,   278,   278,   629,  1348,   528,   627,  1475,  1418,
    1475,  1475,  1475,   195,   403,   532,  1457,  1461,  1415,   183,
     346,  1415,  1448,  1449,  1279,  1412,   579,  1116,  1369,  1083,
     273,  1377,  1212,   629,  1265,  1112,    73,   627,   844,   845,
     844,   845,   386,   847,   210,   253,  1417,    30,   549,  1364,
     629,   549,   629,   549,  1265,  1280,  1276,    12,  1360,  1358,
     629,   161,   629,  1418,   195,   403,  1457,  1415,    12,   141,
    1501,   629,  1102,  1116,  1402,  1415,   629,   202,   273,   362,
     470,  1427,  1428,  1431,  1432,   243,  1336,  1412,  1116,   622,
     889,   685,   685,   685,  1408,   685,  1408,   278,   334,   509,
    1330,  1330,   281,   356,   455,   561,  1233,  1234,  1397,  1415,
    1338,  1415,   685,  1338,  1418,  1333,   685,  1338,   244,   526,
     180,   190,  1324,   629,  1336,  1333,  1408,  1335,  1333,  1333,
    1338,  1338,   575,  1049,   629,  1049,   486,   465,   627,   631,
    1164,  1165,  1166,  1167,  1168,  1177,  1178,  1192,  1396,   390,
    1551,   371,  1226,  1232,  1500,   885,    71,   949,   137,  1417,
      82,    96,   255,   327,   352,   414,   503,   688,   690,   421,
     565,   806,   807,   232,   802,   803,   804,   811,   819,   821,
     111,   215,   377,   388,   395,   487,   579,   669,   670,  1412,
      25,   307,   796,   797,   798,   811,   812,   813,   819,   821,
     789,   790,   796,     6,    13,    15,    26,    27,    57,    62,
      63,    69,    82,    90,   100,   114,   131,   138,   139,   145,
     153,   159,   188,   227,   229,   237,   252,   306,   324,   328,
     366,   371,   378,   380,   387,   388,   419,   433,   434,   435,
     436,   456,   513,   529,   533,   552,   557,   570,   832,   891,
     893,   895,   896,  1009,  1013,  1015,  1018,  1024,  1025,  1026,
    1222,  1411,   361,   679,  1005,   129,   242,  1408,   128,  1081,
    1415,  1079,  1408,   834,  1090,   229,   253,   972,  1092,   628,
     629,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   629,
    1266,   577,  1065,   883,   884,    82,   347,   422,   566,   799,
     800,   801,   811,   815,   816,   817,   818,   819,   821,   608,
     582,   784,    47,   595,   604,  1472,  1474,   195,   685,   685,
     889,   685,  1415,   662,   559,   583,   986,   361,   361,   361,
     629,  1312,  1310,   635,  1315,  1314,   192,   622,  1415,   629,
     628,  1153,   628,  1154,   628,   628,   628,  1116,   151,   601,
    1162,    19,   628,   583,   628,   628,   628,   629,   629,   628,
     629,   629,   629,   629,   628,   629,   583,   629,  1144,   628,
     622,   628,   629,   629,   628,   628,   628,   628,   192,   628,
     629,  1146,   628,   629,   629,   629,   621,   628,   629,   628,
     628,   627,  1404,  1415,  1153,   628,   628,   628,  1153,   628,
     629,   628,   628,   628,   628,   628,   628,   629,   628,   243,
     628,   629,   629,   629,   629,   628,   628,   628,   629,   192,
     629,  1153,   628,   628,   629,   629,   629,   628,   192,  1116,
     192,  1116,   192,  1116,   192,   628,   629,   628,   628,   628,
     628,   629,   628,  1158,  1182,  1183,  1184,   465,   627,  1097,
    1497,  1498,   570,  1507,   632,   202,   273,   470,  1430,   474,
    1415,   178,   355,   556,   572,   627,    17,  1116,  1505,   166,
    1218,  1119,  1116,  1116,  1119,   627,  1130,  1119,  1111,  1140,
    1141,  1142,   627,   635,  1415,  1263,   820,   161,   474,  1290,
    1291,  1418,    51,   446,  1037,  1265,  1417,   629,  1352,  1265,
    1353,  1415,  1476,  1477,   549,   622,  1408,  1415,  1469,  1469,
    1469,   161,   183,   196,   207,   256,   258,   285,   346,   400,
    1450,  1452,   602,  1214,  1273,  1418,  1084,  1085,  1086,  1087,
    1408,   231,   284,   416,   609,  1443,  1442,   627,  1111,  1239,
     520,   848,   839,   627,  1116,  1412,  1418,  1418,  1074,  1408,
     175,   412,   581,  1056,  1057,  1058,   465,   473,   587,   588,
     627,   879,  1281,  1284,   725,   118,   542,   545,   724,  1147,
    1399,  1404,   203,   192,  1469,  1469,  1469,  1495,  1110,   192,
     240,  1103,  1104,  1225,  1226,  1254,  1112,  1112,   635,  1425,
     128,   551,  1415,  1434,   336,   388,   634,   949,  1433,  1412,
     192,  1337,   628,  1415,   170,   455,   359,   629,  1338,   411,
    1230,  1323,  1337,  1338,  1333,  1408,  1338,  1338,   660,  1050,
    1048,  1191,  1415,   104,   233,   250,   262,   339,   451,   514,
    1176,   473,   629,  1408,  1191,   629,   190,  1552,    47,  1230,
    1291,  1291,   337,  1412,   503,   503,   503,   503,   503,   464,
    1412,  1412,  1291,   629,   804,  1412,  1412,  1412,  1412,   125,
     185,   213,   281,   356,   561,  1238,  1412,  1412,   628,   629,
    1291,  1291,   629,   798,   791,   792,   811,   812,   813,    80,
      92,   387,   907,   914,   915,   970,   972,   976,   977,  1030,
    1030,   387,  1291,  1291,  1030,  1291,   387,   387,  1291,  1291,
     549,   137,  1291,   251,   529,   189,   387,   401,   972,  1030,
     251,  1291,   529,   137,  1291,  1291,  1291,  1291,  1030,   387,
      47,  1291,  1291,   834,  1291,   387,   385,    19,   161,   549,
    1039,   387,   387,  1291,   140,   316,  1415,  1291,  1291,   387,
    1291,   891,   629,   831,   832,  1013,   627,   635,   906,   916,
    1407,  1415,  1290,    86,   460,   434,  1006,  1522,  1089,   627,
    1116,   627,  1238,  1412,  1412,   125,   185,   281,   356,   561,
    1240,  1412,  1238,  1412,  1412,  1412,  1412,  1412,  1238,  1238,
    1412,  1400,  1412,  1238,   657,  1291,  1291,  1291,  1291,   629,
     801,  1417,   277,   176,   793,   794,   795,   811,   812,   813,
     814,   817,   818,   819,   821,   388,   538,  1417,  1415,  1541,
       8,    30,   779,   685,   627,   448,   266,   627,   823,   890,
     892,   893,    46,   210,   458,   991,   991,  1408,  1408,  1408,
    1268,  1415,   583,  1214,  1415,  1165,   635,  1315,   239,  1116,
     628,  1116,   541,  1116,  1116,   155,    34,    60,   115,   118,
     126,   143,   241,   341,   481,   545,   574,  1155,    34,   950,
    1417,  1129,  1116,  1128,  1158,  1116,  1116,  1116,   950,  1155,
    1158,   628,   239,   239,  1116,  1116,  1158,  1116,  1116,  1116,
    1116,  1116,  1119,   628,   628,  1116,  1116,  1116,  1116,  1116,
    1116,  1158,   239,  1116,  1116,  1116,   628,  1116,  1116,  1116,
    1116,   192,  1116,   192,  1116,   192,  1116,  1116,  1116,   628,
    1508,  1509,  1510,  1183,  1097,   628,  1501,   635,   635,   635,
    1417,  1116,  1505,  1118,   628,   629,   628,  1130,  1208,  1208,
      17,  1116,  1505,  1218,  1116,   628,   629,  1157,  1158,  1415,
     897,  1417,  1037,   651,  1349,   628,   629,  1471,   635,   635,
     549,   549,   549,  1451,  1215,  1231,  1232,  1281,   629,  1088,
    1090,   538,  1414,   609,   273,    88,   841,   842,   843,  1415,
     853,  1119,    47,   627,   855,   845,   841,   549,  1057,   880,
    1282,   627,  1287,  1292,  1287,   628,   879,  1283,  1401,  1402,
    1405,  1415,  1285,   161,   368,  1470,   192,   192,   192,  1095,
     146,  1165,  1255,   190,   276,  1108,  1254,  1231,  1104,    19,
    1113,  1412,  1415,   622,  1415,   635,   247,   635,  1290,   128,
     950,   951,  1290,   190,  1290,   634,  1417,    34,   128,   953,
     954,  1417,  1240,  1328,   164,   599,  1234,  1235,   170,  1234,
    1234,   356,  1329,  1214,  1333,   629,  1179,  1186,  1191,  1164,
     250,   250,   374,  1193,   250,   262,   451,  1193,  1177,  1164,
    1302,  1303,  1405,  1166,  1212,  1188,  1189,  1238,   320,  1227,
     128,   955,   957,  1417,   951,   114,   114,   129,   242,   221,
     822,  1239,   804,   670,   822,   822,   798,   629,   792,   994,
    1407,  1069,    63,   189,   401,   571,   913,   971,   994,   972,
     973,   973,  1407,  1069,  1240,  1238,  1407,  1238,    12,  1014,
    1022,  1023,  1415,  1069,  1412,  1412,   949,  1291,  1238,   253,
    1022,   253,  1407,  1407,   897,  1291,   183,   256,   352,   900,
    1238,  1240,  1240,  1407,  1069,  1223,  1224,  1405,   128,  1238,
     128,  1238,  1244,   833,  1412,  1069,  1408,  1069,  1069,    85,
      87,   128,   149,   184,   379,   423,   899,  1238,  1244,  1014,
     894,     6,   145,  1026,   903,   904,   905,   906,   907,  1415,
       8,   183,  1038,   424,   912,   913,   964,   917,   635,   128,
     213,   281,   356,   561,  1241,  1242,  1412,  1415,   350,   399,
      23,   169,   673,   549,   138,   153,   675,   627,  1523,   627,
     401,  1204,  1205,  1206,  1415,   658,   659,  1238,  1412,  1239,
     822,   822,   801,   367,   205,  1291,   629,   795,   538,    19,
     583,  1473,   448,   627,   132,   236,   576,   780,   672,  1535,
     126,   241,   418,   515,   902,  1408,   266,   387,   824,   830,
     831,   903,   830,   629,   892,   663,   664,   665,   635,  1165,
    1225,  1315,  1214,  1116,   628,  1116,   541,   627,   941,   942,
     942,   942,   627,   936,   937,   941,  1156,   942,   241,   942,
     241,   628,   628,   628,    19,  1126,   628,   628,    19,   628,
     628,   628,  1145,  1116,  1116,   628,   628,  1152,  1226,   629,
     629,   628,   629,   628,   243,  1137,  1138,   628,   628,   628,
     628,   629,   628,   628,  1116,   628,   190,   628,   628,   629,
     628,   629,   629,   628,  1116,   628,  1116,   628,  1116,   628,
     628,   628,  1109,  1510,   628,  1504,   635,   995,   628,  1158,
    1118,   628,   629,   628,  1112,  1142,   628,   604,  1350,  1477,
     604,  1480,   622,   622,  1471,  1471,  1471,   627,  1116,   361,
    1297,  1086,  1408,  1090,   225,  1093,  1373,   628,   629,  1112,
     840,   387,   856,   857,   628,  1418,  1105,  1288,  1289,  1405,
    1293,   629,   627,  1284,   628,   628,   629,   635,  1493,   724,
     192,  1470,  1470,  1470,  1214,  1214,   147,   375,  1250,  1251,
    1256,   576,   243,  1412,  1415,   635,  1415,   264,  1415,    12,
      34,   128,   361,  1116,  1437,    71,   956,  1116,  1418,   360,
     388,   538,  1436,  1430,  1290,  1230,  1235,  1230,  1338,   660,
     570,   628,  1497,  1187,   632,   250,  1177,  1193,  1193,   250,
     361,   361,   583,   629,  1301,  1290,  1202,  1203,  1105,  1116,
    1228,  1403,   792,  1016,   627,   253,   253,   973,   994,   979,
     994,   994,   145,   473,  1014,  1027,  1011,   629,  1239,   951,
    1412,   994,  1037,  1412,  1028,  1014,   629,    20,   133,  1229,
     837,  1014,  1019,  1014,   627,   628,   629,  1415,  1408,    33,
      34,    39,    41,    43,    44,    60,   115,   118,   126,   143,
     160,   184,   186,   199,   200,   241,   270,   279,   280,   282,
     312,   313,   314,   331,   332,   333,   338,   341,   357,   358,
     393,   394,   418,   469,   473,   485,   539,   542,   545,   546,
     547,   548,   589,   590,   615,   918,   926,   929,   930,   931,
     932,   933,   934,   935,  1415,   399,  1116,  1116,   361,   679,
     685,   361,    82,   680,  1415,  1524,    19,  1014,   628,   629,
     628,   629,   627,  1415,   822,   795,  1412,   902,  1542,   361,
     361,   696,   697,   699,  1415,   489,  1408,   879,   628,   225,
     439,   827,  1379,   892,   627,   627,   627,  1415,  1214,   267,
    1236,  1208,  1116,   125,   281,   356,   561,    21,    34,    48,
     568,   949,   959,   960,   961,   356,   627,   937,   943,   115,
     118,   126,   143,   186,   241,   338,   341,   418,   545,   574,
     930,   931,  1127,  1155,   628,  1208,  1208,   467,  1151,  1116,
    1116,  1158,    43,   339,   628,   604,  1139,  1116,  1208,  1116,
    1116,  1116,  1116,   628,   628,   628,  1185,  1502,  1415,   628,
    1158,  1113,   416,   203,   441,  1478,  1478,  1478,   128,  1116,
    1295,  1296,   148,  1093,   260,  1379,   843,   628,   210,   253,
     858,   628,   629,  1109,   629,  1290,  1294,  1295,  1292,  1286,
    1284,  1401,  1415,  1470,  1231,   205,  1219,  1414,  1414,   634,
    1252,  1253,  1417,   475,   622,   416,   437,   468,  1435,   957,
    1290,   627,   627,  1434,  1116,  1501,  1212,  1167,  1164,  1177,
     250,   250,  1164,  1177,  1170,  1169,  1171,  1303,  1214,  1296,
    1200,  1201,  1109,   629,  1229,   386,   627,  1017,  1116,   994,
     979,   627,   978,   978,   128,   128,   916,  1064,  1023,   956,
     918,  1010,  1224,  1020,  1022,  1012,  1353,   905,   627,   965,
     941,   941,   942,   942,   936,   397,   927,   936,   936,   961,
      60,   589,   930,   932,   961,   961,    60,   590,   590,   593,
     936,   928,   942,   942,   942,   961,   941,   942,    26,    71,
      82,   128,   198,   355,   361,   401,   469,   571,   919,   944,
     945,   946,   963,  1122,  1411,   593,   941,   961,    34,   941,
     962,   941,   941,   942,   943,   635,  1208,   483,  1412,   144,
    1007,   628,   629,  1525,  1526,   628,  1205,   659,   669,   489,
     234,   243,   376,   700,   701,   702,   703,  1111,   460,   628,
     629,   698,  1412,   628,   628,   825,    19,   882,   992,   993,
    1415,   992,   992,   455,  1234,   628,   628,   628,   628,   628,
      34,    21,   568,   949,    34,   950,   629,   356,   942,   936,
      60,   942,   241,   961,   628,   628,   628,  1396,   628,   628,
     629,   628,   326,   255,   411,   628,   628,   628,   628,   628,
     628,   901,  1104,  1231,  1497,   628,   276,   368,    64,   248,
     348,   505,   518,   610,  1467,  1468,   604,  1479,  1479,  1479,
     628,   629,  1298,   240,   627,   846,   627,   859,  1415,   857,
     881,  1289,  1296,   628,  1496,    47,   211,  1216,  1257,  1417,
     629,   326,    83,   562,   416,  1436,   538,   538,  1290,  1180,
     361,  1173,  1177,  1177,   361,  1175,  1116,  1116,   627,  1225,
     188,   225,   582,  1195,  1196,  1199,  1190,  1403,  1239,   856,
     628,   627,   627,   992,   627,   627,   118,   542,   545,   620,
     621,  1398,  1399,  1038,  1029,  1069,  1021,  1056,   628,   966,
    1415,   303,   967,   481,   574,   616,   938,   939,   940,   627,
     938,   938,   961,   593,   938,   627,   961,   938,   955,  1412,
     351,   948,  1398,    14,   576,   128,   253,    19,   946,   253,
     355,  1290,   961,   962,   961,   962,   938,   938,  1415,   674,
     681,   682,  1415,   465,   627,  1527,   628,  1412,   628,   629,
     698,  1530,   673,  1536,   699,   926,   947,   826,   890,   627,
     879,   628,   629,  1229,   627,   628,   628,   170,   455,   950,
     962,   356,  1116,   326,   174,  1108,  1108,    17,  1354,   538,
     538,   538,    17,  1466,   203,   304,   305,   309,   310,  1481,
    1482,  1296,   253,   532,  1111,   849,   851,   852,  1415,   587,
     860,   901,  1220,  1403,  1217,  1225,   949,   952,  1253,   628,
     628,  1437,  1502,  1172,   583,  1174,   583,  1207,  1415,  1236,
     972,   972,  1196,   901,  1229,   628,   992,   992,   628,   992,
     992,  1400,  1400,  1038,   240,   628,   629,   193,   384,   482,
     361,   968,   940,   996,  1396,   996,  1115,   351,   588,   627,
     128,  1241,  1412,  1415,   507,   676,    53,    68,   181,   224,
     249,   261,   365,   449,   683,   730,   732,   733,   734,   736,
     737,   738,   739,   740,   741,   743,   751,   752,   755,   766,
     769,   771,   772,  1411,  1416,  1420,  1098,  1096,   604,  1528,
    1543,   702,  1415,  1408,   678,   679,   448,   956,  1496,   830,
     879,   828,    82,   252,   980,   983,   986,   987,   988,  1411,
     993,   356,   604,   981,   985,   987,   990,   982,   984,   987,
     989,   170,   628,   628,   138,  1467,   368,  1238,  1238,  1238,
     356,   620,  1237,  1482,   576,  1408,   853,   519,   854,   628,
     629,   243,   263,    82,    90,   114,   229,   306,   324,   347,
     529,   876,   877,   878,  1332,   605,   606,   629,  1221,  1229,
    1116,  1231,   951,  1258,  1181,  1116,   627,  1116,   627,   628,
     629,   190,  1194,  1194,   628,   628,   908,   628,   628,   627,
    1415,   132,   576,   628,   629,   628,  1115,   925,  1116,   156,
     677,   753,   756,  1415,   192,   346,   744,   731,  1416,  1416,
    1415,   735,   642,   283,   438,   603,   775,    31,   773,   636,
     628,    52,    63,   273,   687,   947,   190,   675,  1537,   827,
     628,  1493,  1412,  1291,   988,  1290,  1229,   628,   382,   990,
     989,    61,   281,   356,  1304,  1305,  1405,  1374,  1112,  1239,
     850,   852,   862,   540,  1291,  1291,   137,   137,  1291,  1291,
    1291,  1291,   627,   871,   878,   159,  1403,   403,  1245,    73,
    1380,  1497,  1207,  1207,  1415,   205,   250,   371,  1198,  1197,
     964,   911,   980,   909,   910,   856,    51,   352,   446,   473,
     969,   969,   961,  1396,   961,   628,  1116,  1116,   601,   758,
     762,   192,  1415,   746,   747,  1116,   705,   729,   730,   732,
     734,   736,   738,   739,   740,   741,   743,   751,   766,   769,
     771,   705,   776,   774,   767,   770,  1496,    63,   368,    63,
     136,   688,   689,  1122,  1544,  1111,   680,   947,   829,  1238,
     128,  1241,  1412,  1415,  1411,   629,  1290,   952,   628,   854,
     627,   864,   866,   861,  1412,  1412,  1291,  1291,  1241,  1241,
    1239,  1417,   520,   872,   873,  1291,  1229,  1415,   154,   165,
     369,   537,  1381,  1382,   269,  1383,   628,   628,    47,    47,
     627,   627,   980,   981,   982,   628,     5,   128,   355,   361,
     361,   389,   597,   920,   754,   763,   151,   762,   765,   240,
     155,  1116,   155,   729,   633,   575,  1116,   706,   775,   773,
     368,   368,   136,   729,  1531,   144,  1538,  1496,  1305,  1296,
    1375,   627,   865,   866,   867,   311,   863,   866,  1412,  1412,
     874,   628,   629,   897,  1246,    47,    47,   154,    47,  1382,
     506,   537,  1384,  1385,  1204,  1206,   576,   132,    82,   571,
     921,   922,   923,   601,   757,   759,  1116,   705,   155,   742,
     224,   541,   283,   633,   778,   144,   127,   704,   707,   768,
    1416,   768,   150,   681,   687,   455,  1386,   628,   629,   311,
     869,   870,  1119,   875,  1417,   873,   627,  1396,  1396,    47,
    1396,    47,    47,  1385,   628,   628,   969,   969,  1412,   253,
     923,   760,   759,   765,   764,    53,   745,  1415,   748,  1116,
     777,    98,   173,   712,   727,  1415,   155,   729,   633,   457,
    1539,   222,  1380,   866,   629,   868,   876,  1111,  1247,  1248,
    1249,  1396,  1396,  1396,  1116,   155,   541,   629,   705,   155,
     705,   208,   629,   708,    89,   108,   633,  1532,   729,    47,
    1383,   870,   628,  1116,   628,   629,   761,    53,   705,  1415,
     749,   438,   155,   190,  1415,   947,   190,   190,   729,  1396,
     225,  1387,  1112,  1249,   541,   151,   152,   750,   603,   709,
     128,   728,   715,   716,  1238,   710,   711,   356,   627,  1389,
     705,   705,   746,   494,   496,   713,   714,   715,   718,  1122,
    1415,  1116,  1094,   269,   455,  1388,   628,   634,  1390,  1391,
    1405,   473,  1392,   629,   729,   191,  1417,   628,   629,  1393,
    1394,  1405,   714,  1391,   629,  1290,  1394,  1111,  1296,  1112
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 1908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 1912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 1963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 2938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 2939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 2944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 2948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 2957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 2964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 2971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 2981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 2996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 3897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 3899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 3938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 4032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 4048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 4056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.option_list= NULL;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 5863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 5875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(6);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 5885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 5903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 5908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 5910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 5935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 5971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local(6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 5977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 5981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 5982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 5987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 5998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (5)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (5)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (5)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 6940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->num= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_exists((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_list((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 8995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                      (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union() &&
                      ((yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->first_select() ==
                       (yyvsp[(3) - (5)].table_list)->select_lex || !(yyvsp[(3) - (5)].table_list)->lifted)) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 11900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 11943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 11944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 12962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 12963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 12964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 12965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 12966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 12967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 12968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 12969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 12970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 12971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 12972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 12973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 12974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 12975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 12976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 12977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 12978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 12979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 12980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 12981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 12982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 12983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 12984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 12985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 12986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 12987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 12988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 12998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 12999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 13818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 13935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 13946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 13973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 15147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 40661 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



